{"version":3,"sources":["Game/AbstractPlayer.ts","Game/constants.ts","Utils/Rng.ts","Game/GameRules.ts","Entities/Ordnance.ts","Entities/WorldObjects/Bases/AbstractMilitaryBase.ts","Entities/WorldObjects/Bases/AbmBase.ts","Data/RadarBaseNames.ts","Entities/WorldObjects/Bases/RadarBase.ts","Entities/WorldObjects/Bases/MissileBase.ts","Entities/WorldObjects/Bases/AirBase.ts","Entities/WorldObjects/Bases/ArmyBase.ts","Entities/WorldObjects/Bases/NavyBase.ts","Factories/MilitaryBaseFactory.ts","Utils/MapUtils.ts","Game/GameLogic.ts","Entities/WorldObjects/PopulationCenters/AbstractPopulationArea.ts","Entities/WorldObjects/PopulationCenters/City.ts","Entities/WorldObjects/PopulationCenters/Rural.ts","Entities/WorldObjects/PopulationCenters/MajorTown.ts","Factories/PopulationAreaFactory.ts","Entities/MapObjects/MapLocation.ts","Entities/MapObjects/AbstractMapLocation.ts","Entities/WorldObjects/CountryMap.ts","Game/ComputerPlayer.ts","Game/HumanPlayer.ts","Data/ComputerNames.ts","Entities/gameEntity.ts","Components/TickerComponent.tsx","Components/GameHeaderComponent.tsx","Components/GameButton.tsx","Components/BuildManifestComponent.tsx","Components/MilitaryBaseComponents/AbmBaseComponent.tsx","Components/MilitaryBaseComponents/RadarBaseComponent.tsx","Components/OrdnanceTargetingComponent.tsx","Components/MilitaryBaseComponents/NavyBaseComponent.tsx","Components/MilitaryBaseComponents/MissileBaseComponent.tsx","Components/MilitaryBaseComponents/AirBaseComponent.tsx","Components/MilitaryBaseComponents/ArmyBaseComponent.tsx","Components/BaseActivatorComponent.tsx","Components/UserActionsComponent.tsx","Components/GameLogComponent.tsx","Components/MapComponents/MapItemComponent.tsx","Components/MapComponents/MapSummaryComponent.tsx","Components/MapComponents/MapItemHoverComponent.tsx","Components/MapComponents/MapComponent.tsx","Components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AbstractPlayer","args","Object","classCallCheck","this","isHuman","allTargetedOrdnanceItems","ordnanceItemsArrivingThisTick","Constants","NOTIFY_BUILD_RESULT_CALLBACK_NAME","NOTIFY_TARGET_RESULT_CALLBACK_NAME","MIN_INITIAL_FIGHTERS","MAX_INITIAL_FIGHTERS","MIN_INITIAL_BOMBERS","MAX_INITIAL_BOMBERS","MIN_ICBMS","MAX_ICBMS","MIN_SUB_MISSILES","MAX_SUB_MISSILES","BUILD_DROP","TARGET_MISSILE_DROP","FIRST_STRIKE_POPULATION_HIT_PCT","SECOND_STRIKE_POPULATION_HIT_PCT","THIRD_STRIKE_POPULATION_HIT_PCT","PCT_VISIBLE_SENTIMENT_THRESHOLD","EXPECTED_BASE_COUNT_FACTOR","DROPTYPE","BASETYPE","MANIFESTINDEX","ARMY_BASELABEL","NAVY_BASELABEL","MISSILE_BASELABEL","ABM_BASELABEL","AIR_BASELABEL","Rng","createClass","key","value","Math","floor","random","hiNumberMinus1","sourceArray","length","throwDice","GameRules","atLocation","Contents","WorldObjectLabel","rNbr","basedOnStrategicChoice","popStrikePctLookup","onMapLocation","Population","nuclearStrikes","peacetimeStrategicOptions","warTimeMoveOptions","pre1962TacticalOptions","post1962TacticalOptions","concat","warTimeTacticalOptions","game","Game","getInstance","currentPeacetimeTacticalOptions","gameYear","isPeacetime","strategicOptions","tacticalOptions","strikeCount","locationAttacked","populationKilled","getNuclearStrikePopulationKilled","attackingOrdnance","attackedBy","GameStartYear","Ordnance","myTarget","remainingTicksBeforeStriking","wasConsumed","myID","nextOrdnanceID","myBase","parentBase","wasIntercepted","myWorldLabel","AbstractMilitaryBase","Name","wasDestroyed","isReceivingOrders","myMapLocation","yearBuilt","AbmBase","_AbstractMilitaryBase","_this","possibleConstructorReturn","getPrototypeOf","call","totalMissiles","isTracking","inherits","RadarBaseNames","getNameReslt","GameLogic","getNameForNameableItem","fromNamesArr","availableRadarBaseNames","allOtherNames","baseName","RadarBase","modeOfOperation","getRadarBaseName","console","log","mode","MissileBase","public","ordnance","some","m","activateMissileBase","forBase","AirBase","totalFighters","isFlying","activateAirBase","b","ArmyBase","isDecamped","NavyBase","activateNavyBase","MilitaryBaseFactory","msh","nextBaseID","newBaseProperties","baseType","instance","MapUtil","forMapLocation","i","map","j","xformFunc","summary","getMapSummary","forMap","allAbmBases","allAirBases","allArmyBases","allMissileBases","allNavyBases","allRadarBases","ttlTtO","base","filter","o","allTO","mu","addLocationToSummary","mapLoc","addToSummary","isAbmBase","totalAbmMissilesOnLine","isRadarBase","totalPassiveRadarStationsOnLine","loc","totalActiveRadarStationsOnLine","isActiveRader","isArmyBase","isAirBase","totalBombersInFlight","totalFightersOnPatrol","isMissileBase","totalICBMsOnLine","isNavyBase","totalSubMissilesOnLine","targetedMapLocations","isTargeted","totalPopulation","allIn","reduce","runningSummary","currentMapRow","s1","s2","prev","curr","initialSummary","runningPop","uniqueID","mLoc","onMap","createNewBase","rLoc","r","rLoc2","r2","bLoc","nLoc","n","aLoc","a","abmLoc","abm","placeItem","itemToPlace","isWO","l","which","gameStateWatchers","watcher","forEach","gsw","handleGamestateChange","details","notifyGamestateChange","changeLabel","currentPlayer","computerPlayer","playTurn","humanPlayer","relatedBase","targetingOrdnance","atMapLocation","getMissileArrivalTicks","attackingPlayer","relatedLocation","totalICBMs","totalBombers","isSleeping","setInterval","setTimeout","pulseClock","isWartime","resolveWartimeAttacks","tryAbmDefense","tryIntercept","defender","didShootDownOrdnance","nuclearOrdnance","abmBaseIndex","availableABMBases","defendingPlayer","getAllABMBases","tryAttack","ao","locationUnderAttack","getNextReadyOrdnance","foundAttackingOrdnance","ticks","defendingPlayerMapSummary","tryICBMAttack","tryBomberAttack","error","trySubmarineAttack","getLocationDamage","getUpdatedOrdnanceArrivalTicksForPlayer","p","objectSpread","hasOrdnanceStrikingThisTick","forPlayer","resolveAttacksOnPlayer","defendersMap","allTargetedLocations","locationsUnderAttackThisTick","aTargetedLocation","oiatt","attackedLocation","result","damageLocation","location","damage","myMap","owningPlayer","totalCausualties","isMilitaryBase","militaryBase","isLiveOrdnance","forOrdnance","playerA","playerB","ato","declaringPlayer","declaredWar","playComputerTurn","turn","year","targetPlayer","allMilitaryBases","baseConcealmentFactor","baseSpyFactor","spyLevel","spyAmount","enemyVisibility","ceil","tryFindBase","pickRandomFromArray","selectedNameIdx","idx","AbstractPopulationArea","City","_AbstractPopulationAr","name","population","RuralArea","MajorTown","PopulationAreaFactory","nextPopulationAreaID","forPopulationArea","popAreaType","MapLocation","_AbstractMapLocation","nextID","_this2","ml","AbstractMapLocation","CountryMap","newRuralArea","createNewPopulationArea","sizeX","sizeY","owner","ownerLabel","initializeMap","table","x","push","y","mi","bases","mapRow","mapCell","baseLocationsInRow","apply","getAllMilitaryBases","ComputerPlayer","_AbstractPlayer","registerGamestateWatcher","assertThisInitialized","totalFunctionalActiveRadarStations","totalFunctionalPassiveRadarStations","createTestBases","sentimentMap","Map","set","percentBuildStart","percentSpyStart","percentDeclareWarStart","playPeacefulTurn","advanceTurn","playWarTurn","testGuard","radarTest","missileTest","airBaseTest","navyBaseTest","armyBaseTest","abmBaseTest","myMapSummary","abmbase1","activateAbmBase","armybase1","activateArmyBase","missile1","missile","handleMissileTargeted","getRandomLocation","fromMap","_this3","navyBase","_this4","airBase","radar1","setModeOfOperation","activateRadarBase","radar2","suspectedBasesCount","expectedBaseCount","sentiment","suspected","getAllowedMoves","calculateCurrentSentiment","sentimentTable","get","tablelookupVal","strategicChoice","spyOnPlayer","buildBases","numberToBuild","allowedBases","toBuild","logDetailedMapToConsole","randX","randY","HumanPlayer","GameData","allComputerNames","_AbstractGameEntity","getRandomComputerName","startClock","initializeGame","AbstractGameEntity","TickerComponent","_Component","props","state","forHtmLID","msgTextElem","document","getElementById","innerHTML","intervalHandler","tickerMessage","substring","tickerInterval","clearInterval","onRenderCompleteCallback","htmlID","nextHtmlID","showMessage","react_default","createElement","id","Component","GameHeaderComponent","yearMessageTemplate","yearMessage","forceUpdate","className","TickerComponent_TickerComponent","UIComponent","GameButton","withStyles","root","borderRadius","border","color","height","padding","boxShadow","label","textTransform","Button","BuildManifestComponent","uiIdx","uiKey","emptyManifestSelection","buildWhat","buildWhere","didBuild","buildResultText","buildManifest","setState","Array","totalAllowedToBuild","fill","manifestIndex","newBuildManfest","didSucceed","message","updatedManifest","allowedBaseMarkup","allowedBasesToBuild","allowedBase","draggable","onDragStart","e","dragEvent","ab","manifiestIndex","dataTransfer","setData","toString","window","handleDropResult","bind","dragStartMarkup","forManifestIndex","onDragEnd","individualAllowedBaseMarkup","forBaseType","title","baseTokenSrc","src","width","Fragment","selection","GameButton_UIComponent","onClick","finishHumanTurn","AbmBaseComponent","readyToActivateMarkup","isTrackingMarkup","isNotReceivingOrdersMarkup","wrapper","toWrap","wasDestroyedMarkup","RadarBaseComponent","didActivate","setMode","handleRaderPulser","isActivatedMarkup","mapLocElement","getMapLocationHtmlID","pulseUp","pulseDown","classList","remove","add","OrdnanceTargetingComponent","_React$Component","nextUIKey","ordnanceLabel","toTargetMarkup","missileIndex","forMissileIndex","consumedMarkup","targetedMarkup","currentPlayerType","targetedLocation","isAllOrdnanceTargeted","targetingCompleteCallback","React","NavyBaseComponent","isTargetingMissiles","isTargetingMarkup","OrdnanceTargetingComponent_OrdnanceTargetingComponent","allTargetedMarkup","MissileBaseComponent","AirBaseComponent","isTargetingBombers","isFlyingMarkup","ArmyBaseComponent","decampArmy","isDecampedMarkup","BaseActivatorComponent","uiKeyNbr","getBaseUI","AbmBaseComponent_AbmBaseComponent","ArmyBaseComponent_ArmyBaseComponent","AirBaseComponent_AirBaseComponent","MissileBaseComponent_MissileBaseComponent","NavyBaseComponent_NavyBaseComponent","RadarBaseComponent_RadarBaseComponent","isWaitingForSelection","activeBases","inactiveBases","destroyedBases","destroyedBases1","baseEntity","destroyedBases2","ib","activate","handleBaseActivatedAnimation","slice","registerForHumanPlayerMapClicks","ui","initializedBases","player","activeBase","inactiveBase","destroyedBase","UserActionsComponent","baseActivatorComponent","actionHandlers","actionHandler","handleFinishTurn","playerChoice","handleBuild","handleDeclareWar","handleActivate","handleSpy","notYetImplemented","isSelectingLocation","isMakingStrategicChoice","isMakingTacticalChoice","isBuilding","tacticalChoice","isWaitingForMyTurn","isActivating","handlePlayerMapClick","registerMapListener","forUserComponent","setInitialState","getMoveChoiceLabels","c","getChoiceButtonMarkup","forChoice","BuildManifestComponent_BuildManifestComponent","getTotalBasesAllowedToBuild","BaseActivatorComponent_BaseActivatorComponent","ah","err","msg","declareWar","GameLogComponent","nextUIKeyVal","queuedMessages","oldMessages","currentMessage","ignoreChangeLabels","shift","igcl","onTickerCompleted","MapItemComponent","mapItem","GetMapLocationSingleCharacterCode","nuclearDamageIndicator","MapSummaryComponent","summarizedMap","mapToSummarize","dist_default","format","duration","MapItemHoverComponent","handleMapLocationHover","hoverMapLocation","registerHoverListener","hoverListener","MapComponent","notifyMapLocationHoveredOver","MapSummaryComponent_MapSummaryComponent","countryMap","row","cell","onMouseOver","playerMapClickListener","onDrop","preventDefault","handleDrop","dropEvent","onDragLeave","handleLocationDragEvent","doLoc","eventType","onDragOver","MapItemComponent_MapItemComponent","MapItemHoverComponent_MapItemHoverComponent","handleLocationTargeted","handleBaseActivated","nukedLocation","handleLocationNuked","handleLocationDetargeted","detargetedLocation","event","getData","dropType","handleBuildDrop","handleTargetDrop","notifyDragResultCallack","parseInt","canPlaceItemAtMapLocation","itemToCheck","newBase","GameComponent","_getPrototypeOf2","_len","arguments","_key","userActionsComponent","startGame","gameEntity","index_es","container","alignContent","item","xs","GameHeaderComponent_GameHeaderComponent","MapComponent_MapComponent","UserActionsComponent_UserActionsComponent","mapClickListener","GameLogComponent_GameLogComponent","App","justify","Game_GameComponent","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGsBA,EAgBlB,SAAAA,EAAYC,GAA2BC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACnCI,KAAKC,QAAUJ,EAAKI,QACpBD,KAAKE,yBAA2B,GAChCF,KAAKG,8BAAgC,ICtBhCC,EAAb,SAAAA,IAAAN,OAAAC,EAAA,EAAAD,CAAAE,KAAAI,IAAaA,EAEcC,kCAAoC,6BAFlDD,EAGcE,mCAAqC,0BAHnDF,EAKcG,qBAAuB,EALrCH,EAMcI,qBAAuB,EANrCJ,EAOcK,oBAAsB,EAPpCL,EAQcM,oBAAsB,EARpCN,EAUcO,UAAY,EAV1BP,EAWcQ,UAAY,EAX1BR,EAacS,iBAAmB,EAbjCT,EAccU,iBAAmB,EAdjCV,EAgBcW,WAAa,QAhB3BX,EAiBcY,oBAAsB,SAjBpCZ,EAoBca,gCAAkC,GApBhDb,EAqBcc,iCAAmC,GArBjDd,EAsBce,gCAAkC,IAtBhDf,EAwBcgB,gCAAkC,GAxBhDhB,EAyBciB,2BAA6B,KAzB3CjB,EA4BckB,SAAW,WA5BzBlB,EA6BcmB,SAAW,WA7BzBnB,EA8BcoB,cAAgB,gBA9B9BpB,EAiCcqB,eAAiB,OAjC/BrB,EAkCcsB,eAAiB,OAlC/BtB,EAmCcuB,kBAAoB,UAnClCvB,EAoCcwB,cAAgB,MApC9BxB,EAqCcyB,cAAgB,MCpCpC,IAAMC,EAAb,oBAAAA,IAAAhC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,GAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAgC,EAAA,OAAAE,IAAA,YAAAC,MAAA,SAE4BpC,GAIpB,OAAOqC,KAAKC,MAAMD,KAAKE,SAAWvC,EAAKwC,kBAN/C,CAAAL,IAAA,sBAAAC,MAAA,SAUsCpC,GAE9B,IAAMA,EAAKyC,YAAa,KAAM,yEAC9B,GAAgC,IAA5BzC,EAAKyC,YAAYC,OAAc,KAAM,6DAGzC,OAAQ1C,EAAKyC,YAAYtC,KAAKwC,UAAU,CAACH,eAAgBxC,EAAKyC,YAAYC,cAhBlFT,EAAA,GCsBaW,EAAb,oBAAAA,IAAA3C,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,GAAA,OAAA3C,OAAAiC,EAAA,EAAAjC,CAAA2C,EAAA,OAAAT,IAAA,4BAAAC,MAAA,SAI4CpC,GAEpC,OAAIA,EAAK6C,WAAWC,UACqC,UAA9C9C,EAAK6C,WAAWC,SAASC,mBAP5C,CAAAZ,IAAA,yBAAAC,MAAA,WAcQ,IAAMY,EAAOf,EAAIU,UAAU,CAACH,eAAgB,KAC5C,OAAIQ,EAAO,GAAW,EAClBA,EAAO,GAAW,EACf,IAjBf,CAAAb,IAAA,8BAAAC,MAAA,SAoB8CpC,GAEtC,MAAoC,UAAhCA,EAAKiD,uBAA2C,EAChB,QAAhCjD,EAAKiD,uBAAyC,EAE3C,IAzBf,CAAAd,IAAA,mCAAAC,MAAA,SA4BmDpC,GAE3C,IAAMkD,EAA+B,CAAC3C,EAAUa,gCAAiCb,EAAUc,iCAAkCd,EAAUe,iCAGvI,OAFkBtB,EAAKmD,cAAcL,SAAW9C,EAAKmD,cAAcL,SAASM,WAAaF,EAAmBlD,EAAKmD,cAAcE,eAAgB,GAAK,IA/B5J,CAAAlB,IAAA,kBAAAC,MAAA,WAsCQ,IAAMkB,EAAoD,CAAC,QAAS,MAAO,cAAe,QACpFC,EAA6C,CAAC,WAAY,gBAAiB,aAC3EC,EAAgD,CAAC,OAAQ,OAAQ,MAAO,UAAW,QAAS,OAC5FC,EAAiDD,EAAuBE,OAAO,OAC/EC,EAAgD,CAAC,iBAEjDC,EAAOC,EAAKC,cAEZC,EAAkCH,EAAKI,SAAW,KAAOP,EAA0BD,EAgBzF,OAFeI,EAAKK,YAXhB,CACIC,iBAAkBZ,EAClBa,gBAAiBJ,GAIrB,CACIG,iBAAkBX,EAClBY,gBAAiBR,KAzDjC,CAAAxB,IAAA,oBAAAC,MAAA,SAkEoCpC,GAQ5B,MANoC,CAChCoE,YAAapE,EAAKqE,iBAAiBhB,eAAiB,EAAIrD,EAAKqE,iBAAiBhB,gBAAkB,EAAI,EACpGiB,iBAAkBnE,KAAKoE,iCAAiC,CAACpB,cAAenD,EAAKqE,mBAC7EG,kBAAmBxE,EAAKyE,gBAvEpC7B,EAAA,GAAaA,EAEc8B,cAAgB,iBCpB9BC,EAYT,SAAAA,EAAY3E,GAA2CC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwE,GAEnDxE,KAAKyE,SAAW,KAChBzE,KAAK0E,6BAA+B,EACpC1E,KAAK2E,aAAc,EACnB3E,KAAK4E,KAAOJ,EAASK,iBACrB7E,KAAK8E,OAASjF,EAAKkF,WACnB/E,KAAKgF,gBAAiB,EAEmB,YAArCnF,EAAKkF,WAAWnC,iBAChB5C,KAAKiF,aAAe,OAEsB,SAArCpF,EAAKkF,WAAWnC,iBACrB5C,KAAKiF,aAAe,oBAGpBjF,KAAKiF,aAAe,UA5BnBT,EAMKK,eAAyB,ECapC,IAAeK,EAAtB,WAmBI,SAAAA,EAAYrF,GAAqDC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,GAAAlF,KAhB1DmF,KAAe,GAgB0CnF,KAbzDiD,WAAqBnB,EAAIU,UAAU,CAACH,eAAgB,MAAU,IAaLrC,KAZzDoF,cAAwB,EAa3BpF,KAAKqF,mBAAoB,EACzBrF,KAAKsF,cAAgBzF,EAAK6C,WAC1B1C,KAAKuF,UAAY1F,EAAK0F,UAtB9B,OAAAzF,OAAAiC,EAAA,EAAAjC,CAAAoF,EAAA,EAAAlD,IAAA,WAAAC,MAAA,WAgBQjC,KAAKqF,mBAAoB,MAhBjCH,EAAA,GCpBaM,EAAb,SAAAC,GAOI,SAAAD,EAAY3F,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAwF,IAC5DE,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA0F,GAAAK,KAAA7F,KAAMH,KANM+C,iBAA2C,MAQvD8C,EAAKI,cAAgB,EACrBJ,EAAKK,YAAa,EAClBL,EAAKL,mBAAoB,EALmCK,EAPpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA0F,EAAAC,GAAAD,EAAA,CAA6BN,GCFhBe,EAAb,oBAAAA,IAAAnG,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,GAAA,OAAAnG,OAAAiC,EAAA,EAAAjC,CAAAmG,EAAA,OAAAjE,IAAA,mBAAAC,MAAA,WAwCQ,IAAMiE,EAAeC,EAAUC,uBAAuB,CAACC,aAAcrG,KAAKsG,0BAE1E,OADAtG,KAAKsG,wBAA0BJ,EAAaK,cACrCL,EAAaM,aA1C5BP,EAAA,GAAaA,EAEMK,wBAAoC,CAC/C,QACA,UACA,eACA,UACA,WACA,OACA,SACA,WACA,UACA,QACA,OACA,YACA,UACA,UACA,OACA,QACA,WACA,UACA,YACA,QACA,aACA,WACA,WACA,WACA,SACA,QACA,SACA,QACA,OACA,OACA,QACA,aACA,WC7BD,IAAMG,EAAb,SAAAhB,GAMI,SAAAgB,EAAY5G,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAyG,IAC5Df,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA2G,GAAAZ,KAAA7F,KAAMH,KALM+C,iBAA2C,QAOvD8C,EAAKgB,gBAAkB,WAEvBhB,EAAKP,KAAOc,EAAeU,mBAC3BC,QAAQC,IAAI,6CAA8CnB,EAAKP,MANHO,EANpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA2G,EAAAhB,GAAA3F,OAAAiC,EAAA,EAAAjC,CAAA2G,EAAA,EAAAzE,IAAA,qBAAAC,MAAA,SAe8BpC,GACtBG,KAAK0G,gBAAkB7G,EAAKiH,SAhBpCL,EAAA,CAA+BvB,GCFlB6B,EAAb,SAAAtB,GAOI,SAAAsB,EAAYlH,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA+G,IAC5DrB,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAiH,GAAAlB,KAAA7F,KAAMH,KANM+C,iBAA2C,UAKK8C,EAJhEsB,OAAkB,EAOdtB,EAAKuB,SAAW,GAEhBvB,EAAKL,mBAAoB,EALmCK,EAPpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAiH,EAAAtB,GAAA3F,OAAAiC,EAAA,EAAAjC,CAAAiH,EAAA,EAAA/E,IAAA,wBAAAC,MAAA,WAgBQ,OAASjC,KAAKiH,SAASC,KAAK,SAAAC,GAAC,OAAmB,OAAfA,EAAE1C,aAhB3C,CAAAzC,IAAA,WAAAC,MAAA,WAoBQkE,EAAUiB,oBAAoB,CAACC,QAASrH,WApBhD+G,EAAA,CAAiC7B,GCEpBoC,EAAb,SAAA7B,GASI,SAAA6B,EAAYzH,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IAC5D5B,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAwH,GAAAzB,KAAA7F,KAAMH,KARM+C,iBAA2C,MAUvD8C,EAAKuB,SAAW,GAChBvB,EAAK6B,cAAgB,EACrB7B,EAAK8B,UAAW,EAL4C9B,EATpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAwH,EAAA7B,GAAA3F,OAAAiC,EAAA,EAAAjC,CAAAwH,EAAA,EAAAtF,IAAA,WAAAC,MAAA,WAmBQ2E,QAAQC,IAAR,mCAEAV,EAAUsB,gBAAgB,CAACJ,QAASrH,SArB5C,CAAAgC,IAAA,wBAAAC,MAAA,WAgCQ,OAASjC,KAAKiH,SAASC,KAAK,SAAAQ,GAAC,OAAmB,OAAfA,EAAEjD,eAhC3C6C,EAAA,CAA6BpC,GCJhByC,EAAb,SAAAlC,GAKI,SAAAkC,EAAY9H,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA2H,IAE5DjC,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA6H,GAAA9B,KAAA7F,KAAMH,KALM+C,iBAA2C,OAOvD8C,EAAKL,mBAAoB,EACzBK,EAAKkC,YAAa,EAL0ClC,EALpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA6H,EAAAlC,GAAAkC,EAAA,CAA8BzC,GCGjB2C,EAAb,SAAApC,GAMI,SAAAoC,EAAYhI,GAAoD,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA6H,IAC5DnC,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA+H,GAAAhC,KAAA7F,KAAMH,KALM+C,iBAA2C,OAMvD8C,EAAKL,mBAAoB,EACzBK,EAAKuB,SAAW,GAH4CvB,EANpE,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA+H,EAAApC,GAAA3F,OAAAiC,EAAA,EAAAjC,CAAA+H,EAAA,EAAA7F,IAAA,wBAAAC,MAAA,WAaQ,OAASjC,KAAKiH,SAASC,KAAK,SAAAC,GAAC,OAAmB,OAAfA,EAAE1C,aAb3C,CAAAzC,IAAA,WAAAC,MAAA,WAiBQkE,EAAU2B,iBAAiB,CAACT,QAASrH,WAjB7C6H,EAAA,CAA8B3C,GCOjB6C,EAAb,WAQI,SAAAA,IAAejI,OAAAC,EAAA,EAAAD,CAAAE,KAAA+H,GAAA/H,KAJEgI,IAAM,wBAIThI,KAFNiI,WAAqB,EANjC,OAAAnI,OAAAiC,EAAA,EAAAjC,CAAAiI,EAAA,EAAA/F,IAAA,gBAAAC,MAAA,SA0ByBpC,GAEjB+G,QAAQC,IAAR,0DAAuE,CAAChH,KAAMA,IAE9E,IAAM4D,EAAOC,EAAKC,cAEZuE,EAAoB,CAACxF,WAAY7C,EAAK6C,WAAY6C,UAAW9B,EAAKI,UAExE,OAAOhE,EAAKsI,UAER,IAAK,MAGD,OAFgB,IAAI3C,EAAQ0C,GAIhC,IAAK,QAGD,OAFgB,IAAIzB,EAAUyB,GAIlC,IAAK,OAGD,OAFgB,IAAIL,EAASK,GAIjC,IAAK,UAGD,OAFgB,IAAInB,EAAYmB,GAIpC,IAAK,MAGD,OAFgB,IAAIZ,EAAQY,GAIhC,IAAK,OAGD,OAFgB,IAAIP,EAASO,OA9D7C,EAAAlG,IAAA,cAAAC,MAAA,WAkBQ,OAJKjC,KAAKoI,WACNpI,KAAKoI,SAAW,IAAIL,GAGjB/H,KAAKoI,aAlBpBL,EAAA,GCgBaM,EAAb,oBAAAA,IAAAvI,OAAAC,EAAA,EAAAD,CAAAE,KAAAqI,GAAA,OAAAvI,OAAAiC,EAAA,EAAAjC,CAAAuI,EAAA,OAAArG,IAAA,oCAAAC,MAAA,SAqBoDpC,GAE5C,GAAqC,OAAjCA,EAAKyI,eAAe3F,SACpB,MAAO,QAGX,OAAQ9C,EAAKyI,eAAe3F,SAASC,kBACjC,IAAK,MAAO,MAAO,IACnB,IAAK,MAAO,MAAO,IACnB,IAAK,OAAQ,MAAO,IACpB,IAAK,OAAQ,MAAO,OACpB,IAAK,UAAW,MAAO,IACvB,IAAK,OAAQ,MAAO,IACpB,IAAK,QAAS,MAAO,IACrB,IAAK,QAAS,MAAO,SACrB,IAAK,OAAQ,MAAO,IAGxB,MAAO,UAvCf,CAAAZ,IAAA,4BAAAC,MAAA,SAkD+CpC,GAEvC,IAAK,IAAI0I,EAAI,EAAGA,EAAI1I,EAAK2I,IAAIA,IAAIjG,OAAQgG,IACrC,IAAK,IAAIE,EAAI,EAAGA,EAAI5I,EAAK2I,IAAIA,IAAID,GAAGhG,OAAOkG,IACvC5I,EAAK6I,UAAU7I,EAAK2I,IAAIA,IAAID,GAAGE,MAtD/C,CAAAzG,IAAA,mBAAAC,MAAA,SA4DmCpC,GAE3B,IAAM8I,EAAU3I,KAAK4I,cAAc,CAACC,OAAQhJ,EAAKgJ,SAWjD,MAT2B,GAAkCtF,OACzDoF,EAAQG,YACRH,EAAQI,YACRJ,EAAQK,aACRL,EAAQM,gBACRN,EAAQO,aACRP,EAAQQ,iBAtEpB,CAAAnH,IAAA,gBAAAC,MAAA,SA6EgCpC,GAgExB,IAhEsE,IAAA6F,EAAA1F,KAOhEoJ,EAAS,SAACC,GAAD,OADD,SAACA,GAAD,OAAgCA,EAAKpC,SAASqC,OAAO,SAAAC,GAAC,OAAIA,EAAE9E,WAA8B,IAAlB8E,EAAE5E,cACzC6E,CAAMH,GAAM9G,QAErDkH,EAAKpB,EAELqB,EAAuB,SAACC,EAAqBC,GAAtB,OACzBD,EAAOhH,SAEC,CACImG,YAAaW,EAAGI,UAAUF,GAAUC,EAAad,YAAYvF,OAAOoG,EAAOhH,UAAuBiH,EAAad,YAC/GgB,uBAAwBL,EAAGI,UAAUF,GAAUC,EAAaE,wBAA2BH,EAAOhH,SAAqBmD,cAAgB8D,EAAaE,uBAChJX,cAAeM,EAAGM,YAAYJ,GAAUC,EAAaT,cAAc5F,OAAOoG,EAAOhH,UAAyBiH,EAAaT,cACvHa,iCAhBQC,EAgBwCN,EAhBnBtB,EAAQ0B,YAAYE,IAAwD,YAA/CA,EAAItH,SAAuB+D,gBAgB3BkD,EAAaI,iCAAmC,EAAIJ,EAAaI,iCAC3HE,+BAhBM,SAACD,GAAD,OAAsB5B,EAAQ0B,YAAYE,IAAwD,WAA/CA,EAAItH,SAAuB+D,gBAgBpDyD,CAAcR,GAAUC,EAAaM,gCAAkC,EAAIN,EAAaM,+BACxHlB,aAAcS,EAAGW,WAAWT,GAAUC,EAAaZ,aAAazF,OAAOoG,EAAOhH,UAAwBiH,EAAaZ,aACnHD,YAAaU,EAAGY,UAAUV,GAAUC,EAAab,YAAYxF,OAAOoG,EAAOhH,UAAuBiH,EAAab,YAC/GuB,qBAAsBb,EAAGY,UAAUV,GAAUC,EAAaU,sBAAwBlB,EAAOO,EAAOhH,UAAuBiH,EAAaU,qBACpIC,sBAAuBd,EAAGY,UAAUV,GAAUC,EAAaW,uBAA0BZ,EAAOhH,SAAqB4E,cAAgBqC,EAAaW,sBAC9ItB,gBAAiBQ,EAAGe,cAAcb,GAAUC,EAAaX,gBAAgB1F,OAAOoG,EAAOhH,UAA2BiH,EAAaX,gBAC/HwB,iBAAkBhB,EAAGe,cAAcb,GAAUC,EAAaa,kBAAoBrB,EAAOO,EAAOhH,UAA2BiH,EAAaa,iBACpIvB,aAAcO,EAAGiB,WAAWf,GAAUC,EAAaV,aAAa3F,OAAOoG,EAAOhH,UAAwBiH,EAAaV,aACnHyB,uBAAwBlB,EAAGiB,WAAWf,GAAUC,EAAae,wBAA0BvB,EAAOO,EAAOhH,UAAwBiH,EAAae,uBAC1IC,qBAAsBjB,EAAOkB,WAAajB,EAAagB,qBAAqBrH,OAAOoG,GAAUC,EAAagB,qBAC1GE,gBAAiBlB,EAAakB,iBAAmBnB,EAAOhH,SAASM,YAGvE2G,EA9Ba,IAACK,GAwDlBc,EAAQlL,EAAKgJ,OAAOL,IAAIwC,OAC1B,SAACC,EAAgBC,GAAjB,OArBqBC,EAqB8BF,EArBVG,EAqBwCF,EAvB7EF,OAAO,SAACK,EAAMC,GAAP,OAAgB5B,EAAqB4B,EAAMD,IAAO3F,EAAK6F,gBAGlE,CACIzC,YAAaqC,EAAGrC,YAAYvF,OAAO6H,EAAGtC,aACtCgB,uBAAwBqB,EAAGrB,uBAAyBsB,EAAGtB,uBACvDX,cAAegC,EAAGhC,cAAc5F,OAAO6H,EAAGjC,eAC1CJ,YAAaoC,EAAGpC,YAAYxF,OAAO6H,EAAGrC,aACtCC,aAAcmC,EAAGnC,aAAazF,OAAO6H,EAAGpC,cACxCC,gBAAiBkC,EAAGlC,gBAAgB1F,OAAO6H,EAAGnC,iBAC9CC,aAAciC,EAAGjC,aAAa3F,OAAO6H,EAAGlC,cACxC0B,qBAAsBO,EAAGP,qBAAqBrH,OAAO6H,EAAGR,sBACxDH,iBAAkBU,EAAGV,iBAAmBW,EAAGX,iBAC3CE,uBAAwBQ,EAAGR,uBAAyBS,EAAGT,uBACvDX,gCAAiCmB,EAAGnB,gCAAkCoB,EAAGpB,gCACzEE,+BAAgCiB,EAAGjB,+BAAiCkB,EAAGlB,+BACvEI,qBAAsBa,EAAGb,qBAAuBc,EAAGd,qBACnDC,sBAAuBY,EAAGZ,sBAAwBa,EAAGb,sBACrDO,gBAAiBK,EAAGL,gBAAkBM,EAAGN,iBAhBzB,IAACK,EAAoBC,GAqByDpL,KAAKuL,gBAIvGC,EAAa,EACRjD,EAAI,EAAGA,EAAI1I,EAAKgJ,OAAOL,IAAIjG,OAAQgG,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAI5I,EAAKgJ,OAAOL,IAAID,GAAGhG,OAAQkG,IAAK,KACzC9F,EAAY9C,EAAKgJ,OAAOL,IAAID,GAAGE,GAA/B9F,SACU,OAAbA,IACA6I,GAAe7I,EAASM,YASpC,OAJA8H,EAAMD,gBAAkBU,EAIjBT,IA1Jf,CAAA/I,IAAA,uBAAAC,MAAA,SA6JuCqG,GAC/B,qBAAA/E,OAAsB+E,EAAemD,YA9J7C,CAAAzJ,IAAA,kBAAAC,MAAA,SAiKkCpC,GAE1B,IAAM6L,EAAO7L,EAAK8L,MAAMnD,IAAI,GAAG,GACzBrB,EAAIY,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,UAAWzF,WAAYgJ,IACtFG,EAAOhM,EAAK8L,MAAMnD,IAAI,GAAG,GACzBsD,EAAI/D,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,QAASzF,WAAYmJ,IACpFE,EAAQlM,EAAK8L,MAAMnD,IAAI,GAAG,GAC1BwD,EAAKjE,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,QAASzF,WAAYqJ,IACrFE,EAAOpM,EAAK8L,MAAMnD,IAAI,GAAG,GACzBd,EAAIK,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,MAAOzF,WAAYuJ,IAClFC,EAAOrM,EAAK8L,MAAMnD,IAAI,GAAG,GACzB2D,EAAIpE,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,OAAQzF,WAAYwJ,IACnFE,EAAOvM,EAAK8L,MAAMnD,IAAI,GAAG,GACzB6D,EAAItE,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,OAAQzF,WAAY0J,IACnFE,EAASzM,EAAK8L,MAAMnD,IAAI,GAAG,GAC3B+D,EAAMxE,EAAoBpE,cAAciI,cAAc,CAACzD,SAAU,MAAOzF,WAAY4J,IAEtFnF,GAAIuE,EAAKc,UAAU,CAACC,YAAatF,IACjC2E,GAAID,EAAKW,UAAU,CAACC,YAAaX,IACjCE,GAAKD,EAAMS,UAAU,CAACC,YAAaT,IACnCtE,GAAIuE,EAAKO,UAAU,CAACC,YAAa/E,IACjCyE,GAAID,EAAKM,UAAU,CAACC,YAAaN,IACjCE,GAAID,EAAKI,UAAU,CAACC,YAAaJ,IACjCE,GAAMD,EAAOE,UAAU,CAACC,YAAaF,QAxLjDlE,EAAA,GAAaA,EAEckD,eAAiC,CACpDzC,YAAa,GACbK,cAAe,GACfJ,YAAa,GACbC,aAAc,GACdE,aAAc,GACdD,gBAAiB,GACjB2B,qBAAsB,GACtBd,uBAAwB,EACxBW,iBAAkB,EAClBE,uBAAwB,EACxBX,gCAAiC,EACjCE,+BAAgC,EAChCI,qBAAsB,EACtBC,sBAAuB,EACvBO,gBAAiB,GAjBZzC,EA0CKqE,KAAO,SAACC,EAAgBC,GAAjB,OAAmDD,EAAEhK,UAAYgK,EAAEhK,SAASC,mBAAqBgK,GA1C7GvE,EA2CKgC,UAAY,SAACsC,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,QA3CrDtE,EA4CK+B,WAAa,SAACuC,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,SA5CtDtE,EA6CKmC,cAAgB,SAACmC,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,YA7CzDtE,EA8CKqC,WAAa,SAACiC,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,SA9CtDtE,EA+CK0B,YAAc,SAAC4C,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,UA/CvDtE,EAgDKwB,UAAY,SAAC8C,GAAD,OAAoBtE,EAAQqE,KAAKC,EAAG,QCjC3D,IAAMxG,EAAb,oBAAAA,IAAArG,OAAAC,EAAA,EAAAD,CAAAE,KAAAmG,GAAA,OAAArG,OAAAiC,EAAA,EAAAjC,CAAAqG,EAAA,OAAAnE,IAAA,2BAAAC,MAAA,SAI2CpC,GACnCG,KAAK6M,kBAAoB7M,KAAK6M,kBAAkBtJ,OAAO1D,EAAKiN,WALpE,CAAA9K,IAAA,wBAAAC,MAAA,SAQyCpC,GAIjCG,KAAK6M,kBAAkBE,QAAQ,SAAAC,GAAG,OAAIA,EAAIC,sBAAsB,CAAEC,QAASrN,EAAKqN,cAZxF,CAAAlL,IAAA,mBAAAC,MAAA,WAiBQ,IAAMwB,EAAOC,EAAKC,cAElB3D,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,+BAErD3J,EAAK4J,cAAgB5J,EAAK6J,eAE1B7J,EAAK6J,eAAeC,WAEpB9J,EAAK4J,cAAgB5J,EAAK+J,cAzBlC,CAAAxL,IAAA,kBAAAC,MAAA,SA6BkCpC,GAA4B,IAE9CwH,EAAYxH,EAAZwH,QAERA,EAAQvB,cAAgBhE,EAAIU,UAAU,CAAEH,eAAgB,IAAO,EAC/DgF,EAAQtB,YAAa,EACrBsB,EAAQhC,mBAAoB,EAE5BrF,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,iBAAkBK,YAAapG,OArC5F,CAAArF,IAAA,wBAAAC,MAAA,SA2CwCpC,GAAoG,IAE7H6N,EAAqB7N,EAArB6N,kBAEP7N,EAAK8N,cAAc9C,YAAa,EAEhC6C,EAAkBjJ,SAAW5E,EAAK8N,cAClCD,EAAkBhJ,6BAA+BjC,EAAUmL,yBAC3DhH,QAAQC,IAAR,6DAAAtD,OAAyEmK,EAAkBhJ,6BAA3F,aAEA7E,EAAKgO,gBAAgB3N,yBAA2BL,EAAKgO,gBAAgB3N,yBAAyBqD,OAAO1D,EAAK6N,mBAE1G1N,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,wBAAyBU,gBAAiBjO,EAAK8N,mBAvD5G,CAAA3L,IAAA,sBAAAC,MAAA,SA0DsCpC,GAAgC,IAEvDwH,EAAWxH,EAAXwH,QAEPA,EAAQhC,mBAAoB,EAE5BrF,KAAKmN,sBAAsB,CAAED,QAAS,CAAEO,YAAa5N,EAAKwH,QAAS+F,YAAa,oBAEhF,IAAMW,EAAajM,EAAIU,UAAU,CAAEH,eAAgBjC,EAAUQ,UAAY,IAAOR,EAAUO,UAE1F0G,EAAQJ,SAAW,GAEnB,IAAK,IAAIsB,EAAI,EAAGA,EAAIwF,EAAYxF,IAC5BlB,EAAQJ,SAAWI,EAAQJ,SAAS1D,OAAO,IAAIiB,EAAS,CAAEO,WAAYsC,OAvElF,CAAArF,IAAA,kBAAAC,MAAA,SA4EkCpC,GAE1B+G,QAAQC,IAAR,wCAAqDhH,GAErDA,EAAKwH,QAAQhC,mBAAoB,EAEjCrF,KAAKmN,sBAAsB,CAAED,QAAS,CAAEO,YAAa5N,EAAKwH,QAAS+F,YAAa,oBAEhF,IAAM7F,EAAgBnH,EAAUI,qBAAuBsB,EAAIU,UAAU,CAAEH,eAAgBjC,EAAUI,qBAAuB,IACxHX,EAAKwH,QAAQE,cAAgBA,EAI7B,IAFA,IAAMyG,EAAelM,EAAIU,UAAU,CAAEH,eAAgBjC,EAAUQ,UAAY,IAAOR,EAAUO,UAEnF4H,EAAI,EAAGA,EAAIyF,EAAczF,IAC9B1I,EAAKwH,QAAQJ,SAAWpH,EAAKwH,QAAQJ,SAAS1D,OAAO,IAAIiB,EAAS,CAAEO,WAAYlF,EAAKwH,aA1FjG,CAAArF,IAAA,mBAAAC,MAAA,SA8FmCpC,GAE3BA,EAAKwH,QAAQhC,mBAAoB,EAEjCrF,KAAKmN,sBAAsB,CAAED,QAAS,CAAEO,YAAa5N,EAAKwH,QAAS+F,YAAa,oBAIhF,IAFA,IAAMtH,EAAgBhE,EAAIU,UAAU,CAAEH,eAAgBjC,EAAUS,iBAAmB,IAAOT,EAAUU,iBAE3FyH,EAAI,EAAGA,EAAIzC,EAAeyC,IAC/B1I,EAAKwH,QAAQJ,SAAWpH,EAAKwH,QAAQJ,SAAS1D,OAAO,IAAIiB,EAAS,CAAEO,WAAYlF,EAAKwH,aAvGjG,CAAArF,IAAA,mBAAAC,MAAA,SA2GmCpC,GAE3BG,KAAKmN,sBAAsB,CAAED,QAAS,CAAEO,YAAa5N,EAAKwH,QAAS+F,YAAa,oBAEhFvN,EAAKwH,QAAQO,YAAa,IA/GlC,CAAA5F,IAAA,oBAAAC,MAAA,SAqHoCpC,GAE5BG,KAAKmN,sBAAsB,CAAED,QAAS,CAAEO,YAAa5N,EAAKwH,QAAS+F,YAAa,sBAvHxF,CAAApL,IAAA,aAAAC,MAAA,WA6HQ,IAAIgM,GAAsB,EAG1BC,YAAY,WAER,GAAID,OAGC,CAIDA,GAAa,EAEbE,WAAW,WAEPhI,EAAUiI,aACVH,GAAa,GAPD,OATN,OA9H1B,CAAAjM,IAAA,aAAAC,MAAA,WAwJQjC,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,UAEjD1J,EAAKC,cAAc0K,YACnBrO,KAAKsO,wBACL5K,EAAKC,cAAc2J,eAAeC,cA5J9C,CAAAvL,IAAA,wBAAAC,MAAA,WAiK2C,IAAAyD,EAAA1F,KAE7BuO,EAAgB,SAAC1O,GAEnB+G,QAAQC,IAAR,0CAEA,IAAM2H,EAAe,SAAC3O,GAIlB,GAFA+G,QAAQC,IAAR,iEAA8E,CAACwC,KAAMxJ,EAAK4O,YAEpF5O,EAAK4O,SAAY,MAAO,SAC9B,GAAI5O,EAAK4O,SAAS3I,cAAgB,EAAK,MAAO,SAE9C,IAAM4I,EAAuB5M,EAAIU,UAAU,CAAEH,eAAgB,MAAS,GAOtE,OALAuE,QAAQC,IAAR,6DAA0E6H,GAG1E7O,EAAK4O,SAAS3I,gBAEV4I,GAEA9H,QAAQC,IAAR,wEAEAhH,EAAK8O,gBAAgBhK,aAAc,EACnC9E,EAAK8O,gBAAgB3J,gBAAiB,EAC/B,aAGA,UAIX4J,EAAe,EAEbC,EAAoBhP,EAAKiP,gBAAgBtG,IAAIuG,iBAGnD,OAAIF,EAAkBtM,OAAS,GAC3BqE,QAAQC,IAAR,yEACO,UAKM,cADA2H,EAAa,CAAEG,gBAAiB9O,EAAK8O,gBAAiBF,SAAUI,EAAkBD,KAC5D,YAEG,SAAtC/O,EAAK8O,gBAAgB1J,cAAiE,sBAAtCpF,EAAK8O,gBAAgB1J,aAC9D,UAIX2J,GAAgB,EACZC,EAAkB,GAAG/I,cAAgB,IAAK8I,EAAe,GACzDC,EAAkB,GAAG/I,cAAgB,GAAK+I,EAAkBtM,OAAS,IAAKqM,EAAe,GAI3E,cAFAJ,EAAa,CAAEG,gBAAiB9O,EAAK8O,gBAAiBF,SAAUI,EAAkBD,KAGzF,aAGXhI,QAAQC,IAAR,mEAEO,YA2ELmI,EAAY,SAACnP,GAEf+G,QAAQC,IAAR,oDAAiE,CAAEhH,KAAMA,IAGzE,IAAMwE,EAhBmB,SAACxE,GAQ1B,OAP0BA,EAAKgO,gBAAgB1N,8BAA8BmJ,OAAO,SAAC2F,GACjF,OAAoB,OAAhBA,EAAGxK,WACHwK,EAAGtK,eACHsK,EAAGvK,6BAA+B,IAC9BuK,EAAGxK,SAASgH,WAAa5L,EAAKqP,oBAAoBzD,WAC3D,GAUuB0D,CAAqB,CAACtB,gBAAiBhO,EAAKgO,gBAAiBqB,oBAAqBrP,EAAKqP,sBAKjH,GAHAtI,QAAQC,IAAR,oDAAiE,CAC7DuI,uBAAwB/K,EAAmBgL,MAAOhL,EAAoBA,EAAkBK,6BAA+B,OAEvHL,EAAmB,CAEnBA,EAAkBM,aAAc,EAEhC,IAAM2K,EAA4BjH,EAAQO,cAAc,CAAEC,OAAQhJ,EAAKiP,gBAAgBtG,MAOvF,GALA5B,QAAQC,IAAR,gEAA6E,CACzExC,kBAAmBA,EACnBiL,0BAA2BA,IAGQ,SAAnCjL,EAAkBY,cAElB,GAAyB,WA9Ff,SAACpF,GAInB,MAA0B,cAFA0O,EAAc,CAACO,gBAAiBjP,EAAKiP,gBAAiBH,gBAAiB9O,EAAKwE,qBAGlGuC,QAAQC,IAAR,yFACI,CACIiI,gBAAiBjP,EAAKiP,gBACtB5K,iBAAkBrE,EAAKqP,sBAG/BxJ,EAAKyH,sBAAsB,CAAED,QAAS,CAAEE,YAAa,mBAAoBU,gBAAiBjO,EAAKqP,uBAExF,WAGXtI,QAAQC,IAAR,sEACO,aA4E0B0I,CAAc,CAAClL,kBAAmBA,EAAmByK,gBAAiBjP,EAAKiP,gBAAiBI,oBAAqBrP,EAAKqP,sBAC5G,MAAO,cAEzC,GAAuC,WAAnC7K,EAAkBY,aAA2B,CAElD,GAA2B,WA9Ef,SAACpF,GAIrB,MAA0B,cAFA0O,EAAc,CAACO,gBAAiBjP,EAAKiP,gBAAiBH,gBAAiB9O,EAAKwE,qBAGlGuC,QAAQC,IAAR,6FACI,CACIiI,gBAAiBjP,EAAKiP,gBACtB5K,iBAAkBrE,EAAKqP,sBAG/BxJ,EAAKyH,sBAAsB,CAAED,QAAS,CAAEE,YAAa,8BAA+BU,gBAAiBjO,EAAKqP,uBAEnG,WAGXtI,QAAQC,IAAR,2EACO,aA4D4B2I,CAAgB,CAACnL,kBAAmBA,EAAmByK,gBAAiBjP,EAAKiP,gBAAiBI,oBAAqBrP,EAAKqP,sBAC9G,MAAO,aAE3C,IAAuC,sBAAnC7K,EAAkBY,aAMvB,OADA2B,QAAQ6I,MAAR,8EAA6FpL,GACtF,SAJP,GAA+B,WA9DhB,SAACxE,GAIxB,MAA0B,cAFA0O,EAAc,CAACO,gBAAiBjP,EAAKiP,gBAAiBH,gBAAiB9O,EAAKwE,qBAGlGuC,QAAQC,IAAR,2GACI,CACIiI,gBAAiBjP,EAAKiP,gBACtB5K,iBAAkBrE,EAAKqP,sBAG/BxJ,EAAKyH,sBAAsB,CAAED,QAAS,CAAEE,YAAa,qCAAsCU,gBAAiBjO,EAAKqP,uBAE1G,WAGXtI,QAAQC,IAAR,2EACO,aA4CgC6I,CAAmB,CAACrL,kBAAmBA,EAAmByK,gBAAiBjP,EAAKiP,gBAAiBI,oBAAqBrP,EAAKqP,sBACjH,MAAO,SAapD,OANmBzM,EAAUkN,kBACzB,CACIrL,WAAYD,EACZH,iBAAkBrE,EAAKqP,sBAO/B,OADAtI,QAAQ6I,MAAR,8EACO,UAITG,EAA0C,SAAC/P,GAC7C,OAAOA,EAAKgQ,EAAE3P,yBAA2BL,EAAKgQ,EAAE3P,yBAC3CsI,IAAK,SAAAyG,GAAE,OAAIA,EAAGvK,6BAA+B,EAAIuK,EAAtCnP,OAAAgQ,EAAA,EAAAhQ,CAAA,GAA+CmP,EAA/C,CAAmDvK,6BAA8BuK,EAAGvK,6BAA8B,OAGhIqL,EAA8B,SAAClQ,GACjC,OACIA,EAAKmQ,UAAU7P,8BAA8B+G,KACzC,SAAAqC,GAAC,OACGA,EAAE7E,6BAA+B,IACf,IAAlB6E,EAAE5E,cACmB,IAArB4E,EAAEvE,kBAKZiL,EAAyB,SAACpQ,GAE5B,IAAMqQ,EAAerQ,EAAKiP,gBAAgBtG,IAEpC2H,EAAuB9H,EAAQO,cAAc,CAAEC,OAAQqH,IAAgBtF,qBAEvEwF,EACFD,EAAqB7G,OACjB,SAAA+G,GAAiB,OAAIxQ,EAAKgO,gBAAgB1N,8BAA8BmJ,OACpE,SAAAgH,GAAK,OACqB,IAAtBA,EAAM3L,cACmB,IAAzB2L,EAAMtL,gBACNsL,EAAM7L,UACN6L,EAAM7L,SAASgH,WAAa4E,EAAkB5E,WACpDlJ,OAAS,IAGnBqE,QAAQC,IAAR,8EAA2F,CAACsJ,qBAAsBA,EAAsBC,iCAExI,IAAK,IAAI7H,EAAI,EAAGA,EAAI6H,EAA6B7N,OAAQgG,IAAK,KAElD5F,EAAayN,EAA6B7H,GAA1C5F,SAEF4N,EAAmBH,EAA6B7H,GAEtD,GAAK5F,EAAL,CAEA,IAAM6N,EAASxB,EAAU,CAAEnB,gBAAiBhO,EAAKgO,gBAAiBiB,gBAAiBjP,EAAKiP,gBAAiBI,oBAAqBqB,IAE/G,WAAXC,EACA9K,EAAKyH,sBAAsB,CAAED,QAAS,CAAEE,YAAa,mBAAoBU,gBAAiByC,KAG1FE,EAAe,CAACC,SAAUN,EAA6B7H,GAAIoI,OAAQH,OAMzEC,EAAiB,SAAC5Q,GAMpB,GAJAA,EAAK6Q,SAASxN,eAAiBrD,EAAK8Q,OAAO1M,YACvCpE,EAAK6Q,SAAS/N,WAAW9C,EAAK6Q,SAAS/N,SAASM,YAAcpD,EAAK8Q,OAAOxM,kBAC9EtE,EAAK6Q,SAASE,MAAMC,aAAaC,kBAAoBjR,EAAK8Q,OAAOxM,iBAE7DtE,EAAK6Q,SAASK,iBAAkB,CAChC,IAAMC,EAAenR,EAAK6Q,SAAS/N,SACnCqO,EAAa5L,aAAe4L,EAAa5L,cAAgBtD,EAAIU,UAAU,CAACH,eAAgB,MAAQ,GAChG2O,EAAa3L,kBAAoB2L,EAAa3L,mBAAsB2L,EAAa3L,oBAAuB2L,EAAa5L,aAGzHM,EAAKyH,sBAAsB,CAAED,QAAS,CAAEE,YAAa,iBAAkBU,gBAAiBjO,EAAK6Q,aAI3FO,EAAiB,SAACC,GAAD,OAA6BA,EAAYlM,iBAAoBkM,EAAYvM,aAEhGiC,QAAQC,IAAR,+CAEA,IAAMpD,EAAOC,EAAKC,cAEZwN,EAAU1N,EAAK4J,cACf+D,EAAU3N,EAAK4J,cAAcpN,QAAUwD,EAAK6J,eAAiB7J,EAAK+J,YAExE2D,EAAQjR,yBAA2B0P,EAAwC,CAACC,EAAGsB,IAC/EC,EAAQlR,yBAA2B0P,EAAwC,CAACC,EAAGuB,IAC/ED,EAAQhR,8BAAgCgR,EAAQjR,yBAAyBoJ,OAAO,SAAA+H,GAAG,OAAIJ,EAAeI,IAAQA,EAAI3M,6BAA+B,IACjJ0M,EAAQjR,8BAAgCiR,EAAQlR,yBAAyBoJ,OAAO,SAAA+H,GAAG,OAAIJ,EAAeI,IAAQA,EAAI3M,6BAA+B,IAE7IqL,EAA4B,CAACC,UAAWmB,KACxCvK,QAAQC,IAAR,8CAAAtD,OAA0D4N,EAAQhM,KAAlE,mCAAyGgM,EAAQhR,+BACjH8P,EAAuB,CAAEpC,gBAAiBsD,EAASrC,gBAAiBsC,KAGpExK,QAAQC,IAAR,8CAAAtD,OAA0D4N,EAAQhM,KAAlE,8CAGA4K,EAA4B,CAACC,UAAWoB,KACxCxK,QAAQC,IAAR,8CAAAtD,OAA0D6N,EAAQjM,KAAlE,mCAAyGiM,EAAQjR,+BACjH8P,EAAuB,CAAEpC,gBAAiBuD,EAAStC,gBAAiBqC,KAGpEvK,QAAQC,IAAR,8CAAAtD,OAA0D6N,EAAQjM,KAAlE,gDAlcZ,CAAAnD,IAAA,aAAAC,MAAA,SAyc6BpC,GAErB+G,QAAQC,IAAR,mDAAgE,CAAEyK,gBAAiBzR,EAAKyR,kBAExFzR,EAAKyR,gBAAgBC,aAAc,EAEnC7N,EAAKC,cAAcG,aAAc,EACjCJ,EAAKC,cAAc0K,WAAY,EAE/BrO,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,oBAld7D,CAAApL,IAAA,kBAAAC,MAAA,WAudQyB,EAAKC,cAAc0J,cAAgB3J,EAAKC,cAAc2J,eACtDtN,KAAKwR,mBACL9N,EAAKC,cAAc0J,cAAgB3J,EAAKC,cAAc6J,cAzd9D,CAAAxL,IAAA,qBAAAC,MAAA,WA6dQyB,EAAKC,cAAc0J,cAAgB3J,EAAKC,cAAc6J,YACtDxN,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,oBA9d7D,CAAApL,IAAA,cAAAC,MAAA,WAmeQ,IAAMwB,EAAOC,EAAKC,cAElBF,EAAKgO,OAEL7K,QAAQC,IAAR,mDAAgE,CAAE4K,KAAMhO,EAAKgO,KAAMC,KAAMjO,EAAKI,WAE9F7D,KAAKmN,sBAAsB,CAAED,QAAS,CAAEE,YAAa,oBAze7D,CAAApL,IAAA,cAAAC,MAAA,SA+e8BpC,GAEtB+G,QAAQC,IAAR,4CAAyDhH,EAAK8R,cAiB9D,IAJA,IAAMC,EAAmBvJ,EAAQuJ,iBAAiB,CAAC/I,OAAQhJ,EAAK8R,aAAanJ,MAEvE/E,EAAOC,EAAKC,cAET4E,EAAI,EAAGA,EAAIqJ,EAAiBrP,OAAQgG,IAAK,CAE9C,IAAMc,EAAOuI,EAAiBrJ,GAE9B3B,QAAQC,IAAR,4CAAyD,CAACwC,KAAMA,IAGhE,IAAMwI,EAAwBxI,EAAK9D,UAAY9C,EAAU8B,cAGnDuN,EAAkC,IAAlBjS,EAAKkS,SAAiB,IAAM,KAK5CC,GAFuBvO,EAAKI,SAAWpB,EAAU8B,eAAiBuN,EAEhCD,EAExCD,EAAiBrJ,GAAGjD,cAAc2M,iBAAmB/P,KAAKgQ,KAAKF,GAInE,IAAMG,EAAc,SAAC9K,GACDvF,EAAIU,UAAU,CAACH,eAAgB,MAAQgF,EAAQ/B,cAAc2M,kBAC9D5K,EAAQ/B,cAAc2M,gBAAiB,MAG1DE,EAAYrQ,EAAIsQ,oBAAoB,CAAC9P,YAAasP,KAE9C/R,EAAKkS,SAAW,GAChBI,EAAYrQ,EAAIsQ,oBAAoB,CAAC9P,YAAasP,OA/hB9D,CAAA5P,IAAA,yBAAAC,MAAA,SAoiByCpC,GAEjC,IAAMwS,EAAkBvQ,EAAIU,UAAU,CAACH,eAAgBxC,EAAKwG,aAAa9D,SAkBzE,OAVwB1C,EAAKwG,aAAa2E,OAAQ,SAACK,EAA4BC,EAAMgH,GAEjF,OAAIA,IAAQD,EAAwB,CAAC9L,cAAe8E,EAAK9E,cAAeC,SAAU8E,GAE3E,CACH/E,cAAe8E,EAAK9E,cAAchD,OAAO+H,GACzC9E,SAAU6E,EAAK7E,WAXvB,CACID,cAAe,GACfC,SAAU,SA3iBtBL,EAAA,GAAaA,EAEM0G,kBAAwC,GCvCpD,IAAe0F,EAMlB,SAAAA,IAAezS,OAAAC,EAAA,EAAAD,CAAAE,KAAAuS,GACXvS,KAAKmF,KAAO,GACZnF,KAAKiD,WAAa,GCbbuP,EAAb,SAAAC,GAII,SAAAD,EAAY3S,GAA0C,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAwS,IAClD9M,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA0S,GAAA3M,KAAA7F,QAHY4C,iBAA6C,OAKzD8C,EAAKP,KAAOtF,EAAK6S,KACjBhN,EAAKzC,WAAapD,EAAK8S,WAJ2BjN,EAJ1D,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA0S,EAAAC,GAAAD,EAAA,CAA0BD,GCAbK,EAAb,SAAAH,GAII,SAAAG,EAAY/S,GAA0C,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4S,IAClDlN,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA8S,GAAA/M,KAAA7F,QAHY4C,iBAA6C,QAKzD8C,EAAKP,KAAOtF,EAAK6S,KACjBhN,EAAKzC,WAAapD,EAAK8S,WAJ2BjN,EAJ1D,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA8S,EAAAH,GAAAG,EAAA,CAA+BL,GCAlBM,EAAb,SAAAJ,GAII,SAAAI,EAAYhT,GAA0C,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA6S,IAClDnN,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA+S,GAAAhN,KAAA7F,QAHY4C,iBAA6C,OAKzD8C,EAAKP,KAAOtF,EAAK6S,KACjBhN,EAAKzC,WAAapD,EAAK8S,WAJ2BjN,EAJ1D,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA+S,EAAAJ,GAAAI,EAAA,CAA+BN,GCIlBO,EAAb,WAQI,SAAAA,IAAehT,OAAAC,EAAA,EAAAD,CAAAE,KAAA8S,GAAA9S,KAJEgI,IAAM,0BAIThI,KAFN+S,qBAA+B,EAN3C,OAAAjT,OAAAiC,EAAA,EAAAjC,CAAAgT,EAAA,EAAA9Q,IAAA,UAAAC,MAAA,SAqBoBpC,GAEZ,OADA+G,QAAQC,IAAR,GAAAtD,OAAevD,KAAKgI,IAApB,2BAAkDnI,EAAKmT,kBAAkBpQ,kBAClE,UAvBf,CAAAZ,IAAA,0BAAAC,MAAA,SA0BmCpC,GAI3B,OAAOA,EAAKoT,aAER,IAAK,OAKD,OAJ0B,IAAIT,EAAK,CAC/BE,KAAM,QACNC,WAAY7Q,EAAIU,UAAU,CAACH,eAAgB,OAAY,MAK/D,IAAK,QAKD,OAJ0B,IAAIuQ,EAAU,CACpCF,KAAM,QACNC,WAAY7Q,EAAIU,UAAU,CAACH,eAAgB,MAAS,MAK5D,IAAK,OAKD,OAJ0B,IAAIwQ,EAAU,CACpCH,KAAM,QACNC,WAAY7Q,EAAIU,UAAU,CAACH,eAAgB,MAAU,MAOjE,OAAO,IAAIuQ,EAAU,CAACF,KAAM,QAASC,YAAa,OA1D1D,EAAA3Q,IAAA,cAAAC,MAAA,WAkBQ,OAJKjC,KAAKoI,WACNpI,KAAKoI,SAAW,IAAI0K,GAGjB9S,KAAKoI,aAlBpB0K,EAAA,GCAaI,EAAb,SAAAC,GAUI,SAAAD,EAAYrT,GAA2B,IAAA6F,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAkT,IACnCxN,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAoT,GAAArN,KAAA7F,QARGyL,SAAmB,EAStB/F,EAAK/C,SAAW,IAAIiQ,EAAU,CAACF,KAAM,QAASC,WAAY,IAC1DjN,EAAK+F,SAAWyH,EAAYE,SAC5B1N,EAAKmF,YAAa,EAClBnF,EAAKxC,eAAiB,EACtBwC,EAAKkL,MAAQ/Q,EAAK8L,MAClBjG,EAAKiN,WAAa,EAPiBjN,EAV3C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAoT,EAAAC,GAAArT,OAAAiC,EAAA,EAAAjC,CAAAoT,EAAA,EAAAlR,IAAA,YAAAC,MAAA,SAoBqBpC,GACbG,KAAK2C,SAAW9C,EAAK4M,YADoC,IAGlDA,EAAe5M,EAAf4M,aAEHA,GACsC,SAAjCA,EAAY7J,kBACqB,SAAjC6J,EAAY7J,mBAEjB5C,KAAKiS,gBAAkB,OA7BnC,CAAAjQ,IAAA,iBAAAC,MAAA,WAkC4B,IAAAoR,EAAArT,KAMpB,MAJiD,CAC7C,MAAO,MAAO,OAAQ,UAAW,OAAQ,SAGvBsJ,OAAO,SAAAgK,GAAE,OAAsB,OAAlBD,EAAK1Q,UAAsB2Q,IAAOD,EAAK1Q,SAASC,mBAAkBL,OAAS,MAxCtH2Q,EAAA,CCOI,SAAAK,IAAezT,OAAAC,EAAA,EAAAD,CAAAE,KAAAuT,GAAAvT,KANR6K,YAAsB,EAQzB7K,KAAKiS,gBAAkB,IDTlBiB,EAOME,OAAiB,EEP7B,IAAMI,EAAb,WAUI,SAAAA,EAAY3T,GAAuGC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwT,GAAAxT,KAFlGyT,aAAe,kBAAMX,EAAsBnP,cAAc+P,wBAAwB,CAACT,YAAa,WAI5GjT,KAAK2T,MAAQ9T,EAAK8T,MAClB3T,KAAK4T,MAAQ/T,EAAK+T,MAClB5T,KAAKwI,IAAM,CAAC,IACZxI,KAAK6T,MAAQhU,EAAKiU,WAClB9T,KAAK6Q,aAAehR,EAAKgR,aAEzB7Q,KAAK+T,gBAlBb,OAAAjU,OAAAiC,EAAA,EAAAjC,CAAA0T,EAAA,EAAAxR,IAAA,0BAAAC,MAAA,WAwBQ2E,QAAQC,IAAR,8CAA2D,CAAC2B,IAAKxI,KAAKwI,MAEtE,IAAK,IAAID,EAAI,EAAGA,EAAIvI,KAAKwI,IAAIjG,OAAQgG,IACjC3B,QAAQoN,MAAMhU,KAAKwI,IAAID,MA3BnC,CAAAvG,IAAA,gBAAAC,MAAA,WAiCQ2E,QAAQC,IAAR,uDAAoE7G,KAAK2T,MAAO3T,KAAK4T,MAAO5T,KAAK6T,OAGjG,IAAK,IAAII,EAAI,EAAGA,EAAIjU,KAAK2T,MAAOM,IAAK,CAEjCjU,KAAKwI,IAAI0L,KAAK,IAEd,IAAK,IAAIC,EAAI,EAAGA,EAAInU,KAAK4T,MAAOO,IAAK,CAEjC,IAAMC,EAAK,IAAIlB,EAAY,CAACvH,MAAO3L,OACnCoU,EAAGzR,SAAW3C,KAAKyT,eAEnBzT,KAAKwI,IAAIyL,GAAGC,KAAKE,OA7CjC,CAAApS,IAAA,sBAAAC,MAAA,WAoDQ,IAEMoS,EAAQrU,KAAKwI,IAAIA,IAAI,SAAA8L,GAAM,OAFN,SAACA,GAAD,OAA2BA,EAAOhL,OAAO,SAAAiL,GAAO,OAAIA,EAAQxD,mBAElDyD,CAAmBF,GAAQ9L,IAAI,SAAA8L,GAAM,OAAIA,EAAO3R,aAIrF,MAFsB,GAAGY,OAAOkR,MAAM,GAAIJ,KAxDlD,CAAArS,IAAA,iBAAAC,MAAA,WA+DQ,OAAOjC,KAAK0U,sBAAsBpL,OAAO,SAAA5B,GAAC,MAA2B,QAAvBA,EAAE9E,qBA/DxD,CAAAZ,IAAA,oBAAAC,MAAA,WAmEQ,IAAMgS,EAAInS,EAAIU,UAAU,CAACH,eAAgBrC,KAAKwI,IAAIjG,OAAS,IACrD4R,EAAIrS,EAAIU,UAAU,CAACH,eAAgBrC,KAAKwI,IAAIjG,OAAS,IAE3D,OACIvC,KAAKwI,IAAIyL,GAAGE,OAvExBX,EAAA,GCgBamB,EAAb,SAAAC,GAYI,SAAAD,IAAc,IAAAjP,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA2U,IAEVjP,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA6U,GAAA9O,KAAA7F,KAAM,CAAEC,SAAS,MANd6Q,iBAA2B,EAQ9B3K,EAAU0O,yBAAyB,CAAE/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MAE7CA,EAAK8C,IAAM,IAAIgL,EAAW,CAAEG,MAAO,GAAIC,MAAO,GAAIE,WAAY,WAAYjD,aAAa/Q,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MACvFA,EAAKP,KAAO,WACZO,EAAK6L,aAAc,EACnB7L,EAAKqP,mCAAqC,EAC1CrP,EAAKsP,oCAAsC,EAC3CtP,EAAKoL,iBAAmB,EAExBzI,EAAQ4M,gBAAgB,CAAEtJ,MAAOjG,EAAK8C,MAEtC9C,EAAKwP,aAAe,IAAIC,IACxBzP,EAAKwP,aAAaE,IAAI,gBAAiB,CAACC,kBAAmB,GAAIC,gBAAiB,GAAIC,uBAAwB,KAC5G7P,EAAKwP,aAAaE,IAAI,iBAAkB,CAACC,kBAAmB,GAAIC,gBAAiB,GAAIC,uBAAwB,KAC7G7P,EAAKwP,aAAaE,IAAI,YAAa,CAACC,kBAAmB,GAAIC,gBAAiB,GAAIC,uBAAwB,KAlB9F7P,EAZlB,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA6U,EAAAC,GAAA9U,OAAAiC,EAAA,EAAAjC,CAAA6U,EAAA,EAAA3S,IAAA,wBAAAC,MAAA,SAkCiCpC,MAlCjC,CAAAmC,IAAA,WAAAC,MAAA,WA0CQ,IAAMwB,EAAOC,EAAKC,cAEdF,EAAKK,cACL9D,KAAKwV,mBACLrH,WAAW,WACPhI,EAAUsP,eACX,MAGHhS,EAAK4K,WACLrO,KAAK0V,gBApDjB,CAAA1T,IAAA,cAAAC,MAAA,WA6DY0S,EAAegB,YAEnB/O,QAAQC,IAAR,0CAEA8N,EAAegB,WAAY,EAG3B3V,KAAK4V,YAEL5V,KAAK6V,cAEL7V,KAAK8V,cAEL9V,KAAK+V,eAEL/V,KAAKgW,eAELhW,KAAKiW,iBA9Eb,CAAAjU,IAAA,cAAAC,MAAA,WAmFQ2E,QAAQC,IAAR,6CAEA,IAAMqP,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAapN,YAAYvG,OAAS,GAAtC,CAEAqE,QAAQC,IAAR,oDAAiEqP,EAAapN,YAAY,IAE1F,IAAMqN,EAAWD,EAAapN,YAAY,GAC1C3C,EAAUiQ,gBAAgB,CAAE/O,QAAS8O,OA5F7C,CAAAnU,IAAA,eAAAC,MAAA,WAkGQ2E,QAAQC,IAAR,8CAEA,IAAMqP,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAalN,aAAazG,OAAS,GAAvC,CAEAqE,QAAQC,IAAR,sDAAmEqP,EAAalN,aAAa,IAE7F,IAAMqN,EAAYH,EAAalN,aAAa,GAC5C7C,EAAUmQ,iBAAiB,CAAEjP,QAASgP,OA3G9C,CAAArU,IAAA,cAAAC,MAAA,WA+G0B,IAAAoR,EAAArT,KACZkW,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAajN,gBAAgB1G,OAAS,GAA1C,CAEA,IAAMgU,EAAWL,EAAajN,gBAAgB,GAE9C9C,EAAUiB,oBAAoB,CAAEC,QAASkP,IAEzC3P,QAAQC,IAAR,uDAAoE,CAAE2P,QAASD,IAE/EA,EAAStP,SAAS8F,QAAQ,SAACxD,GACvBpD,EAAUsQ,sBACN,CACI5I,gBAAiBwF,EACjB1F,cAAe0F,EAAKqD,kBAAkB,CAAEC,QAASjT,EAAKC,cAAc6J,YAAYhF,MAChFkF,kBAAmBnE,IAG3B3C,QAAQC,IAAR,6DAA0E0C,QAlItF,CAAAvH,IAAA,eAAAC,MAAA,WAuI2B,IAAA2U,EAAA5W,KACbkW,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAahN,aAAa3G,OAAS,GAAvC,CAEA,IAAMsU,EAAWX,EAAahN,aAAa,GAE3C/C,EAAU2B,iBAAiB,CAAET,QAASwP,IAEtCjQ,QAAQC,IAAR,0DAAuE,CAAEwC,KAAMwN,IAE/EA,EAAS5P,SAAS8F,QAAQ,SAACxD,GACvBpD,EAAUsQ,sBACN,CACI5I,gBAAiB+I,EACjBjJ,cAAeiJ,EAAKF,kBAAkB,CAAEC,QAASjT,EAAKC,cAAc6J,YAAYhF,MAChFkF,kBAAmBnE,SAvJvC,CAAAvH,IAAA,cAAAC,MAAA,WA4J0B,IAAA6U,EAAA9W,KACZkW,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAanN,YAAYxG,OAAS,GAAtC,CAEA,IAAMwU,EAAUb,EAAanN,YAAY,GAEzC5C,EAAUsB,gBAAgB,CAAEJ,QAAS0P,IAErCnQ,QAAQC,IAAR,yDAAsE,CAAEwC,KAAM0N,IAE9EA,EAAQ9P,SAAS8F,QAAQ,SAACxD,GACtBpD,EAAUsQ,sBACN,CACI5I,gBAAiBiJ,EACjBnJ,cAAemJ,EAAKJ,kBAAkB,CAAEC,QAASjT,EAAKC,cAAc6J,YAAYhF,MAChFkF,kBAAmBnE,SA5KvC,CAAAvH,IAAA,YAAAC,MAAA,WAmLQ2E,QAAQC,IAAR,2CAEA,IAAMqP,EAAe7N,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKwI,MAE1D,KAAI0N,EAAa/M,cAAc5G,OAAS,GAAxC,CAEAqE,QAAQC,IAAR,iDAEA,IAAMmQ,EAASd,EAAa/M,cAAc,GAI1C,GAHA6N,EAAOC,mBAAmB,CAAEnQ,KAAM,WAClCX,EAAU+Q,kBAAkB,CAAE7P,QAAS2P,MAEnCd,EAAa/M,cAAc5G,OAAS,GAAxC,CAEAqE,QAAQC,IAAR,iDAEA,IAAMsQ,EAASjB,EAAa/M,cAAc,GAC1CgO,EAAOF,mBAAmB,CAAEnQ,KAAM,YAClCX,EAAU+Q,kBAAkB,CAAE7P,QAAS8P,QArM/C,CAAAnV,IAAA,4BAAAC,MAAA,WA2MQ,IASIuO,EATE/M,EAAOC,EAAKC,cAKZyT,EAHM3T,EAAK+J,YAAYhF,IAGGkM,sBAAsBpL,OAAO,SAAA5B,GAAC,OAAIA,EAAEpC,cAAc2M,gBAAkB7R,EAAUgB,kCAAiCmB,OAEzI8U,EAAoBnV,KAAKgQ,MAAOzO,EAAKI,SAAWpB,EAAU8B,eAAiBnE,EAAUiB,4BAW3F,OANmDmP,EAA/C6G,EAA2C,EAAtBD,EAAmC,iBACnDC,EAA2C,EAAtBD,EAAmC,gBACnD,YAEdxQ,QAAQC,IAAR,iFAA8F,CAACyQ,UAAW9G,EAAQ6G,kBAAmBA,EAAmBE,UAAWH,IAE5J5G,IA7Nf,CAAAxO,IAAA,mBAAAC,MAAA,WAuP0CQ,EAAU+U,kBAAkBzT,iBAA9D,IAEMuT,EAAYtX,KAAKyX,4BAEjBC,EAA6G1X,KAAKkV,aAAayC,IAAIL,GAEnIM,EAAiB9V,EAAIU,UAAU,CAACH,eAAgB,KAEhDwV,EACHD,GAAkBF,EAAenC,uBAC9B,cACAqC,GAAkBF,EAAepC,gBAC7B,MACA,QAKV1O,QAAQC,IAAR,oDAAiEgR,GAEzC,UAApBA,GACA1R,EAAU2R,YAAY,CAACnG,aAAcjO,EAAKC,cAAc6J,YAAauE,SAAU,IAC/E/R,KAAK+X,WAAW,CAAEC,cAAe,EAAGC,aAAcxV,EAAU+U,kBAAkBxT,mBAGrD,QAApB6T,GACL1R,EAAU2R,YAAY,CAACnG,aAAcjO,EAAKC,cAAc6J,YAAauE,SAAU,IAC/E/R,KAAK+X,WAAW,CAAEC,cAAe,EAAGC,aAAcxV,EAAU+U,kBAAkBxT,mBAGrD,gBAApB6T,EACLjR,QAAQC,IAAR,+CAGAD,QAAQC,IAAR,oDAzRZ,CAAA7E,IAAA,aAAAC,MAAA,SA8RuBpC,GAEf+G,QAAQC,IAAR,uDAAAtD,OAAmE1D,EAAKmY,cAAxE,YAEA,IAAK,IAAIzP,EAAI,EAAGA,EAAI1I,EAAKmY,cAAezP,IAAK,CAEzC,IAAM2P,EAAUpW,EAAIsQ,oBAAoB,CAAE9P,YAAazC,EAAKoY,eAC5DrR,QAAQC,IAAR,4DAAyEqR,GAEzE,IAAMvO,EAAS3J,KAAK0W,kBAAkB,CAAEC,QAAS3W,KAAKwI,MAOhDa,EAAOtB,EAAoBpE,cAAciI,cAAc,CAAEzD,SAAU+P,EAASxV,WAAYiH,IAE1FN,GAAQM,EAAO6C,UAAU,CAAEC,YAAapD,IAGhDrJ,KAAKwI,IAAI2P,4BAnTjB,CAAAnW,IAAA,oBAAAC,MAAA,SAuT8BpC,GACtB,IAAMuY,EAAQtW,EAAIU,UAAU,CAAEH,eAAgB,IACxCgW,EAAQvW,EAAIU,UAAU,CAAEH,eAAgB,IAE9C,OAAOxC,EAAK8W,QAAQnO,IAAI4P,GAAOC,OA3TvC1D,EAAA,CAAoC/U,GAAvB+U,EAyDMgB,WAAqB,EC5EjC,IAAM2C,EAAb,SAAA1D,GAUI,SAAA0D,IAAc,IAAA5S,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAsY,IACV5S,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAwY,GAAAzS,KAAA7F,KAAM,CAACC,SAAS,MAHb6Q,iBAA2B,EAK9BpL,EAAK8C,IAAM,IAAIgL,EAAW,CAACG,MAAO,GAAIC,MAAO,GAAIE,WAAY,QAASjD,aAAa/Q,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MACnFA,EAAKP,KAAO,QACZO,EAAK6L,aAAc,EACnB7L,EAAKqP,mCAAqC,EAC1CrP,EAAKsP,oCAAsC,EAC3CtP,EAAKoL,iBAAmB,EAExBzI,EAAQ4M,gBAAgB,CAACtJ,MAAOjG,EAAK8C,MAV3B9C,EAVlB,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAwY,EAAA1D,GAAA0D,EAAA,CAAiC1Y,GCFpB2Y,EAAb,oBAAAA,IAAAzY,OAAAC,EAAA,EAAAD,CAAAE,KAAAuY,GAAA,OAAAzY,OAAAiC,EAAA,EAAAjC,CAAAyY,EAAA,OAAAvW,IAAA,wBAAAC,MAAA,WA0CQ,OAAOH,EAAIsQ,oBAAoB,CAAE9P,YAAatC,KAAKwY,uBA1C3DD,EAAA,GAAaA,EAGeC,iBAAmB,CACvC,aACA,gBACA,MACA,QACA,SACA,SACA,oBACA,SACA,OACA,OACA,OACA,QACA,mBACA,WACA,uBACA,WACA,WACA,oBACA,SACA,QACA,WACA,WACA,QACA,SACA,UACA,QACA,eACA,aACA,aACA,SACA,SACA,UACA,UACA,OC5BD,IAIM9U,EAAb,SAAA+U,GAcI,SAAA/U,IAAsB,IAAAgC,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IAClBgC,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA4D,GAAAmC,KAAA7F,QAXG8D,aAAuB,EAUR4B,EATf2I,WAAqB,EASN3I,EAPf+L,KAAe,EAOA/L,EAd1B,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA4D,EAAA+U,GAAA3Y,OAAAiC,EAAA,EAAAjC,CAAA4D,EAAA,EAAA1B,IAAA,WAAA2V,IAAA,WAQ4B,OAAO3X,KAAKyR,KAAOhP,EAAU8B,kBARzDzE,OAAAiC,EAAA,EAAAjC,CAAA4D,EAAA,EAAA1B,IAAA,iBAAAC,MAAA,WAoBQjC,KAAKsN,eAAiB,IAAIqH,EAC1B3U,KAAKsN,eAAenI,KAAOoT,EAASG,wBACpC1Y,KAAKwN,YAAc,IAAI8K,EACvBtY,KAAKqN,cAAgBrN,KAAKwN,cAvBlC,CAAAxL,IAAA,YAAAC,MAAA,WAsCQkE,EAAUwS,gBAtClB,EAAA3W,IAAA,cAAAC,MAAA,WAiCQ,OALMjC,KAAKoI,WACPpI,KAAKoI,SAAW,IAAI1E,EACpB1D,KAAKoI,SAASwQ,kBAGX5Y,KAAKoI,aAjCpB1E,EAAA,CAJA,SAAAmV,IAAA/Y,OAAAC,EAAA,EAAAD,CAAAE,KAAA6Y,KCAaC,EAAb,SAAAC,GAKI,SAAAD,EAAYE,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA8Y,IACpCpT,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAgZ,GAAAjT,KAAA7F,KAAMgZ,EAAOC,KAJT3G,IAAc,EAGkB5M,EAL5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAgZ,EAAAC,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAgZ,EAAA,EAAA9W,IAAA,cAAAC,MAAA,SASgBiX,GAAmB,IAAA7F,EAAArT,KAErBmZ,EAAcC,SAASC,eAAeH,GACxCC,IACAA,EAAYG,UAAY,UAG5BtZ,KAAKsS,IAAM,EAEX,IAAMiH,EAAkBrL,YAAY,WAC5BiL,IACAA,EAAYG,UAAYjG,EAAK2F,MAAMQ,cAAcC,UAAU,EAAGpG,EAAKf,OAAS,WAEjFtS,KAAKgZ,MAAMU,gBAEdvL,WAAW,WAEPwL,cAAcJ,GACVJ,IACAA,EAAYG,UAAYjG,EAAK2F,MAAMQ,eAEnCnG,EAAK2F,MAAMY,0BAA2BvG,EAAK2F,MAAMY,4BAEtD5Z,KAAKgZ,MAAMU,eAAiB1Z,KAAKgZ,MAAMQ,cAAcjX,OAAqC,EAA5BvC,KAAKgZ,MAAMU,kBAhCpF,CAAA1X,IAAA,SAAAC,MAAA,WAoCa,IAAA2U,EAAA5W,KAEC6Z,EAAM,UAAAtW,OAAauV,EAAgBgB,cAQzC,OAJA3L,WAAW,WACPyI,EAAKmD,YAAYF,IAClB,IAGCG,EAAA3N,EAAA4N,cAAA,QAAMC,GAAIL,QA/CtBf,EAAA,CAAqCqB,aAAxBrB,EAGMgB,WAAqB,ECHjC,IAAMM,EAAb,SAAArB,GAII,SAAAqB,EAAYpB,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAoa,IACpC1U,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAsa,GAAAvU,KAAA7F,KAAMgZ,EAAOC,KAHAoB,oBAA8B,qCAK3C3U,EAAKuT,MAAQ,CACTqB,YAAa,IAIjBnU,EAAU0O,yBAAyB,CAAE/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MARTA,EAJ5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAsa,EAAArB,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAsa,EAAA,EAAApY,IAAA,wBAAAC,MAAA,SAeiCpC,GAIQ,iBAA7BA,EAAKqN,QAAQE,aAA+D,iBAA7BvN,EAAKqN,QAAQE,aAC5DpN,KAAKua,gBApBjB,CAAAvY,IAAA,SAAAC,MAAA,WA0BQ2E,QAAQC,IAAR,0CACA,IAAMpD,EAAaC,EAAKC,cAExB,OACIqW,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,qBAEP/W,EAAKK,YACCkW,EAAA3N,EAAA4N,cAACQ,EAAD,CAAiBf,eAAgB,GAAIF,cAAa,gBAAAjW,OAAkBE,EAAKI,SAAvB,gBAAAN,OAA8CE,EAAKK,YAAc,QAAU,UAC7HkW,EAAA3N,EAAA4N,cAACQ,EAAD,CAAiBf,eAAgB,GAAIF,cAAa,gBAAAjW,OAAkBE,EAAKI,SAAvB,uDAlC5EuW,EAAA,CAAyCD,4BCT5BO,EAAb,SAAAA,IAAA5a,OAAAC,EAAA,EAAAD,CAAAE,KAAA0a,IAAaA,EAECC,WAAaC,qBAAW,CAClCC,KAAM,CAEJC,aAAc,EACdC,OAAQ,EACRC,MAAO,UACPC,OAAQ,GACRC,QAAS,SACTC,UAAW,yCAEbC,MAAO,CACLC,cAAe,eAXMT,CAatBU,KCWE,IAAMC,EAAb,SAAAxC,GAMI,SAAAwC,EAAYvC,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAub,IACpC7V,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAyb,GAAA1V,KAAA7F,KAAMgZ,EAAOC,KALTuC,MAAgB,EAIgB9V,EAHvB+V,MAAQ,kBAAM/V,EAAK8V,SAGI9V,EAFvBgW,uBAAyC,CAAEC,UAAW,KAAMC,WAAY,KAAMC,UAAU,EAAOC,gBAAiB,MAK7HpW,EAAKuT,MAAQ,CACT8C,cAAe,IAInB5V,EAAU0O,yBAAyB,CAAE/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MARTA,EAN5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAyb,EAAAxC,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAyb,EAAA,EAAAvZ,IAAA,wBAAAC,MAAA,SAkBiCpC,MAlBjC,CAAAmC,IAAA,oBAAAC,MAAA,WA0BQjC,KAAKgc,SAAS,CACVD,cAAe,IAAIE,MAAMjc,KAAKgZ,MAAMkD,qBAAqBC,KAAKnc,KAAK0b,4BA3B/E,CAAA1Z,IAAA,mBAAAC,MAAA,SAgC6BpC,GACrB+G,QAAQC,IAAR,kEAA+EhH,EAAK2Q,QAEpFxQ,KAAKgc,SAAS,CACVD,cAAe/b,KAAKiZ,MAAM8C,cAAc/Q,OAAQ,SAACK,EAAMC,EAAMgH,GAEzD,GAAIA,IAAQzS,EAAK2Q,OAAO4L,cAAe,CACnC,IAAMC,EAAkC,CACpCV,UAAW,KACXC,WAAY,KACZC,SAAUhc,EAAK2Q,OAAO8L,WACtBR,gBAAiBjc,EAAK2Q,OAAO+L,SAKjC,OAFA3V,QAAQC,IAAR,6DAA0E,CAAC2V,gBAAiBH,IAErFhR,EAAK9H,OAAO8Y,GAGnB,OAAOhR,EAAK9H,OAAO+H,IAGxB,QAtDf,CAAAtJ,IAAA,SAAAC,MAAA,WA0Da,IAAAoR,EAAArT,KAEL4G,QAAQC,IAAR,iEAA8E,CAACmS,MAAOhZ,KAAKgZ,MAAOC,MAAOjZ,KAAKiZ,QAE9G,IA6BMwD,EAAoB,SAAC5c,GACvB,OACIwT,EAAK2F,MAAM0D,oBAAoBlU,IAAI,SAACmU,EAAarK,GAAd,OAC/B0H,EAAA3N,EAAA4N,cAAA,QAAMjY,IAAKqR,EAAKoI,QACZmB,WAAS,EACTC,YAAa,SAACC,GAAD,OApBL,SAACjd,GACrB+G,QAAQC,IAAR,qEACA,CACIiW,EAAGjd,EAAKkd,UACRC,GAAInd,EAAKsI,SACTiU,cAAevc,EAAKod,iBAGxBpd,EAAKkd,UAAUG,aAAaC,QAAQ/c,EAAUkB,SAAUlB,EAAUW,YAClElB,EAAKkd,UAAUG,aAAaC,QAAQ/c,EAAUmB,SAAU1B,EAAKsI,UAC7DtI,EAAKkd,UAAUG,aAAaC,QAAQ/c,EAAUoB,cAAe3B,EAAKod,eAAeG,YAEhFC,OAAejd,EAAUC,mCAAqCgT,EAAKiK,iBAAiBC,KAAKlK,GAQ1DmK,CAAgB,CAACrV,SAASwU,EAAaI,UAAWD,EAAGG,eAAgBpd,EAAK4d,oBAC9FC,UACI,SAACZ,GACGlW,QAAQC,IAAR,mEACI,CAAEiW,IAAGE,GAAIL,MAKpBgB,EAA4B,CAACC,YAAajB,QAMrDgB,EAA8B,SAAC9d,GAEjC,IAAMge,EAAK,GAAAta,OAAM1D,EAAK+d,YAAX,SACLE,EAAY,qBAAAva,OAAwB1D,EAAK+d,YAA7B,YAClB,OAAQ5D,EAAA3N,EAAA4N,cAAA,YAAMD,EAAA3N,EAAA4N,cAAA,OAAK8D,IAAKD,EAAcE,MAAM,KAAK/C,OAAO,KAAK4C,MAAOA,IAA5D,IAAsEhe,EAAK+d,cAoDvF,OApBI5D,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KA3BI5K,EAAK2F,MAAMkD,oBAAsB,EAC3BlC,EAAA3N,EAAA4N,cAAA,WACED,EAAA3N,EAAA4N,cAACQ,EAAD,CAAiBf,eAAgB,GAAIF,cAAa,4BAAAjW,OAA8B8P,EAAK2F,MAAMkD,oBAAzC,cACpDlC,EAAA3N,EAAA4N,cAAA,+CA6BFD,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,UAAID,EAAA3N,EAAA4N,cAACQ,EAAD,CAAiBf,eAAgB,GAAIF,cAAc,sBAxBnE5S,QAAQC,IAAR,mEAAgFwM,EAAK4F,MAAM8C,eAEpF1I,EAAK4F,MAAM8C,cAAcvT,IAAI,SAAC0V,EAAW5L,GAC5C,OACI0H,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,SAAf,WACanJ,EADb,sBAEiB4L,EAAUrC,SAAWqC,EAAUpC,gBAAkBW,EAAkB,CAACgB,iBAAkBnL,IAFvG,mBAIgB4L,EAAUrC,SAAW,MAAQ,KAEpCqC,EAAUpC,kBAAqBoC,EAAUrC,SAAYqC,EAAUpC,gBAAkB,UAoB1F9b,KAAKiZ,MAAM8C,cAAczS,OAAO,SAAAnC,GAAC,OAAIA,EAAE0U,WAAUtZ,SAAWvC,KAAKiZ,MAAM8C,cAAcxZ,OA/FzFyX,EAAA3N,EAAA4N,cAAA,4CAEID,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QACpB,WACIxX,QAAQC,IAAR,wEACAV,EAAUkY,oBAHlB,gBA+FM,UAjK1B9C,EAAA,CAA4CpB,aCf/BmE,EAAb,SAAAvF,GAEI,SAAAuF,EAAYtF,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAse,IACpC5Y,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAwe,GAAAzY,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,GAHuBvT,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAwe,EAAAvF,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAwe,EAAA,EAAAtc,IAAA,oBAAAC,MAAA,WAaQ2E,QAAQC,IAAR,wDAAqE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,UAb9G,CAAAhX,IAAA,kBAAAC,MAAA,WAkBQkE,EAAUiQ,gBAAgB,CAAE/O,QAASrH,KAAKgZ,MAAM3P,OAChDrJ,KAAKua,gBAnBb,CAAAvY,IAAA,SAAAC,MAAA,WAsBa,IAAAoR,EAAArT,KAEEqJ,EAAQrJ,KAAKgZ,MAAb3P,KAEDkV,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAM/K,EAAK+C,oBAA5C,2BAKFoI,EACFxE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,gEAAA1W,OAE4D8F,EAAKvD,cAFjE,kCAOF2Y,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,+BAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yBAAiB5Q,EAAKlE,KAAtB,oBAGR,OAAIkE,EAAKjE,aAAuBwZ,EAI5B5e,KAAKgZ,MAAM3P,KAAKhE,kBAERrF,KAAKgZ,MAAM3P,KAAKtD,WAAa2Y,EAAQF,GAAoBE,EAAQH,GAEnEG,EAAQD,OArE1BH,EAAA,CAAsCnE,aCGzB0E,EAAb,SAAA9F,GAEI,SAAA8F,EAAY7F,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA6e,IACpCnZ,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA+e,GAAAhZ,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,CACT6F,aAAa,GAJmBpZ,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA+e,EAAA9F,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAA+e,EAAA,EAAA7c,IAAA,oBAAAC,MAAA,WAYQ2E,QAAQC,IAAR,0DAAuE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,UAZhH,CAAAhX,IAAA,SAAAC,MAAA,WAea,IAAAoR,EAAArT,KAEGqJ,EAASrJ,KAAKgZ,MAAd3P,KAEF0V,EAAU,SAAClf,GACbwJ,EAAK4N,mBAAmBpX,GACxBwT,EAAK2I,SAAS,CAAE8C,aAAa,IAC7BzL,EAAK2L,kBAAkB,CAAE3X,QAASgC,IAClClD,EAAU+Q,kBAAkB,CAAE7P,QAASgC,KAGrCkV,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAMW,EAAQ,CAAEjY,KAAM,aAAvD,aACAkT,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAMW,EAAQ,CAAEjY,KAAM,cAAvD,eAGFmY,EACFjF,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,qBAAa5Q,EAAK3C,gBAAlB,cAGF+X,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,8BAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,2BAAmB5Q,EAAKlE,KAAxB,oBAGR,OAAIkE,EAAKjE,aAAuBwZ,EAG5B5e,KAAKgZ,MAAM3P,KAAKhE,kBAE4B,aAApCrF,KAAKgZ,MAAM3P,KAAK3C,gBAAiCgY,EAAQH,GAAyBG,EAAQO,GAE5FP,EAAQD,KA/D1B,CAAAzc,IAAA,oBAAAC,MAAA,SAmE8BpC,GAEtB,IAAMqf,EAAgB9F,SAASC,eAAehR,EAAQ8W,qBAAqBtf,EAAKwH,QAAQ/B,gBAEhFoB,EAAoB7G,EAAKwH,QAAzBX,gBAEF0Y,EAAO,GAAA7b,OAA0B,WAApBmD,EAA+B,SAAW,UAAhD,gBACP2Y,EAAS,GAAA9b,OAA0B,WAApBmD,EAA+B,SAAW,UAAhD,kBAEfwH,YAAY,WACJgR,IAEAA,EAAcI,UAAUC,OAAOH,GAC/BF,EAAcI,UAAUC,OAAOF,GAE/BH,EAAcI,UAAUE,IAAIJ,GAE5BjR,WAAW,WACP+Q,EAAcI,UAAUE,IAAIH,IAC7B,OAGR,SAzFXR,EAAA,CAAwC1E,aCC3BsF,EAAb,SAAAC,GAII,SAAAD,EAAYzG,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAyf,IACpC/Z,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA2f,GAAA5Z,KAAA7F,KAAMgZ,EAAOC,KAHT0G,UAAoB,EAEYja,EAJ5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA2f,EAAAC,GAAA5f,OAAAiC,EAAA,EAAAjC,CAAA2f,EAAA,EAAAzd,IAAA,QAAAC,MAAA,WASsB,oCAAAsB,OAAqCvD,KAAK2f,eAThE,CAAA3d,IAAA,oBAAAC,MAAA,WAYQkE,EAAU0O,yBAAyB,CAAE/H,QAAS9M,SAZtD,CAAAgC,IAAA,wBAAAC,MAAA,SAeiCpC,GAIQ,mBAA7BA,EAAKqN,QAAQE,aACfpN,KAAKua,gBApBf,CAAAvY,IAAA,SAAAC,MAAA,WAwBa,IAAAoR,EAAArT,KAEE4f,EAAkB5f,KAAKgZ,MAAvB4G,cAyCDC,EAAiB,SAAChgB,GACpB,OACQma,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,QACXmB,WAAS,EACTC,YAAa,SAACC,GAAD,OA3CL,SAACjd,GACrB+G,QAAQC,IAAR,4EACI,CACIiW,EAAGjd,EAAKkd,UACRX,cAAevc,EAAKigB,eAG5BjgB,EAAKkd,UAAUG,aAAaC,QAAQ,WAAY/c,EAAUY,qBAC1DnB,EAAKkd,UAAUG,aAAaC,QAAQ,eAAgBtd,EAAKigB,aAAa1C,YAErEC,OAAejd,EAAUE,oCAAsC+S,EAAKiK,iBAAiBC,KAAKlK,GAiC3DmK,CAAgB,CAAET,UAAWD,EAAGgD,aAAcjgB,EAAKkgB,oBAF3E,GAAAxc,OAIQqc,EAJR,KAAArc,OAIyB1D,EAAKkgB,gBAJ9B,OASZ,OACI/f,KAAKgZ,MAAMjU,WAAWkC,SAASuB,IAAK,SAACrB,EAAGmL,GAIpC,OAAInL,EAAEnC,gBAhCgBnF,EAgC8B,CAACkgB,gBAAiBzN,GA9BtE0H,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,SAAf,GAAAlY,OACQqc,EADR,KAAArc,OACyB1D,EAAKkgB,gBAD9B,qBAgCI5Y,EAAExC,YA1BS,SAAC9E,GACpB,OACIma,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,SAAf,GAAAlY,OACQqc,EADR,KAAArc,OACyB1D,EAAKkgB,gBAD9B,qBAwB4BC,CAAe,CAACD,gBAAiBzN,IAE1C,OAAfnL,EAAE1C,SA5CS,SAAC5E,GACpB,OACIma,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,SAAf,GAAAlY,OACQqc,EADR,KAAArc,OACyB1D,EAAKkgB,gBAD9B,kBA2CWE,CAAe,CAACF,gBAAiBzN,IAGrCuN,EAAe,CAACE,gBAAiBzN,IAxCnB,IAACzS,MAnDtC,CAAAmC,IAAA,mBAAAC,MAAA,SAiG6BpC,GACrB+G,QAAQC,IAAR,uEAAoFhH,EAAK2Q,QAEzF,IAAM0P,EAAoBlgB,KAAKgZ,MAAMjU,WAAWO,cAAcsL,MAAMiD,MAEpE1N,EAAUsQ,sBACN,CACI5I,gBAAuC,aAAtBqS,EAAmCxc,EAAKC,cAAc2J,eAAiB5J,EAAKC,cAAc6J,YAC3GG,cAAe9N,EAAK2Q,OAAO2P,iBAC3BzS,kBAAmB1N,KAAKgZ,MAAMjU,WAAWkC,SAASpH,EAAK2Q,OAAOsP,gBAGlE9f,KAAKgZ,MAAMjU,WAAWqb,wBACtBpgB,KAAKgZ,MAAMqH,4BAGfrgB,KAAKua,kBAjHbkF,EAAA,CAAgDa,IAAMnG,WCFzCoG,EAAb,SAAAxH,GAEI,SAAAwH,EAAYvH,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAugB,IACpC7a,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAygB,GAAA1a,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,CACTuH,qBAAqB,GAJW9a,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAygB,EAAAxH,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAygB,EAAA,EAAAve,IAAA,mBAAAC,MAAA,WAYQ2E,QAAQC,IAAR,kDAEA7G,KAAKgc,SAAS,CAAEwE,qBAAqB,MAd7C,CAAAxe,IAAA,SAAAC,MAAA,WAiBa,IAAAoR,EAAArT,KAEGiH,EAAajH,KAAKgZ,MAAM3P,KAAxBpC,SACAoC,EAASrJ,KAAKgZ,MAAd3P,KAEFoX,EACFzG,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yBAAA1W,OAAoB0D,EAAS1E,OAA7B,cAAgDyX,EAAA3N,EAAA4N,cAAA,YAChDD,EAAA3N,EAAA4N,cAACyG,EAAD,CACId,cAAe,oBACf7a,WAAY/E,KAAKgZ,MAAM3P,KACvBgX,0BAA2B,kBAAMhN,EAAK2I,SAAS,CAAEwE,qBAAqB,QAK5EjC,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAM/K,EAAKvL,qBAA5C,UAAAvE,OACe0D,EAAS1E,OADxB,eAKFoe,EACF3G,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,eAAA1W,OAEW0D,EAAS1E,OAFpB,gBAQFkc,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,gCAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,0BAAkB5Q,EAAKlE,KAAvB,oBAIR,OAAIkE,EAAKjE,aAAuBwZ,EAC5B5e,KAAKiZ,MAAMuH,oBAA8B9B,EAAQ+B,GAChDpX,EAAKhE,kBACNgE,EAAK+W,wBAAkC1B,EAAQiC,GAE5CjC,EAAQH,GAHuBG,EAAQD,OAxEtD8B,EAAA,CAAuCpG,aCC1ByG,EAAb,SAAA7H,GAEI,SAAA6H,EAAY5H,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4gB,IACpClb,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA8gB,GAAA/a,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,CACTuH,qBAAqB,GAJW9a,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA8gB,EAAA7H,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAA8gB,EAAA,EAAA5e,IAAA,oBAAAC,MAAA,WAaQ2E,QAAQC,IAAR,4DAAyE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,UAblH,CAAAhX,IAAA,sBAAAC,MAAA,WAkBQ2E,QAAQC,IAAR,wDACAV,EAAUiB,oBAAoB,CAAEC,QAASrH,KAAKgZ,MAAM3P,OACpDrJ,KAAKgc,SAAS,CAAEwE,qBAAqB,MApB7C,CAAAxe,IAAA,SAAAC,MAAA,WAuBa,IAAAoR,EAAArT,KAEEqJ,EAAQrJ,KAAKgZ,MAAb3P,KAEDoX,EACFzG,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yBAAA1W,OAAoB8F,EAAKpC,SAAS1E,OAAlC,cAAqDyX,EAAA3N,EAAA4N,cAAA,YACrDD,EAAA3N,EAAA4N,cAACyG,EAAD,CACId,cAAe,OACf7a,WAAYsE,EACZgX,0BAA2B,kBAAMhN,EAAK2I,SAAS,CAAEwE,qBAAqB,QAI5EjC,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAM/K,EAAKjM,wBAA5C,UAAA7D,OACe8F,EAAKpC,SAAS1E,OAD7B,eAKFoe,EACF3G,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,eAAA1W,OAEW8F,EAAKpC,SAAS1E,OAFzB,gBAQFkc,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,oCAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,6BAAqB5Q,EAAKlE,KAA1B,oBAIR,OAAIkE,EAAKjE,aAAuBwZ,EAC5B5e,KAAKiZ,MAAMuH,oBAA8B9B,EAAQ+B,GAChDpX,EAAKhE,kBACNgE,EAAK+W,wBAAkC1B,EAAQiC,GAE5CjC,EAAQH,GAHuBG,EAAQD,OA5EtDmC,EAAA,CAA0CzG,aCD7B0G,EAAb,SAAA9H,GAEI,SAAA8H,EAAY7H,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA6gB,IACpCnb,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA+gB,GAAAhb,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,CACT6H,oBAAoB,GAJYpb,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA+gB,EAAA9H,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAA+gB,EAAA,EAAA7e,IAAA,oBAAAC,MAAA,WAcQ2E,QAAQC,IAAR,wDAAqE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,UAd9G,CAAAhX,IAAA,kBAAAC,MAAA,WAmBQ2E,QAAQC,IAAR,gDAEA7G,KAAKgc,SAAS,CAAE8E,oBAAoB,MArB5C,CAAA9e,IAAA,4BAAAC,MAAA,WAyBQjC,KAAKgc,SAAS,CACV8E,oBAAoB,MA1BhC,CAAA9e,IAAA,SAAAC,MAAA,WA8Ba,IAAAoR,EAAArT,KAEL4G,QAAQC,IAAR,2DAAwE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,QAFpG,IAIE3P,EAAQrJ,KAAKgZ,MAAb3P,KAEDoX,EACFzG,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yBAAA1W,OAAoB8F,EAAKpC,SAAS1E,OAAlC,aAAoDyX,EAAA3N,EAAA4N,cAAA,YACpDD,EAAA3N,EAAA4N,cAACyG,EAAD,CACId,cAAe,SACf7a,WAAYsE,EACZgX,0BAA2B,kBAAMhN,EAAK2I,SAAS,CAAE8E,oBAAoB,QAI3EvC,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAM/K,EAAK5L,oBAA5C,YAAAlE,OACiB8F,EAAK9B,cADtB,kBAAAhE,OACoD8F,EAAKpC,SAAS1E,OADlE,eAKFwe,EACF/G,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,eAAA1W,OAEW8F,EAAK9B,cAFhB,gBAAAhE,OAE4C8F,EAAKpC,SAAS1E,OAF1D,wCAQFkc,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yCAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,yBAAiB5Q,EAAKlE,KAAtB,oBAGR,OAAIkE,EAAKjE,aAAuBwZ,EAC5B5e,KAAKiZ,MAAM6H,mBAA6BpC,EAAQ+B,GAC/CpX,EAAKhE,kBACNgE,EAAK+W,wBAAkC1B,EAAQqC,GAE5CrC,EAAQH,GAHuBG,EAAQD,OApFtDoC,EAAA,CAAsC1G,aCFzB6G,EAAb,SAAAjI,GAEI,SAAAiI,EAAYhI,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAghB,IACpCtb,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAkhB,GAAAnb,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,GAHuBvT,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAkhB,EAAAjI,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAkhB,EAAA,EAAAhf,IAAA,oBAAAC,MAAA,WAaQ2E,QAAQC,IAAR,yDAAsE,CAAEoS,MAAOjZ,KAAKiZ,MAAOD,MAAOhZ,KAAKgZ,UAb/G,CAAAhX,IAAA,aAAAC,MAAA,WAkBQkE,EAAUmQ,iBAAiB,CAAEjP,QAASrH,KAAKgZ,MAAM3P,OACjDrJ,KAAKua,gBAnBb,CAAAvY,IAAA,SAAAC,MAAA,WAsBa,IAAAoR,EAAArT,KAEEqJ,EAAQrJ,KAAKgZ,MAAb3P,KAEDkV,EACFvE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwByD,QAAS,kBAAM/K,EAAK4N,eAA5C,WAKFC,EACFlH,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,6BAOFwE,EACFzE,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,8BAGFyE,EAAU,SAACC,GACb,OACI3E,EAAA3N,EAAA4N,cAAA,WACID,EAAA3N,EAAA4N,cAAA,eAAA1W,OAAU8F,EAAKzG,iBAAf,MAAAW,OAAoC8F,EAAKlE,OACxCwZ,IAKPC,EACF5E,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACIjE,EAAA3N,EAAA4N,cAAA,0BAAkB5Q,EAAKlE,KAAvB,oBAIR,OAAIkE,EAAKjE,aAAuBwZ,EAG5BvV,EAAKhE,kBAEGgE,EAAKzB,WAAa8W,EAAQwC,GAAoBxC,EAAQH,GAExDG,EAAQD,OArE1BuC,EAAA,CAAuC7G,aC+B1BgH,GAAb,SAAApI,GAII,SAAAoI,EAAYnI,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAmhB,IACpCzb,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAqhB,GAAAtb,KAAA7F,KAAMgZ,EAAOC,KAHTmI,SAAmB,EAEa1b,EA6HhC2b,UAAY,SAACxhB,GAAwD,IAEjE+C,EAAqB/C,EAAKwH,QAA1BzE,iBAER,MAAyB,QAArBA,EAAmCoX,EAAA3N,EAAA4N,cAACqH,EAAD,CAAkBtf,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,UACzD,SAArBzE,EAAoCoX,EAAA3N,EAAA4N,cAACsH,EAAD,CAAmBvf,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,UAChE,QAArBzE,EAAmCoX,EAAA3N,EAAA4N,cAACuH,EAAD,CAAkBxf,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,UAC9D,YAArBzE,EAAuCoX,EAAA3N,EAAA4N,cAACwH,EAAD,CAAsBzf,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,UACtE,SAArBzE,EAAoCoX,EAAA3N,EAAA4N,cAACyH,EAAD,CAAmB1f,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,UAClF2S,EAAA3N,EAAA4N,cAAC0H,EAAD,CAAoB3f,IAAK0D,EAAK+V,QAASpS,KAAMxJ,EAAKwH,WAnI9D3B,EAAKuT,MAAQ,CACT2I,uBAAuB,EACvBC,YAAa,GACbC,cAAe,GACfC,eAAgB,IAGpB5b,EAAU0O,yBAAyB,CAAE/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MAVTA,EAJ5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAqhB,EAAApI,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAqhB,EAAA,EAAAnf,IAAA,wBAAAC,MAAA,SAkBiCpC,GAEzB,GAAiC,mBAA7BA,EAAKqN,QAAQE,YAAkC,CAE/C,IAAM4U,EAAkBhiB,KAAKiZ,MAAM4I,YAAYvY,OAAO,SAAA0T,GAAE,OAAIA,EAAGiF,WAAW7c,eACpE8c,EAAkBliB,KAAKiZ,MAAM6I,cAAcxY,OAAO,SAAA6Y,GAAE,OAAIA,EAAGF,WAAW7c,eAE5EpF,KAAKgc,SAAS,CACV+F,eAAgB/hB,KAAKiZ,MAAM8I,eAAexe,OAAOye,GAAiBze,OAAO2e,GACzEL,YAAa7hB,KAAKiZ,MAAM4I,YAAYvY,OAAO,SAAA0T,GAAE,OAAMA,EAAGiF,WAAW7c,eACjE0c,cAAe9hB,KAAKiZ,MAAM6I,cAAcxY,OAAO,SAAA6Y,GAAE,OAAMA,EAAGF,WAAW7c,iBAI5C,SAA7BvF,EAAKqN,QAAQE,aAETpN,KAAKiZ,MAAM6I,cAAcvf,OAAS,IAElCvC,KAAKiZ,MAAM6I,cAAc,GAAGG,WAAWG,WACvCpiB,KAAKqiB,6BAA6B,CAAChb,QAASrH,KAAKiZ,MAAM6I,cAAc,KAErE9hB,KAAKgc,SAAS,CACV6F,YAAa7hB,KAAKiZ,MAAM4I,YAAYte,OAAOvD,KAAKiZ,MAAM6I,cAAc,IACpEA,cAAe9hB,KAAKiZ,MAAM6I,cAAcQ,MAAM,QAzClE,CAAAtgB,IAAA,+BAAAC,MAAA,SAgDyCpC,GACjC,IAAMqf,EAAgB9F,SAASC,eAAehR,EAAQ8W,qBAAqBtf,EAAKwH,QAAQ4a,WAAW3c,gBAC/F4Z,IACAA,EAAcI,UAAUC,OAAO,iBAC/BL,EAAcI,UAAUE,IAAI,oBApDxC,CAAAxd,IAAA,oBAAAC,MAAA,WAyDwB,IAAAoR,EAAArT,KAEhBA,KAAKgZ,MAAMuJ,gCAAgC,CAAEC,GAAIxiB,OAEjD,IAWOyiB,EAFyBziB,KAAKgZ,MAAM0J,OAAOla,IAAIkM,sBAELlM,IAAI,SAAAd,GAAC,MAT9C,CACIua,WAHgB5Y,EAWiD3B,EAPjE8a,GAAInP,EAAKgO,UAAU,CAACha,QAASgC,KAJd,IAACA,IAa3BrJ,KAAKgc,SAAS,CACV8F,cAAeW,MA3E5B,CAAAzgB,IAAA,QAAAC,MAAA,WAgFsB,gCAAAsB,OAAiCvD,KAAKohB,cAhF5D,CAAApf,IAAA,uBAAAC,MAAA,SAkFgCpC,GACxB+G,QAAQC,IAAR,mEAAgF,CAAEhH,KAAMA,MAnFhG,CAAAmC,IAAA,SAAAC,MAAA,WAwFQ2E,QAAQC,IAAR,iEAA8E,CAAEmS,MAAOhZ,KAAKgZ,MAAOC,MAAOjZ,KAAKiZ,QAsC/G,OAxBIe,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,0BAEXR,EAAA3N,EAAA4N,cAAA,2CAIAD,EAAA3N,EAAA4N,cAAA,WAAKD,EAAA3N,EAAA4N,cAAA,2BAAmBja,KAAKiZ,MAAM4I,YAAYtf,OAA1C,MAEDvC,KAAKiZ,MAAM4I,YAAYrZ,IAAI,SAAAma,GAAU,OAAIA,EAAWH,KAGxDxI,EAAA3N,EAAA4N,cAAA,WAAKD,EAAA3N,EAAA4N,cAAA,6BAAqBja,KAAKiZ,MAAM6I,cAAcvf,OAA9C,MAEDvC,KAAKiZ,MAAM6I,cAActZ,IAAI,SAAAoa,GAAY,OAAIA,EAAaJ,KAG9DxI,EAAA3N,EAAA4N,cAAA,WAAKD,EAAA3N,EAAA4N,cAAA,8BAAsBja,KAAKiZ,MAAM8I,eAAexf,OAAhD,MAEDvC,KAAKiZ,MAAM8I,eAAevZ,IAAI,SAAAqa,GAAa,OAAIA,EAAcL,UAxHjFrB,EAAA,CAA4ChH,aCR/B2I,GAAb,SAAA/J,GAkEI,SAAA+J,EAAY9J,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA8iB,IACpCpd,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAgjB,GAAAjd,KAAA7F,KAAMgZ,EAAOC,KAjETuC,MAAgB,EAgEgB9V,EA/DvB+V,MAAQ,+BAAAlY,OAAoBmC,EAAK8V,UA+DV9V,EA7DhCqd,uBAAwD,KA6DxBrd,EA3DvBsd,eAA0C,CACvD,CACIC,cAAevd,EAAKwd,iBACpBC,aAAc,QAElB,CACIF,cAAevd,EAAK0d,YACpBD,aAAc,SAElB,CACIF,cAAevd,EAAK2d,iBACpBF,aAAc,eAElB,CACIF,cAAevd,EAAK4d,eACpBH,aAAc,YAElB,CACIF,cAAevd,EAAK4d,eACpBH,aAAc,iBAElB,CACIF,cAAevd,EAAK6d,UACpBJ,aAAc,OAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,iBAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,aAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,OAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,OAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,QAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,WAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,QAElB,CACIF,cAAevd,EAAK8d,kBACpBL,aAAc,UAOlBzd,EAAKuT,MAAQ,CACTwK,qBAAqB,EACrBC,yBAAyB,EACzBC,wBAAwB,EACxBC,YAAY,EACZC,eAAgB,KAChBhM,gBAAiB,KACjBiM,oBAAoB,EACpBC,cAAc,GAGlB5d,EAAU0O,yBAAyB,CAAC/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MAdRA,EAlE5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAgjB,EAAA/J,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAgjB,EAAA,EAAA9gB,IAAA,uBAAAC,MAAA,SAoFgCpC,GACxB+G,QAAQC,IAAR,iEAA8E,CAAChH,KAAMA,IAEjFG,KAAK+iB,wBAAwB/iB,KAAK+iB,uBAAuBiB,qBAAqBnkB,KAvF1F,CAAAmC,IAAA,sBAAAC,MAAA,WA2FQ,OAAOQ,EAAU+U,oBA3FzB,CAAAxV,IAAA,kBAAAC,MAAA,WA+FQjC,KAAKgc,SAAS,CACV4H,YAAY,EACZF,yBAAyB,EACzBC,wBAAwB,EACxBF,qBAAqB,EACrBI,eAAgB,KAChBhM,gBAAiB,KACjBiM,oBAAoB,MAtGhC,CAAA9hB,IAAA,oBAAAC,MAAA,WA2GQjC,KAAKgZ,MAAMiL,oBAAoB,CAACC,iBAAkBlkB,SA3G1D,CAAAgC,IAAA,wBAAAC,MAAA,SA8GiCpC,GAEQ,iBAA7BA,EAAKqN,QAAQE,aACbpN,KAAKmkB,kBAGwB,8BAA7BtkB,EAAKqN,QAAQE,aACbpN,KAAKgc,SAAS,CAAC8H,oBAAoB,IAGN,iBAA7BjkB,EAAKqN,QAAQE,aACbpN,KAAKgc,SACD,CACI+H,cAAc,EACdL,yBAAyB,EACzBC,wBAAwB,MA7H5C,CAAA3hB,IAAA,SAAAC,MAAA,WAkIa,IAAAoR,EAAArT,KAEC+D,EAAmB/D,KAAKokB,sBAAsBrgB,iBAAiByE,IAAI,SAAA6b,GAAC,OAAIhR,EAAKiR,sBAAsB,CAACC,UAAWF,MAC/GrgB,EAAkBhE,KAAKokB,sBAAsBpgB,gBAAgBwE,IAAI,SAAA6b,GAAC,OAAIhR,EAAKiR,sBAAsB,CAACC,UAAWF,MAMnH,OAAIrkB,KAAKiZ,MAAM6K,mBAHX9J,EAAA3N,EAAA4N,cAACQ,EAAD,CAAiBf,eAAgB,GAAIF,cAAc,mDAKnDxZ,KAAKiZ,MAAMyK,wBACJ3f,EAGP/D,KAAKiZ,MAAM2K,WAEP5J,EAAA3N,EAAA4N,cAACuK,EAAD,CACI9H,oBAAqB1c,KAAKokB,sBAAsBpgB,gBAChDkY,oBAAqBzZ,EAAUgiB,4BAA4B,CAAC3hB,uBAAwB9C,KAAKiZ,MAAMpB,oBAKvG7X,KAAKiZ,MAAM8K,aAEP/J,EAAA3N,EAAA4N,cAACyK,GAAD,CACIhC,OAAQ1iB,KAAKgZ,MAAM0J,OACnBH,gCAAiC,SAC7B1iB,GAD6B,OACUwT,EAAK0P,uBAAyBljB,EAAK2iB,MAK/Exe,IApKnB,CAAAhC,IAAA,wBAAAC,MAAA,SAyKkCpC,GAE1B,IAAMojB,EAAgBjjB,KAAKgjB,eAAe1Z,OAAO,SAAAqb,GAAE,OAAIA,EAAGxB,eAAiBtjB,EAAK0kB,YAAW,GAE3F,IAAMtB,EAAe,CACjB,IAAM2B,EAAM,CACRC,IAAK,+GACLhlB,KAAMA,GAIV,MADA+G,QAAQ6I,MAAMmV,GACRA,EAGV,OACI5K,EAAA3N,EAAA4N,cAACkE,EAAYxD,WAAb,CAAwB3Y,IAAKhC,KAAKyb,QAAS2C,QAAS6E,EAAcA,cAAc1F,KAAKvd,OAEhFH,EAAK0kB,aA1LtB,CAAAviB,IAAA,mBAAAC,MAAA,WAiMQ2E,QAAQC,IAAR,qDAEAV,EAAU2e,WAAW,CAACxT,gBAAiBtR,KAAKgZ,MAAM0J,SAElD1iB,KAAKgc,SACD,CACI+H,cAAc,EACdL,yBAAyB,EACzBC,wBAAwB,MAzMxC,CAAA3hB,IAAA,cAAAC,MAAA,WAgNQ2E,QAAQC,IAAR,gDAEAV,EAAU2R,YAAY,CAACnG,aAAcjO,EAAKC,cAAc2J,eAAgByE,SAAU,IAElF/R,KAAKgc,SAAS,CACV2H,wBAAwB,EACxBD,yBAAyB,EACzBE,YAAY,EACZ/L,gBAAiB,QACjBgM,eAAgB,SAzN5B,CAAA7hB,IAAA,iBAAAC,MAAA,WA+NQjC,KAAKgc,SACD,CACI+H,cAAc,EACdL,yBAAyB,EACzBC,wBAAwB,MAnOxC,CAAA3hB,IAAA,YAAAC,MAAA,WAyOQkE,EAAU2R,YAAY,CAACnG,aAAcjO,EAAKC,cAAc2J,eAAgByE,SAAU,IAElF/R,KAAKgc,SAAS,CACV2H,wBAAwB,EACxBD,yBAAyB,EACzBE,YAAY,EACZ/L,gBAAiB,MACjBgM,eAAgB,SAhP5B,CAAA7hB,IAAA,mBAAAC,MAAA,WAuPQjC,KAAKgc,SAAS,CACVyH,qBAAqB,EACrBC,yBAAyB,EACzBC,wBAAwB,EACxBC,YAAY,IAGhBzd,EAAUkY,oBA9PlB,CAAArc,IAAA,oBAAAC,MAAA,WAoQQ2E,QAAQC,IAAR,qEAEAV,EAAUsP,cAEVzV,KAAKgc,SAAS,CACVyH,qBAAqB,EACrBC,yBAAyB,EACzBC,wBAAwB,EACxBC,YAAY,QA5QxBd,EAAA,CAA0C3I,aCnB7B4K,GAAb,SAAAhM,GASI,SAAAgM,EAAY/L,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA+kB,IACpCrf,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAilB,GAAAlf,KAAA7F,KAAMgZ,EAAOC,KART+L,aAAuB,EAOStf,EANhC+V,MAAQ,wBAAAlY,OAAamC,EAAKsf,iBAMMtf,EAFhCuf,eAA2B,GAK/Bvf,EAAKuT,MAAQ,CACTiM,YAAa,GACbC,eAAgB,IAGpBzf,EAAK0f,mBAAqB,CAAC,QARS1f,EAT5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAilB,EAAAhM,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAAilB,EAAA,EAAA/iB,IAAA,oBAAAC,MAAA,WAqBQkE,EAAU0O,yBAAyB,CAAE/H,QAAS9M,OAE9CA,KAAKgc,SAAS,CACVmJ,eAAgB,qBAxB5B,CAAAnjB,IAAA,oBAAAC,MAAA,WAgCQjC,KAAKgc,SAAS,CACVkJ,YAAa,CAACllB,KAAKiZ,MAAMkM,gBAAgB5hB,OAAOvD,KAAKiZ,MAAMiM,eAI3DllB,KAAKilB,eAAe1iB,OAAS,EAC7BvC,KAAKgc,SAAS,CACVmJ,eAAgBnlB,KAAKilB,eAAeI,UAO5CrlB,KAAKgc,SAAS,CACVmJ,eAAgB,OA/C5B,CAAAnjB,IAAA,wBAAAC,MAAA,SAoDiCpC,GAERG,KAAKolB,mBAAmB9b,OAAO,SAAAgc,GAAI,OAAIA,IAASzlB,EAAKqN,QAAQE,cAAa7K,OAAS,IAIpGvC,KAAKilB,eAAiBjlB,KAAKilB,eAAe1hB,OAAO1D,EAAKqN,QAAQE,aAG1DpN,KAAKiZ,MAAMkM,eAAe5iB,OAAS,GAMvCvC,KAAKgc,SAAS,CACVmJ,eAAgBnlB,KAAKilB,eAAiBjlB,KAAKilB,eAAeI,QAAoB,QApE1F,CAAArjB,IAAA,SAAAC,MAAA,WAyEa,IAAAoR,EAAArT,KAEL,OACIga,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,oBACXR,EAAA3N,EAAA4N,cAAA,mCAGAD,EAAA3N,EAAA4N,cAAA,WACKja,KAAKiZ,MAAMkM,gBAAkBnlB,KAAKiZ,MAAMkM,eAAe5iB,OAAS,EAE7DyX,EAAA3N,EAAA4N,cAACQ,EAAD,CACIf,eAAgB,GAChBF,cAAexZ,KAAKiZ,MAAMkM,eAC1BvL,yBAA0B5Z,KAAKulB,kBAAkBhI,KAAKvd,QAE1D,MAIRga,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKhC,KAAKyb,SAEPzb,KAAKiZ,MAAMiM,YAAY1c,IAAI,SAAArB,GAAC,OAAI6S,EAAA3N,EAAA4N,cAAA,OAAKjY,IAAKqR,EAAKoI,SAAUtU,WA9FjF4d,EAAA,CAAsC5K,aCJzBqL,GAAb,SAAA9F,GAEI,SAAA8F,EAAYxM,EAAcC,GAAe,OAAAnZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAwlB,GAAA1lB,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA0lB,GAAA3f,KAAA7F,KAC/BgZ,EAAOC,IAHrB,OAAAnZ,OAAAkG,EAAA,EAAAlG,CAAA0lB,EAAA9F,GAAA5f,OAAAiC,EAAA,EAAAjC,CAAA0lB,EAAA,EAAAxjB,IAAA,oBAAAC,MAAA,eAAAD,IAAA,SAAAC,MAAA,WAUa,IAAAyD,EAAA1F,KAEGylB,EAAYzlB,KAAKgZ,MAAjByM,QAYR,OACIzL,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KAEK5V,EAAQqd,kCAAkC,CAACpd,eAAgBmd,IAbrC,WAAM,IAC1BviB,EAAkBwC,EAAKsT,MAAMyM,QAA7BviB,eAEP,OAAuB,IAAnBA,EAA6B,IACV,IAAnBA,EAA6B,KACV,IAAnBA,EAA6B,MAE1B,GAQFyiB,QA7BjBH,EAAA,CAAsClF,IAAMnG,+BCK/ByL,WAAb,SAAAlG,GAEI,SAAAkG,EAAY5M,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4lB,IACpClgB,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAA8lB,GAAA/f,KAAA7F,KAAMgZ,EAAOC,KAERA,MAAQ,CACT4M,cAAexd,EAAQkD,gBAJS7F,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA8lB,EAAAlG,GAAA5f,OAAAiC,EAAA,EAAAjC,CAAA8lB,EAAA,EAAA5jB,IAAA,oBAAAC,MAAA,WAcQkE,EAAU0O,yBAAyB,CAAE/H,QAAS9M,OAE9CA,KAAKgc,SACD,CACI6J,cAAexd,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKgZ,MAAM8M,qBAlB1E,CAAA9jB,IAAA,SAAAC,MAAA,WAuBa,IAGG4jB,EAAkB7lB,KAAKiZ,MAAvB4M,cAER,OACI7L,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,uBACXR,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,cACVxa,KAAKgZ,MAAM8M,eAAejV,aAAa1L,MAE5C6U,EAAA3N,EAAA4N,cAAA,0BACgBD,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,SAASC,SAAU,IAAMhkB,MAAO4jB,EAAc/a,kBAD/E,oBAGgBkP,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,SAASC,SAAU,IAAMhkB,MAAOjC,KAAKgZ,MAAM8M,eAAejV,aAAaC,oBAExGkJ,EAAA3N,EAAA4N,cAAA,wBAEOD,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc/c,YAAYvG,SAF7E,QAGSyX,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc1c,cAAc5G,SAHjF,QAISyX,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc9c,YAAYxG,SAJ/E,QAKSyX,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc7c,aAAazG,SALhF,QAMSyX,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc5c,gBAAgB1G,SANnF,QAOSyX,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc3c,aAAa3G,UAGhFyX,EAAA3N,EAAA4N,cAAA,2BAEOD,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAc/b,yBAFjE,QAGSkQ,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAcvb,uBAHnE,QAIS0P,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAclb,yBAJnE,QAKSqP,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAActb,wBALnE,QAMSyP,EAAA3N,EAAA4N,cAAC8L,GAAA1Z,EAAD,CAAU2Z,OAAO,IAAIC,SAAU,IAAMhkB,MAAO4jB,EAAcpb,uBAtDnF,CAAAzI,IAAA,wBAAAC,MAAA,SA8DiCpC,GAEQ,mBAA7BA,EAAKqN,QAAQE,aACe,iBAA7BvN,EAAKqN,QAAQE,aACgB,mBAA7BvN,EAAKqN,QAAQE,cAEZxG,QAAQC,IAAR,wFAEA7G,KAAKgc,SAAS,CACV6J,cAAexd,EAAQO,cAAc,CAAEC,OAAQ7I,KAAKgZ,MAAM8M,wBAvE1EF,EAAA,CAAyCtF,IAAMnG,YCHlC+L,GAAb,SAAAxG,GAEI,SAAAwG,EAAYlN,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAkmB,IACpCxgB,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAomB,GAAArgB,KAAA7F,KAAMgZ,EAAOC,KASTkN,uBAA4C,SAACtmB,GACjD+G,QAAQC,IAAR,qEAAkFhH,GAClF6F,EAAKsW,SAAS,CAACoK,iBAAkBvmB,EAAKmD,iBATtC0C,EAAKuT,MAAQ,CACTmN,iBAAkB,MAGtBxf,QAAQC,IAAR,wDAAqE,CAAEmS,MAAOA,EAAOC,MAAOA,IAPxDvT,EAF5C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAomB,EAAAxG,GAAA5f,OAAAiC,EAAA,EAAAjC,CAAAomB,EAAA,EAAAlkB,IAAA,oBAAAC,MAAA,WAmBQ2E,QAAQC,IAAR,gEAA6E,CAACmS,MAAOhZ,KAAKgZ,MAAOC,MAAOjZ,KAAKiZ,QAC7GrS,QAAQC,IAAR,wFAEA7G,KAAKgZ,MAAMqN,sBAAsB,CAACC,cAAetmB,KAAKmmB,uBAAuB5I,KAAKvd,UAtB1F,CAAAgC,IAAA,SAAAC,MAAA,WA6BQ,OAFA2E,QAAQC,IAAR,2CAEM7G,KAAKiZ,MAAMmN,iBAKbpM,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACAjE,EAAA3N,EAAA4N,cAAA,0BAAkBja,KAAKiZ,MAAMmN,iBAAiB3a,UAC9CuO,EAAA3N,EAAA4N,cAAA,0BAAkBja,KAAKiZ,MAAMmN,iBAAiBzjB,SAASwC,OANhD,SA9BnB+gB,EAAA,CAA2C5F,IAAMnG,WCwBpCoM,GAAb,SAAA7G,GAME,SAAA6G,EAAYvN,EAAcC,GAAc,IAAAvT,EAAA,OAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAAumB,IACtC7gB,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,KAAAF,OAAA8F,EAAA,EAAA9F,CAAAymB,GAAA1gB,KAAA7F,KAAMgZ,EAAOC,KALPuC,MAAgB,EAOtB9V,EAAKuT,MAAQ,GAEbrS,QAAQC,IAAR,+CAA4D,CAAEmS,MAAOA,EAAOC,MAAOA,IAEnF9S,EAAU0O,yBAAyB,CAAE/H,QAAQhN,OAAAgV,EAAA,EAAAhV,QAAAgV,EAAA,EAAAhV,CAAA4F,MAPPA,EAN1C,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAAymB,EAAA7G,GAAA5f,OAAAiC,EAAA,EAAAjC,CAAAymB,EAAA,EAAAvkB,IAAA,wBAAAC,MAAA,SAmBgCpC,GAC5B+G,QAAQC,IAAR,mEAAgFhH,GAChFG,KAAKwmB,6BAA+B3mB,EAAKymB,gBArB7C,CAAAtkB,IAAA,SAAAC,MAAA,WAwBW,IAAAoR,EAAArT,KAkFP,OACEga,EAAA3N,EAAA4N,cAAA,OAAKO,UAAU,sBACbR,EAAA3N,EAAA4N,cAACwM,GAAD,CAAqBX,eAAgB9lB,KAAKgZ,MAAM0N,aAfhD1M,EAAA3N,EAAA4N,cAACD,EAAA3N,EAAM4R,SAAP,KACEjE,EAAA3N,EAAA4N,cAAA,SAAOO,UAAU,gBACfR,EAAA3N,EAAA4N,cAAA,aACG5G,EAAK2F,MAAM0N,WAAWle,IAAIA,IAAI,SAAAme,GAAG,OApE5BrS,EAoEuCqS,EAjEnD3M,EAAA3N,EAAA4N,cAAA,MAAIjY,IAAKqR,EAAKmI,SAGVlH,EAAO9L,IAAI,SAAAoe,GAAI,OAEb5M,EAAA3N,EAAA4N,cAAA,MAAIjY,IAAKqR,EAAKmI,QACZhB,UAAU,UACVN,GAAE,GAAA3W,OAAK8P,EAAK8L,qBAAqByH,IAEjCC,YACE,SAAC/J,GACClW,QAAQC,IAAR,sDAAmEwM,EAAKmT,8BACpEnT,EAAKmT,+BACP5f,QAAQC,IAAR,iDACAwM,EAAKmT,6BAA6B,CAACxjB,cAAe4jB,MAKxDxI,QAAS,WAAW/K,EAAK2F,MAAM8N,wBAAwBzT,EAAK2F,MAAM8N,uBAAuB,CAAEpW,SAAUkW,KAErGG,OACE,SAACjK,GACCA,EAAEkK,iBACF3T,EAAK4T,WAAW,CAAEC,UAAWpK,EAAG8J,KAAMA,KAI1CO,YACE,SAACrK,GACCzJ,EAAK+T,wBAAwB,CAAEC,MAAOT,EAAMU,UAAW,UACvDxK,EAAEkK,kBAINO,WACE,SAACzK,GACCzJ,EAAK+T,wBAAwB,CAAEC,MAAOT,EAAMU,UAAW,SACvDxK,EAAEkK,mBAQNhN,EAAA3N,EAAA4N,cAACuN,GAAD,CAAkB/B,QAASmB,EAAM5kB,IAAKqR,EAAKmI,UAC1CoL,EAAK/b,WAAamP,EAAA3N,EAAA4N,cAAA,mBAAmB,SAlDnC,IAAC3F,MAwEV0F,EAAA3N,EAAA4N,cAACwN,GAAD,CAAuBpB,sBAAuBhT,EAAKgT,sBAAsB9I,KAAKlK,SApGxF,CAAArR,IAAA,wBAAAC,MAAA,SAkH+BpC,GAA2C,IAI9DuN,EAAgBvN,EAAKqN,QAArBE,YAER,GAAoB,iBAAhBA,EACFpN,KAAKua,mBAGF,GAAoB,0BAAhBnN,EACPpN,KAAK0nB,uBAAuB,CAAEvH,iBAAkBtgB,EAAKqN,QAAQY,uBAG1D,GAAoB,mBAAhBV,EAAkC,CAEzCxG,QAAQC,IAAR,iFAA8FhH,GAFrD,IAIjC4N,EAAgB5N,EAAKqN,QAArBO,YAEJA,GACFzN,KAAK2nB,oBAAoB,CAAEC,cAAena,EAAYnI,oBAGpB,mBAA7BzF,EAAKqN,QAAQE,YACpBpN,KAAK6nB,oBAAoB,CAAED,cAAe/nB,EAAKqN,QAAQY,kBAEnB,qBAA7BjO,EAAKqN,QAAQE,aACS,uCAA7BvN,EAAKqN,QAAQE,aACgB,gCAA7BvN,EAAKqN,QAAQE,aACgB,mCAA7BvN,EAAKqN,QAAQE,aACbpN,KAAK8nB,yBAAyB,CAAEC,mBAAoBloB,EAAKqN,QAAQY,oBAjJvE,CAAA9L,IAAA,sBAAAC,MAAA,SAsJ8BpC,GAC1B,GAAIA,EAAK+nB,cAAe,CACtB,IAAM1I,EAAgB9F,SAASC,eAAerZ,KAAKmf,qBAAqBtf,EAAK+nB,gBAEzE1I,GACFA,EAAcI,UAAUE,IAAI,oBA3JpC,CAAAxd,IAAA,yBAAAC,MAAA,SAgKiCpC,GAC7B,GAAIA,EAAKsgB,iBAAkB,CACzB,IAAMjB,EAAgB9F,SAASC,eAAerZ,KAAKmf,qBAAqBtf,EAAKsgB,mBAEzEjB,GACFA,EAAcI,UAAUE,IAAI,0BArKpC,CAAAxd,IAAA,2BAAAC,MAAA,SA0KmCpC,GAC/B,GAAIA,EAAKkoB,mBAAoB,CAC3B,IAAM7I,EAAgB9F,SAASC,eAAerZ,KAAKmf,qBAAqBtf,EAAKkoB,qBAEzE7I,GACFA,EAAcI,UAAUC,OAAO,0BA/KvC,CAAAvd,IAAA,sBAAAC,MAAA,SAoL8BpC,GAI1B,GAAIA,EAAK+nB,cAAe,CAItB,IAAM1I,EAAgB9F,SAASC,eAAerZ,KAAKmf,qBAAqBtf,EAAK+nB,gBAE7E,GAAI1I,EAAe,CAGjB,IACQ0I,EAAkB/nB,EAAlB+nB,cAER1I,EAAcI,UAAUE,IAHJ,CAAC,YAAa,aAAc,eAGRoI,EAAc1kB,gBAAkB,EAAI,EAAI0kB,EAAc1kB,eAAiB,IAE/GlD,KAAK8nB,yBAAyB,CAAEC,mBAAoBloB,EAAK+nB,oBAtMjE,CAAA5lB,IAAA,0BAAAC,MAAA,SA2MkCpC,GAI9B,GAFA+G,QAAQC,IAAR,8DAA2EhH,GAEvEA,EAAKwnB,MAAO,CAEdzgB,QAAQC,IAAR,wEAEA,IAAMqY,EAAgB9F,SAASC,eAAerZ,KAAKmf,qBAAqBtf,EAAKwnB,QAEzEnI,IACFtY,QAAQC,IAAR,2EAEuB,SAAnBhH,EAAKynB,UACPpI,EAAcI,UAAUE,IAAI,0BAG5BN,EAAcI,UAAUC,OAAO,8BA5NzC,CAAAvd,IAAA,aAAAC,MAAA,SAmOqBpC,GAEjB+G,QAAQC,IAAR,4DAAyE,CACvEmhB,MAAOnoB,EAAKqnB,UACZN,KAAM/mB,EAAK+mB,KACXze,SAAUtI,EAAKqnB,UAAUhK,aAAa+K,QAAQ,YAC9C7L,cAAevc,EAAKqnB,UAAUhK,aAAa+K,QAAQ,iBACnDC,SAAUroB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,cAI5CpoB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,cAAgB7nB,EAAUW,YAChEf,KAAKmoB,gBAAgBtoB,GACrBG,KAAKua,eAEE1a,EAAKqnB,UAAUhK,aAAa+K,QAAQ,cAAgB7nB,EAAUY,oBACrEhB,KAAKooB,iBAAiBvoB,GAGtB+G,QAAQC,IAAR,sDAAmEhH,EAAKqnB,UAAUhK,aAAa+K,QAAQ,eAtP7G,CAAAjmB,IAAA,mBAAAC,MAAA,SA2P2BpC,GAEvB,IAAMwoB,EAAmDhL,OAAejd,EAAUE,oCAElFsG,QAAQC,IAAR,kEAA+E,CAC7EmhB,MAAOnoB,EAAKqnB,UACZN,KAAM/mB,EAAK+mB,KACXze,SAAUtI,EAAKqnB,UAAUhK,aAAa+K,QAAQ,YAC9C7L,cAAevc,EAAKqnB,UAAUhK,aAAa+K,QAAQ,mBAIrDjoB,KAAKonB,wBAAwB,CAAEC,MAAOxnB,EAAK+mB,KAAMU,UAAW,UAE5De,EACE,CACE7X,OAAQ,CACN8L,YAAY,EACZwD,aAAcwI,SAASzoB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,iBAC3D1L,QAAO,sCAAAhZ,OAAwC1D,EAAK+mB,KAAKnb,SAAlD,KACP0U,iBAAkBtgB,EAAK+mB,UA/QjC,CAAA5kB,IAAA,kBAAAC,MAAA,SAqR0BpC,GAEtB,IAAMwoB,EAAkDhL,OAAejd,EAAUC,mCAiBjF,GAfAuG,QAAQC,IAAR,iEAA8E,CAC5EmhB,MAAOnoB,EAAKqnB,UACZN,KAAM/mB,EAAK+mB,KACXze,SAAUtI,EAAKqnB,UAAUhK,aAAa+K,QAAQ,YAC9C7L,cAAevc,EAAKqnB,UAAUhK,aAAa+K,QAAQ,mBAIjB,OAAvBpoB,EAAK+mB,KAAKjkB,UAAqBF,EAAU8lB,0BACpD,CACE7lB,WAAY7C,EAAK+mB,KACjB4B,YAAa3oB,EAAK+mB,KAAKjkB,SAASC,iBAChC4F,IAAKxI,KAAKgZ,MAAM0N,aAGV,CAER,IAAM+B,EAAU1gB,EAAoBpE,cAAciI,cAChD,CACEzD,SAAWtI,EAAKqnB,UAAUhK,aAAa+K,QAAQ,YAC/CvlB,WAAY7C,EAAK+mB,OAGjB6B,GACF5oB,EAAK+mB,KAAKpa,UAAU,CAAEC,YAAagc,IAEnCJ,EACE,CACE7X,OAAQ,CACN8L,YAAY,EACZF,cAAekM,SAASzoB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,kBAC5D1L,QAAO,mCAAAhZ,OAAqCklB,EAAQ7lB,iBAA7C,WAAAW,OAAuEklB,EAAQtjB,KAA/E,SAKbkjB,EACE,CACE7X,OAAQ,CACN8L,YAAY,EACZF,cAAekM,SAASzoB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,kBAC5D1L,QAAO,8BAMf3V,QAAQC,IAAR,kHACAwhB,EACE,CACE7X,OAAQ,CACN8L,YAAY,EACZF,cAAekM,SAASzoB,EAAKqnB,UAAUhK,aAAa+K,QAAQ,kBAC5D1L,QAAS,8GA9UrB,CAAAva,IAAA,uBAAAC,MAAA,SAqV+BqG,GAC3B,OAAOD,EAAQ8W,qBAAqB7W,OAtVxCie,EAAA,CAAkCjG,IAAMnG,WC1B3BuO,GAAb,SAAA3P,GAAA,SAAA2P,IAAA,IAAAC,EAAAjjB,EAAA5F,OAAAC,EAAA,EAAAD,CAAAE,KAAA0oB,GAAA,QAAAE,EAAAC,UAAAtmB,OAAA1C,EAAA,IAAAoc,MAAA2M,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAjpB,EAAAipB,GAAAD,UAAAC,GAAA,OAAApjB,EAAA5F,OAAA6F,EAAA,EAAA7F,CAAAE,MAAA2oB,EAAA7oB,OAAA8F,EAAA,EAAA9F,CAAA4oB,IAAA7iB,KAAA4O,MAAAkU,EAAA,CAAA3oB,MAAAuD,OAAA1D,MASYkpB,qBAAoD,KAThErjB,EAAA,OAAA5F,OAAAkG,EAAA,EAAAlG,CAAA4oB,EAAA3P,GAAAjZ,OAAAiC,EAAA,EAAAjC,CAAA4oB,EAAA,EAAA1mB,IAAA,oBAAAC,MAAA,WAI2ByB,EAAKC,cAEbqlB,cANnB,CAAAhnB,IAAA,sBAAAC,MAAA,SAWgCpC,GACxBG,KAAK+oB,qBAAuBlpB,EAAKqkB,mBAZzC,CAAAliB,IAAA,yBAAAC,MAAA,SAemCpC,GAC3B+G,QAAQC,IAAR,sEAAmFhH,EAAK6Q,UAEpF1Q,KAAK+oB,sBAAwB/oB,KAAK+oB,qBAAqB/E,qBAAqBnkB,KAlBxF,CAAAmC,IAAA,SAAAC,MAAA,WAqBa,IAAAoR,EAAArT,KAECipB,EAAavlB,EAAKC,cA6FxB,OA5BIqW,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMC,WAAS,EAAC3O,UAAU,6BAA6B4O,aAAa,UAEhEpP,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACXtP,EAAA3N,EAAA4N,cAACsP,EAAD,OAGJvP,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG9O,UAAU,kBACxBR,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMC,WAAS,EAACC,aAAa,UACzBpP,EAAA3N,EAAA4N,cAACuP,GAAD,CAAc9C,WAAYuC,EAAWzb,YAAYhF,IAAKse,uBAAwBzT,EAAKyT,uBAAuBvJ,KAAKlK,OAGvH2G,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG9O,UAAU,oBACxBR,EAAA3N,EAAA4N,cAACwP,GAAD,CACI/G,OAAQuG,EAAWzb,YACnBkc,iBAAkBrW,EAAKyT,uBAAuBvJ,KAAKlK,GACnD4Q,oBAAqB5Q,EAAK4Q,oBAAoB1G,KAAKlK,KAEvD2G,EAAA3N,EAAA4N,cAAC0P,GAAD,OAGJ3P,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG9O,UAAU,mBACxBR,EAAA3N,EAAA4N,cAACuP,GAAD,CAAc9C,WAAYuC,EAAW3b,eAAe9E,YA7GxEkgB,EAAA,CAAmCvO,aCKpByP,oLATX,OACE5P,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,KACElP,EAAA3N,EAAA4N,cAACiP,EAAA,EAAD,CAAMC,WAAS,EAACU,QAAQ,UAAS7P,EAAA3N,EAAA4N,cAAC6P,GAAD,eANvB3P,aCOE4P,QACW,cAA7B1M,OAAO3M,SAASsZ,UAEe,UAA7B3M,OAAO3M,SAASsZ,UAEhB3M,OAAO3M,SAASsZ,SAASC,MACvB,2DCZNC,IAASC,OAAOnQ,EAAA3N,EAAA4N,cAACmQ,GAAD,MAAShR,SAASC,eAAe,SDmI3C,kBAAmBgR,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a385b42d.chunk.js","sourcesContent":["import { CountryMap } from \"../Entities/WorldObjects/CountryMap\";\r\nimport { Ordnance } from \"../Entities/Ordnance\";\r\n\r\nexport abstract class AbstractPlayer {\r\n\r\n    abstract Name: string;\r\n    abstract map: CountryMap;\r\n    abstract declaredWar: boolean;\r\n    \r\n    abstract totalFunctionalPassiveRadarStations: number;\r\n    abstract totalFunctionalActiveRadarStations: number;\r\n    \r\n    abstract totalCausualties: number;\r\n\r\n    public allTargetedOrdnanceItems: Ordnance[];\r\n    public ordnanceItemsArrivingThisTick: Ordnance[];\r\n\r\n    public isHuman: boolean;\r\n\r\n    constructor(args: {isHuman: boolean}) {\r\n        this.isHuman = args.isHuman;\r\n        this.allTargetedOrdnanceItems = [];\r\n        this.ordnanceItemsArrivingThisTick = []; // these are arriving this tick\r\n    }\r\n}","export class Constants {\r\n    \r\n    public static readonly NOTIFY_BUILD_RESULT_CALLBACK_NAME = \"rpsn_notifyBuildDragResult\";\r\n    public static readonly NOTIFY_TARGET_RESULT_CALLBACK_NAME = \"rpsn_notifyTargetResult\";\r\n\r\n    public static readonly MIN_INITIAL_FIGHTERS = 1;\r\n    public static readonly MAX_INITIAL_FIGHTERS = 4;\r\n    public static readonly MIN_INITIAL_BOMBERS = 1;\r\n    public static readonly MAX_INITIAL_BOMBERS = 4;\r\n\r\n    public static readonly MIN_ICBMS = 1;\r\n    public static readonly MAX_ICBMS = 4;\r\n\r\n    public static readonly MIN_SUB_MISSILES = 1;\r\n    public static readonly MAX_SUB_MISSILES = 3;\r\n\r\n    public static readonly BUILD_DROP = \"build\";\r\n    public static readonly TARGET_MISSILE_DROP = \"target\";\r\n\r\n    // The theory is that first strike is devastating, second strike less so and by 3rd strike, survivors are spread out and more likely to survive\r\n    public static readonly FIRST_STRIKE_POPULATION_HIT_PCT = 0.90;\r\n    public static readonly SECOND_STRIKE_POPULATION_HIT_PCT = 0.50;\r\n    public static readonly THIRD_STRIKE_POPULATION_HIT_PCT = 0.25;\r\n\r\n    public static readonly PCT_VISIBLE_SENTIMENT_THRESHOLD = 20;\r\n    public static readonly EXPECTED_BASE_COUNT_FACTOR = 1.75;\r\n\r\n    // Supporting drag and drop on the screen.\r\n    public static readonly DROPTYPE = \"dropType\";\r\n    public static readonly BASETYPE = \"baseType\";\r\n    public static readonly MANIFESTINDEX = \"manifestIndex\";\r\n\r\n    // Base labels\r\n    public static readonly ARMY_BASELABEL = \"Army\";\r\n    public static readonly NAVY_BASELABEL = \"Navy\";\r\n    public static readonly MISSILE_BASELABEL = \"Missile\";\r\n    public static readonly ABM_BASELABEL = \"Abm\";\r\n    public static readonly AIR_BASELABEL = \"Air\";\r\n}\r\n\r\n","\r\nexport class Rng {\r\n\r\n    public static throwDice(args: {hiNumberMinus1: number}) {\r\n\r\n        //Math.floor(Math.random() * 10);     // returns a random integer from 0 to 9\r\n\r\n        return Math.floor(Math.random() * args.hiNumberMinus1);     \r\n\r\n    }\r\n\r\n    public static pickRandomFromArray(args: {sourceArray: any[]}) {\r\n\r\n        if (! args.sourceArray) throw \"Rng.ts: pickRandomFromArray: error, source array is null or undefined.\";\r\n        if (args.sourceArray.length === 0) throw \"Rng.ts: pickRandomFromArray: error, source array is empty.\";\r\n\r\n\r\n        return (args.sourceArray[this.throwDice({hiNumberMinus1: args.sourceArray.length})]);\r\n        \r\n    }\r\n}","import { Game } from \"../Entities/gameEntity\";\r\nimport { CountryMap } from \"../Entities/WorldObjects/CountryMap\";\r\nimport { MapLocation } from \"../Entities/MapObjects/MapLocation\";\r\nimport { PlaceableObjectLabels } from \"../Entities/MapObjects/PlaceableObjects\";\r\nimport { MilitaryBaseTypeLabels } from \"../Entities/WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { Ordnance } from \"../Entities/Ordnance\";\r\nimport { Constants } from \"./constants\";\r\nimport { Rng } from \"../Utils/Rng\";\r\n\r\nexport type strategicMoveOptions = \"Build\" | \"Spy\" | \"Declare War\" | \"Skip\" | \"Activate\" | \"Sue for Peace\" | \"Surrender\";\r\nexport type tacticalMoveOptions = MilitaryBaseTypeLabels | \"Activate Base\";\r\n\r\nexport interface allowedMoves {\r\n    strategicOptions: strategicMoveOptions[];\r\n    tacticalOptions: tacticalMoveOptions[];\r\n}\r\n\r\nexport interface nuclearStrikeDamage {\r\n    populationKilled: number;\r\n    strikeCount: number; // max of 3\r\n    attackingOrdnance: Ordnance;\r\n}\r\n\r\nexport class GameRules {\r\n\r\n    public static readonly GameStartYear = 1945;\r\n\r\n    public static canPlaceItemAtMapLocation(args: { map: CountryMap, atLocation: MapLocation, itemToCheck: PlaceableObjectLabels }): boolean {\r\n\r\n        if (args.atLocation.Contents) {\r\n            return args.atLocation.Contents.WorldObjectLabel === \"Rural\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public static getMissileArrivalTicks() {\r\n        const rNbr = Rng.throwDice({hiNumberMinus1: 99});\r\n        if (rNbr < 33) return 1;\r\n        if (rNbr < 85) return 2;\r\n        return 3;\r\n    }\r\n\r\n    public static getTotalBasesAllowedToBuild(args: { basedOnStrategicChoice: strategicMoveOptions | null }): number {\r\n\r\n        if (args.basedOnStrategicChoice === \"Build\") return 2;\r\n        if (args.basedOnStrategicChoice === \"Spy\") return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    public static getNuclearStrikePopulationKilled(args: { onMapLocation: MapLocation }): number {\r\n\r\n        const popStrikePctLookup: number[] = [Constants.FIRST_STRIKE_POPULATION_HIT_PCT, Constants.SECOND_STRIKE_POPULATION_HIT_PCT, Constants.THIRD_STRIKE_POPULATION_HIT_PCT];\r\n        const popKilled = args.onMapLocation.Contents ? args.onMapLocation.Contents.Population * popStrikePctLookup[args.onMapLocation.nuclearStrikes -1] : 0;\r\n\r\n        return popKilled;\r\n    }\r\n\r\n    public static getAllowedMoves(): allowedMoves {\r\n\r\n        const peacetimeStrategicOptions: strategicMoveOptions[] = [\"Build\", \"Spy\", \"Declare War\", \"Skip\"];\r\n        const warTimeMoveOptions: strategicMoveOptions[] = [\"Activate\", \"Sue for Peace\", \"Surrender\"];\r\n        const pre1962TacticalOptions: tacticalMoveOptions[] = [\"Army\", \"Navy\", \"Air\", \"Missile\", \"Radar\", \"ABM\"];\r\n        const post1962TacticalOptions: tacticalMoveOptions[] = pre1962TacticalOptions.concat(\"ABM\");\r\n        const warTimeTacticalOptions: tacticalMoveOptions[] = [\"Activate Base\"];\r\n\r\n        const game = Game.getInstance();\r\n\r\n        const currentPeacetimeTacticalOptions = game.gameYear > 1962 ? post1962TacticalOptions : pre1962TacticalOptions;\r\n\r\n        const getPeaceTimeOptions = (): allowedMoves => (\r\n            {\r\n                strategicOptions: peacetimeStrategicOptions,\r\n                tacticalOptions: currentPeacetimeTacticalOptions\r\n            });\r\n\r\n        const getWartimeOptions = (): allowedMoves => (\r\n            {\r\n                strategicOptions: warTimeMoveOptions,\r\n                tacticalOptions: warTimeTacticalOptions\r\n            });\r\n\r\n        const result = game.isPeacetime ? getPeaceTimeOptions() : getWartimeOptions();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public static getLocationDamage(args: { attackedBy: Ordnance, locationAttacked: MapLocation }): nuclearStrikeDamage {\r\n\r\n        const result: nuclearStrikeDamage = {\r\n            strikeCount: args.locationAttacked.nuclearStrikes < 3 ? args.locationAttacked.nuclearStrikes += 1 : 3,\r\n            populationKilled: this.getNuclearStrikePopulationKilled({onMapLocation: args.locationAttacked}),\r\n            attackingOrdnance: args.attackedBy\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n}","import { MapLocation } from \"./MapObjects/MapLocation\";\r\nimport { OrdnanceCarryingBase } from \"./WorldObjects/Bases/AbstractMilitaryBase\";\r\n\r\nexport type OrdnanceTypeLabels = \"ICBM\" | \"Submarine Missile\" | \"Bomber\";\r\n\r\nexport class Ordnance {\r\n\r\n    public myTarget: MapLocation | null;\r\n\r\n    public remainingTicksBeforeStriking: number;\r\n    public wasConsumed: boolean; \r\n    public static nextOrdnanceID: number = 0;\r\n    public myID: number;\r\n    public myBase: OrdnanceCarryingBase;\r\n    public myWorldLabel: OrdnanceTypeLabels;\r\n    public wasIntercepted: boolean;\r\n\r\n    constructor(args: {parentBase: OrdnanceCarryingBase}) {\r\n\r\n        this.myTarget = null;\r\n        this.remainingTicksBeforeStriking = 0;\r\n        this.wasConsumed = false;\r\n        this.myID = Ordnance.nextOrdnanceID++;\r\n        this.myBase = args.parentBase;\r\n        this.wasIntercepted = false;\r\n        \r\n        if (args.parentBase.WorldObjectLabel === \"Missile\") {\r\n            this.myWorldLabel = \"ICBM\";\r\n        }\r\n        else if (args.parentBase.WorldObjectLabel === \"Navy\") {\r\n            this.myWorldLabel = \"Submarine Missile\";\r\n        }\r\n        else {\r\n            this.myWorldLabel = \"Bomber\";\r\n        }\r\n    }\r\n}","\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { Ordnance } from \"../../Ordnance\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\nimport { Rng } from \"../../../Utils/Rng\";\r\n\r\nexport interface MilitaryBaseProperties {\r\n    Name: string;\r\n    WorldObjectLabel: MilitaryBaseTypeLabels;\r\n    isReceivingOrders: boolean;\r\n    myMapLocation: MapLocation;\r\n    yearBuilt: number;\r\n\r\n}\r\n\r\nexport interface MilitaryBaseActions {\r\n    activate: () => void;\r\n}\r\n\r\nexport interface OrdnanceCarryingBase {\r\n    ordnance: Ordnance[];\r\n    WorldObjectLabel: MilitaryBaseTypeLabels;\r\n}\r\n\r\nexport abstract class AbstractMilitaryBase implements MilitaryBaseProperties, MilitaryBaseActions\r\n{\r\n\r\n    public Name: string = \"\";\r\n    public isReceivingOrders: boolean;\r\n    public myMapLocation: MapLocation;\r\n    public Population: number = Rng.throwDice({hiNumberMinus1: 10000}) + 10000;\r\n    public wasDestroyed: boolean = false;\r\n    public yearBuilt: number;\r\n\r\n\r\n    // Having a \"BaseType\" label here helps some code work a little more generically since \"typeof [any base object]\" returns \"object\"\r\n    // This gives us a shot at treating bases a little more generically. Look at MilitaryBaseFactory.ts for an example.\r\n    public abstract WorldObjectLabel: MilitaryBaseTypeLabels;\r\n\r\n    public activate() {\r\n        this.isReceivingOrders = true;\r\n    };\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        this.isReceivingOrders = false;\r\n        this.myMapLocation = args.atLocation;\r\n        this.yearBuilt = args.yearBuilt;\r\n    }\r\n    \r\n}\r\n","import { AbstractMilitaryBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\n\r\nexport class AbmBase extends AbstractMilitaryBase {\r\n\r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"ABM\";\r\n\r\n    public totalMissiles: number;\r\n    public isTracking: boolean;\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        super(args);\r\n\r\n        this.totalMissiles = 0;\r\n        this.isTracking = false;\r\n        this.isReceivingOrders = false;\r\n    }\r\n\r\n}","import { GameLogic } from \"../Game/GameLogic\";\r\n\r\nexport class RadarBaseNames {\r\n\r\n    private static availableRadarBaseNames: string[] = [\r\n        \"Hertz\",\r\n        \"Maxwell\",\r\n        \"Hülsmeyer\",\r\n        \"Marconi\",\r\n        \"Franklin\",\r\n        \"Watt\",\r\n        \"Tizard\",\r\n        \"Wimperis\",\r\n        \"Wilkins\",\r\n        \"Bowan\",\r\n        \"Rowe\",\r\n        \"Lindemann\",\r\n        \"Dowding\",\r\n        \"Randall\",\r\n        \"Boot\",\r\n        \"Lewis\",\r\n        \"Butement\",\r\n        \"Pollard\",\r\n        \"Worlledge\",\r\n        \"Paris\",\r\n        \"Erbslöh\",\r\n        \"Willisen\",\r\n        \"Hollmann\",\r\n        \"Schultes\",\r\n        \"Taylor\",\r\n        \"Young\",\r\n        \"Hyland\",\r\n        \"Breit\",\r\n        \"Tuve\",\r\n        \"Page\",\r\n        \"Popov\",\r\n        \"Oshchepkov\",\r\n        \"Lobanov\"\r\n    ];\r\n\r\n    public static getRadarBaseName(): string {\r\n\r\n        const getNameReslt = GameLogic.getNameForNameableItem({fromNamesArr: this.availableRadarBaseNames});\r\n        this.availableRadarBaseNames = getNameReslt.allOtherNames;\r\n        return getNameReslt.baseName;\r\n    }\r\n\r\n}\r\n ","import { AbstractMilitaryBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\nimport { nameableGAmeObject } from \"../../nameableGameObject\";\r\nimport { GameLogComponent } from \"../../../Components/GameLogComponent\";\r\nimport { GameLogic } from \"../../../Game/GameLogic\";\r\nimport { RadarBaseNames } from \"../../../Data/RadarBaseNames\";\r\n\r\nexport class RadarBase extends AbstractMilitaryBase implements nameableGAmeObject {\r\n \r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"Radar\";\r\n\r\n    public modeOfOperation: \"Inactive\" | \"Active\" | \"Passive\";\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        super(args);\r\n\r\n        this.modeOfOperation = \"Inactive\";\r\n\r\n        this.Name = RadarBaseNames.getRadarBaseName();\r\n        console.log(\"RadarBase.ts: ctor: got a radar base name:\", this.Name)\r\n    }\r\n\r\n    public setModeOfOperation(args: {mode: \"Active\" | \"Passive\"}) {\r\n        this.modeOfOperation = args.mode;\r\n    }\r\n}","import { AbstractMilitaryBase, OrdnanceCarryingBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { GameLogic } from \"../../../Game/GameLogic\";\r\nimport { Ordnance } from \"../../Ordnance\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\n\r\nexport class MissileBase extends AbstractMilitaryBase implements OrdnanceCarryingBase {\r\n\r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"Missile\";\r\n    public : number = 1;\r\n\r\n    public ordnance: Ordnance[];\r\n    \r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        super(args);\r\n\r\n        this.ordnance = [];\r\n\r\n        this.isReceivingOrders = false;\r\n    }\r\n\r\n    public isAllOrdnanceTargeted(): boolean {\r\n        return ! this.ordnance.some(m => m.myTarget === null);\r\n    }\r\n \r\n    public activate() {\r\n        GameLogic.activateMissileBase({forBase: this});\r\n    }\r\n    \r\n}","import { AbstractMilitaryBase, OrdnanceCarryingBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { Constants } from \"../../../Game/constants\";\r\nimport { Rng } from \"../../../Utils/Rng\";\r\nimport { Ordnance } from \"../../Ordnance\";\r\nimport { GameLogic } from \"../../../Game/GameLogic\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\n\r\nexport class AirBase extends AbstractMilitaryBase implements OrdnanceCarryingBase{\r\n\r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"Air\";\r\n\r\n    public ordnance: Ordnance[];\r\n    public totalFighters: number;\r\n\r\n    public isFlying: boolean;\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        super(args);\r\n\r\n        this.ordnance = [];\r\n        this.totalFighters = 0;\r\n        this.isFlying = false;\r\n    }\r\n\r\n    public activate(): void {\r\n\r\n        console.log(`AirBase.ts: activate: entering.`);\r\n        \r\n        GameLogic.activateAirBase({forBase: this});\r\n\r\n        // this.isReceivingOrders = true;\r\n\r\n        // // this.ordnance = Constants.MAX_INITIAL_BOMBERS + Rng.throwDice({hiNumberMinus1: Constants.MAX_INITIAL_BOMBERS -1});\r\n        // this.totalFighters = Constants.MAX_INITIAL_FIGHTERS + Rng.throwDice({hiNumberMinus1: Constants.MAX_INITIAL_FIGHTERS -1});\r\n        \r\n    }\r\n\r\n\r\n    public isAllOrdnanceTargeted(): boolean {\r\n        return ! this.ordnance.some(b => b.myTarget === null);\r\n    }\r\n \r\n\r\n\r\n}","import { AbstractMilitaryBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\n\r\nexport class ArmyBase extends AbstractMilitaryBase {\r\n\r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"Army\";\r\n    public isDecamped: boolean;\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n    \r\n        super(args);\r\n\r\n        this.isReceivingOrders = false;\r\n        this.isDecamped = false;\r\n    \r\n    }\r\n\r\n    // public activate(): void {\r\n    //     throw (\"Not yet implemented.\");\r\n    // }\r\n\r\n}","import { AbstractMilitaryBase, OrdnanceCarryingBase } from \"./AbstractMilitaryBase\";\r\nimport { MilitaryBaseTypeLabels } from \"./MilitaryBaseTypes\";\r\nimport { GameLogic } from \"../../../Game/GameLogic\";\r\nimport { Ordnance } from \"../../Ordnance\";\r\nimport { MapLocation } from \"../../MapObjects/MapLocation\";\r\nimport { Rng } from \"../../../Utils/Rng\";\r\n\r\nexport class NavyBase extends AbstractMilitaryBase implements OrdnanceCarryingBase {\r\n\r\n    public readonly WorldObjectLabel: MilitaryBaseTypeLabels = \"Navy\";\r\n\r\n    public ordnance: Ordnance[];\r\n\r\n    constructor(args: {atLocation: MapLocation, yearBuilt: number}) {\r\n        super(args);\r\n        this.isReceivingOrders = false;\r\n        this.ordnance = [];\r\n    }\r\n\r\n    public isAllOrdnanceTargeted(): boolean {\r\n        return ! this.ordnance.some(m => m.myTarget === null);\r\n    }\r\n \r\n    public activate() {\r\n        GameLogic.activateNavyBase({forBase: this});\r\n    }\r\n    \r\n\r\n}","import { MilitaryBaseTypeLabels } from \"../Entities/WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { AbmBase } from \"../Entities/WorldObjects/Bases/AbmBase\";\r\nimport { RadarBase } from \"../Entities/WorldObjects/Bases/RadarBase\";\r\nimport { MissileBase } from \"../Entities/WorldObjects/Bases/MissileBase\";\r\nimport { AirBase } from \"../Entities/WorldObjects/Bases/AirBase\";\r\nimport { ArmyBase } from \"../Entities/WorldObjects/Bases/ArmyBase\";\r\nimport { AbstractMilitaryBase } from \"../Entities/WorldObjects/Bases/AbstractMilitaryBase\";\r\nimport { NavyBase } from \"../Entities/WorldObjects/Bases/NavyBase\";\r\nimport { MapLocation } from \"../Entities/MapObjects/MapLocation\";\r\nimport { Game } from \"../Entities/gameEntity\";\r\n\r\nexport interface MilitaryBaseProperties {\r\n\r\n}\r\nexport class MilitaryBaseFactory {\r\n\r\n    private static instance: MilitaryBaseFactory;\r\n\r\n    private readonly msh = \"MilitaryBaseFactory: \";\r\n\r\n    private nextBaseID: number = 0;\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    public static getInstance() : MilitaryBaseFactory {\r\n\r\n        if (!this.instance) {\r\n            this.instance = new MilitaryBaseFactory();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    // private newName(args: {forBase: AbstractMilitaryBase}) {\r\n    //     // console.log(`${this.msh}: newName: typeof base:`, args.forBase.WorldObjectLabel);\r\n    //     return 'xyzzy';\r\n    // }\r\n\r\n    public createNewBase(args: {baseType: MilitaryBaseTypeLabels, atLocation: MapLocation}) {\r\n\r\n        console.log(`MilitaryBaseFactory: createNewBase: entering with args:`, {args: args});\r\n        \r\n        const game = Game.getInstance();\r\n\r\n        const newBaseProperties = {atLocation: args.atLocation, yearBuilt: game.gameYear};\r\n\r\n        switch(args.baseType) {\r\n\r\n            case \"ABM\": {\r\n                const newBase = new AbmBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n            case \"Radar\": {\r\n                const newBase = new RadarBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n            case \"Navy\": {\r\n                const newBase = new NavyBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n            case \"Missile\": {\r\n                const newBase = new MissileBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n            case \"Air\": {\r\n                const newBase = new AirBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n            case \"Army\": {\r\n                const newBase = new ArmyBase(newBaseProperties);\r\n                // newBase.Name = this.newName({forBase: newBase});\r\n                return newBase;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","import { MapLocation } from \"../Entities/MapObjects/MapLocation\";\r\nimport { CountryMap } from \"../Entities/WorldObjects/CountryMap\";\r\nimport { AbmBase } from \"../Entities/WorldObjects/Bases/AbmBase\";\r\nimport { MissileBase } from \"../Entities/WorldObjects/Bases/MissileBase\";\r\nimport { NavyBase } from \"../Entities/WorldObjects/Bases/NavyBase\";\r\nimport { RadarBase } from \"../Entities/WorldObjects/Bases/RadarBase\";\r\nimport { MilitaryBaseTypeLabels, MilitaryBaseTypes, NonNullMilitaryBaseTypes } from \"../Entities/WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { AirBase } from \"../Entities/WorldObjects/Bases/AirBase\";\r\nimport { OrdnanceCarryingBase, AbstractMilitaryBase } from \"../Entities/WorldObjects/Bases/AbstractMilitaryBase\";\r\nimport { ArmyBase } from \"../Entities/WorldObjects/Bases/ArmyBase\";\r\nimport { MilitaryBaseFactory } from \"../Factories/MilitaryBaseFactory\";\r\n\r\nexport interface countrySummary {\r\n    allAbmBases: AbmBase[];\r\n    allRadarBases: RadarBase[];\r\n    allArmyBases: ArmyBase[];\r\n    allNavyBases: NavyBase[];\r\n    allAirBases: AirBase[];\r\n    allMissileBases: MissileBase[];\r\n    targetedMapLocations: MapLocation[];\r\n    totalAbmMissilesOnLine: number;\r\n    totalICBMsOnLine: number;\r\n    totalSubMissilesOnLine: number;\r\n    totalPassiveRadarStationsOnLine: number;\r\n    totalActiveRadarStationsOnLine: number;\r\n    totalBombersInFlight: number;\r\n    totalFightersOnPatrol: number;\r\n    totalPopulation: number;\r\n}\r\n\r\nexport class MapUtil {\r\n\r\n    public static readonly initialSummary: countrySummary = {\r\n        allAbmBases: [],\r\n        allRadarBases: [],\r\n        allAirBases: [],\r\n        allArmyBases: [],\r\n        allNavyBases: [],\r\n        allMissileBases: [],\r\n        targetedMapLocations: [],\r\n        totalAbmMissilesOnLine: 0,\r\n        totalICBMsOnLine: 0,\r\n        totalSubMissilesOnLine: 0,\r\n        totalPassiveRadarStationsOnLine: 0,\r\n        totalActiveRadarStationsOnLine: 0,\r\n        totalBombersInFlight: 0,\r\n        totalFightersOnPatrol: 0,\r\n        totalPopulation: 0\r\n        }\r\n\r\n\r\n    public static GetMapLocationSingleCharacterCode(args: { forMapLocation: MapLocation }) {\r\n\r\n        if (args.forMapLocation.Contents === null) {\r\n            return \"Empty\";\r\n        }\r\n\r\n        switch (args.forMapLocation.Contents.WorldObjectLabel) {\r\n            case \"ABM\": return \"A\";\r\n            case \"Air\": return \"B\";\r\n            case \"Army\": return \"T\";\r\n            case \"City\": return \"City\";\r\n            case \"Missile\": return \"M\";\r\n            case \"Navy\": return \"S\";\r\n            case \"Radar\": return \"R\";\r\n            case \"Rural\": return \"•\";\r\n            case \"Town\": return \"T\";\r\n       }\r\n\r\n        return \"empty\";\r\n    }\r\n\r\n    public static isWO = (l: MapLocation, which: MilitaryBaseTypeLabels) => l.Contents && l.Contents.WorldObjectLabel === which;\r\n    public static isAirBase = (l: MapLocation) => MapUtil.isWO(l, \"Air\");\r\n    public static isArmyBase = (l: MapLocation) => MapUtil.isWO(l, \"Army\");\r\n    public static isMissileBase = (l: MapLocation) => MapUtil.isWO(l, \"Missile\");\r\n    public static isNavyBase = (l: MapLocation) => MapUtil.isWO(l, \"Navy\");\r\n    public static isRadarBase = (l: MapLocation) => MapUtil.isWO(l, \"Radar\");\r\n    public static isAbmBase = (l: MapLocation) => MapUtil.isWO(l, \"ABM\");\r\n\r\n    public static applyFunctionToCountryMap<T>(args: {map: CountryMap, xformFunc: (ml : MapLocation) => void}) {\r\n\r\n        for (let i = 0; i < args.map.map.length; i++) {\r\n            for (let j = 0; j < args.map.map[i].length;j++) {\r\n                args.xformFunc(args.map.map[i][j]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static allMilitaryBases(args: {forMap: CountryMap}): NonNullMilitaryBaseTypes[] {\r\n\r\n        const summary = this.getMapSummary({forMap: args.forMap});\r\n\r\n        const onlyMilitaryBases = ([] as NonNullMilitaryBaseTypes[]).concat(\r\n            summary.allAbmBases,\r\n            summary.allAirBases,\r\n            summary.allArmyBases,\r\n            summary.allMissileBases,\r\n            summary.allNavyBases,\r\n            summary.allRadarBases\r\n            );\r\n\r\n        return onlyMilitaryBases;\r\n\r\n    }\r\n\r\n    public static getMapSummary(args: { forMap: CountryMap }): countrySummary {\r\n\r\n        const isPassiveRader = (loc: MapLocation) => MapUtil.isRadarBase(loc) && (loc.Contents as RadarBase).modeOfOperation === \"Passive\";\r\n        const isActiveRader = (loc: MapLocation) => MapUtil.isRadarBase(loc) && (loc.Contents as RadarBase).modeOfOperation === \"Active\";\r\n\r\n        // function to,  = \"allTO\" = \"all tageted ordnance\"\r\n        const allTO = (base: OrdnanceCarryingBase) => base.ordnance.filter(o => o.myTarget && o.wasConsumed === false);\r\n        const ttlTtO = (base: OrdnanceCarryingBase) => allTO(base).length;\r\n\r\n        const mu = MapUtil;\r\n\r\n        const addLocationToSummary = (mapLoc: MapLocation, addToSummary: countrySummary) =>\r\n            mapLoc.Contents\r\n                ? (\r\n                    {\r\n                        allAbmBases: mu.isAbmBase(mapLoc) ? addToSummary.allAbmBases.concat(mapLoc.Contents as AbmBase) : addToSummary.allAbmBases,\r\n                        totalAbmMissilesOnLine: mu.isAbmBase(mapLoc) ? addToSummary.totalAbmMissilesOnLine += (mapLoc.Contents as AbmBase).totalMissiles : addToSummary.totalAbmMissilesOnLine,\r\n                        allRadarBases: mu.isRadarBase(mapLoc) ? addToSummary.allRadarBases.concat(mapLoc.Contents as RadarBase) : addToSummary.allRadarBases,\r\n                        totalPassiveRadarStationsOnLine: isPassiveRader(mapLoc) ? addToSummary.totalPassiveRadarStationsOnLine += 1 : addToSummary.totalPassiveRadarStationsOnLine,\r\n                        totalActiveRadarStationsOnLine: isActiveRader(mapLoc) ? addToSummary.totalActiveRadarStationsOnLine += 1 : addToSummary.totalActiveRadarStationsOnLine,\r\n                        allArmyBases: mu.isArmyBase(mapLoc) ? addToSummary.allArmyBases.concat(mapLoc.Contents as ArmyBase) : addToSummary.allArmyBases,\r\n                        allAirBases: mu.isAirBase(mapLoc) ? addToSummary.allAirBases.concat(mapLoc.Contents as AirBase) : addToSummary.allAirBases,\r\n                        totalBombersInFlight: mu.isAirBase(mapLoc) ? addToSummary.totalBombersInFlight += ttlTtO(mapLoc.Contents as AirBase) : addToSummary.totalBombersInFlight,\r\n                        totalFightersOnPatrol: mu.isAirBase(mapLoc) ? addToSummary.totalFightersOnPatrol += (mapLoc.Contents as AirBase).totalFighters : addToSummary.totalFightersOnPatrol,\r\n                        allMissileBases: mu.isMissileBase(mapLoc) ? addToSummary.allMissileBases.concat(mapLoc.Contents as MissileBase) : addToSummary.allMissileBases,\r\n                        totalICBMsOnLine: mu.isMissileBase(mapLoc) ? addToSummary.totalICBMsOnLine += ttlTtO(mapLoc.Contents as MissileBase) : addToSummary.totalICBMsOnLine,\r\n                        allNavyBases: mu.isNavyBase(mapLoc) ? addToSummary.allNavyBases.concat(mapLoc.Contents as NavyBase) : addToSummary.allNavyBases,\r\n                        totalSubMissilesOnLine: mu.isNavyBase(mapLoc) ? addToSummary.totalSubMissilesOnLine += ttlTtO(mapLoc.Contents as NavyBase) : addToSummary.totalSubMissilesOnLine,\r\n                        targetedMapLocations: mapLoc.isTargeted ? addToSummary.targetedMapLocations.concat(mapLoc) : addToSummary.targetedMapLocations,\r\n                        totalPopulation: addToSummary.totalPopulation += mapLoc.Contents.Population\r\n                    } as countrySummary\r\n                )\r\n                : addToSummary\r\n            ;\r\n\r\n        const mapRowSummary = (row: MapLocation[]) =>\r\n            row.reduce((prev, curr) => addLocationToSummary(curr, prev), this.initialSummary);\r\n\r\n        const addTwoSummaries = (s1: countrySummary, s2: countrySummary) => (\r\n            {\r\n                allAbmBases: s1.allAbmBases.concat(s2.allAbmBases),\r\n                totalAbmMissilesOnLine: s1.totalAbmMissilesOnLine + s2.totalAbmMissilesOnLine,\r\n                allRadarBases: s1.allRadarBases.concat(s2.allRadarBases),\r\n                allAirBases: s1.allAirBases.concat(s2.allAirBases),\r\n                allArmyBases: s1.allArmyBases.concat(s2.allArmyBases),\r\n                allMissileBases: s1.allMissileBases.concat(s2.allMissileBases),\r\n                allNavyBases: s1.allNavyBases.concat(s2.allNavyBases),\r\n                targetedMapLocations: s1.targetedMapLocations.concat(s2.targetedMapLocations),\r\n                totalICBMsOnLine: s1.totalICBMsOnLine + s2.totalICBMsOnLine,\r\n                totalSubMissilesOnLine: s1.totalSubMissilesOnLine + s2.totalSubMissilesOnLine,\r\n                totalPassiveRadarStationsOnLine: s1.totalPassiveRadarStationsOnLine + s2.totalPassiveRadarStationsOnLine,\r\n                totalActiveRadarStationsOnLine: s1.totalActiveRadarStationsOnLine + s2.totalActiveRadarStationsOnLine,\r\n                totalBombersInFlight: s1.totalBombersInFlight + s2.totalBombersInFlight,\r\n                totalFightersOnPatrol: s1.totalFightersOnPatrol + s2.totalFightersOnPatrol,\r\n                totalPopulation: s1.totalPopulation + s2.totalPopulation\r\n            } as countrySummary\r\n        );\r\n\r\n        const allIn = args.forMap.map.reduce(\r\n            (runningSummary, currentMapRow) => addTwoSummaries(runningSummary, mapRowSummary(currentMapRow)), this.initialSummary\r\n        );\r\n\r\n        // somehow, the reduce stuff up above is over-calculating the population.\r\n        let runningPop = 0;\r\n        for (let i = 0; i < args.forMap.map.length; i++) {\r\n            for (let j = 0; j < args.forMap.map[i].length; j++) {\r\n                const {Contents} = args.forMap.map[i][j];\r\n                if (Contents !== null) {\r\n                    runningPop += (Contents.Population);\r\n                    }\r\n                // console.log(`[${i}] [${j}]: pop: ${runningPop}`);\r\n            }\r\n        }\r\n        allIn.totalPopulation = runningPop;\r\n\r\n        // console.log(`MapUtils: getMapSummary: allIn:`, { map: args.forMap, allIn: allIn, population: allIn.totalPopulation, name: args.forMap.owner });\r\n\r\n        return allIn;\r\n    }\r\n\r\n    public static getMapLocationHtmlID(forMapLocation: MapLocation) {\r\n        return `MapLocation_${forMapLocation.uniqueID}`;\r\n    }\r\n \r\n    public static createTestBases(args: {onMap: CountryMap}) {\r\n\r\n        const mLoc = args.onMap.map[0][7];\r\n        const m = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Missile\", atLocation: mLoc});\r\n        const rLoc = args.onMap.map[0][1];\r\n        const r = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Radar\", atLocation: rLoc});\r\n        const rLoc2 = args.onMap.map[0][2];\r\n        const r2 = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Radar\", atLocation: rLoc2});\r\n        const bLoc = args.onMap.map[0][3];\r\n        const b = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Air\", atLocation: bLoc});\r\n        const nLoc = args.onMap.map[0][4];\r\n        const n = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Navy\", atLocation: nLoc});\r\n        const aLoc = args.onMap.map[0][5];\r\n        const a = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"Army\", atLocation: aLoc});\r\n        const abmLoc = args.onMap.map[0][6];\r\n        const abm = MilitaryBaseFactory.getInstance().createNewBase({baseType: \"ABM\", atLocation: abmLoc});\r\n\r\n        if (m) {mLoc.placeItem({itemToPlace: m});}\r\n        if (r) {rLoc.placeItem({itemToPlace: r});}\r\n        if (r2) {rLoc2.placeItem({itemToPlace: r2});}\r\n        if (b) {bLoc.placeItem({itemToPlace: b});}\r\n        if (n) {nLoc.placeItem({itemToPlace: n});}\r\n        if (a) {aLoc.placeItem({itemToPlace: a});}\r\n        if (abm) {abmLoc.placeItem({itemToPlace: abm});}\r\n\r\n\r\n    }\r\n}","\r\nimport { Game } from \"../Entities/gameEntity\";\r\nimport { AbstractPlayer } from \"./AbstractPlayer\";\r\nimport { AbmBase } from \"../Entities/WorldObjects/Bases/AbmBase\";\r\nimport { GameRules, nuclearStrikeDamage } from \"./GameRules\";\r\nimport { Rng } from \"../Utils/Rng\";\r\nimport { ArmyBase } from \"../Entities/WorldObjects/Bases/ArmyBase\";\r\nimport { MissileBase } from \"../Entities/WorldObjects/Bases/MissileBase\";\r\nimport { Constants } from \"./constants\";\r\nimport { NavyBase } from \"../Entities/WorldObjects/Bases/NavyBase\";\r\nimport { Ordnance } from \"../Entities/Ordnance\";\r\nimport { MapLocation } from \"../Entities/MapObjects/MapLocation\";\r\nimport { AirBase } from \"../Entities/WorldObjects/Bases/AirBase\";\r\nimport { MapUtil } from \"../Utils/MapUtils\";\r\nimport { RadarBase } from \"../Entities/WorldObjects/Bases/RadarBase\";\r\nimport { MilitaryBaseTypes, NonNullMilitaryBaseTypes } from \"../Entities/WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { getNameProcessResult } from \"../Entities/nameableGameObject\";\r\n\r\nexport type gameStateChangeType =\r\n    \"Advance Turn\" |\r\n    \"Base Activated\" |\r\n    \"Bomber was shot down by ABM\" |\r\n    \"Bomber was shot down by Figher\" |\r\n    \"Computer Finished Its Turn\" |\r\n    \"Computer Playing Its Turn\" |\r\n    \"ICBM Intercepted\" |\r\n    \"Location Nuked\" |\r\n    \"Map Location Targeted\" |\r\n    \"no change\" |\r\n    \"Submarine Missile Shot Down By ABM\" |\r\n    \"Tick\" |\r\n    \"War Declared\";\r\n\r\nexport interface gameStateChangeDetails {\r\n    changeLabel: gameStateChangeType;\r\n    relatedLocation?: MapLocation;\r\n    relatedBase?: MilitaryBaseTypes;\r\n}\r\n\r\nexport interface GamestateWatcher {\r\n    handleGamestateChange: (args: { details: gameStateChangeDetails }) => void;\r\n}\r\n\r\n\r\n\r\nexport class GameLogic {\r\n\r\n    private static gameStateWatchers: GamestateWatcher[] = [];\r\n\r\n    public static registerGamestateWatcher(args: { watcher: GamestateWatcher }) {\r\n        this.gameStateWatchers = this.gameStateWatchers.concat(args.watcher);\r\n    }\r\n\r\n    private static notifyGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        // console.log(`GameLogic: notifyGamestateChange(): notifying watchers:`, { watchers: this.gameStateWatchers });\r\n\r\n        this.gameStateWatchers.forEach(gsw => gsw.handleGamestateChange({ details: args.details }));\r\n    }\r\n\r\n    public static playComputerTurn(): void {\r\n\r\n        const game = Game.getInstance();\r\n\r\n        this.notifyGamestateChange({ details: { changeLabel: \"Computer Playing Its Turn\" } })\r\n\r\n        game.currentPlayer = game.computerPlayer;\r\n\r\n        game.computerPlayer.playTurn();\r\n\r\n        game.currentPlayer = game.humanPlayer;\r\n\r\n    }\r\n\r\n    public static activateAbmBase(args: { forBase: AbmBase }) {\r\n\r\n        const { forBase } = args;\r\n\r\n        forBase.totalMissiles = Rng.throwDice({ hiNumberMinus1: 5 }) + 1;\r\n        forBase.isTracking = true;\r\n        forBase.isReceivingOrders = true;\r\n\r\n        this.notifyGamestateChange({ details: { changeLabel: \"Base Activated\", relatedBase: forBase } });\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    public static handleMissileTargeted(args: { attackingPlayer: AbstractPlayer, atMapLocation: MapLocation, targetingOrdnance: Ordnance }) {\r\n\r\n        const {targetingOrdnance} = args;\r\n\r\n        args.atMapLocation.isTargeted = true;\r\n\r\n        targetingOrdnance.myTarget = args.atMapLocation;\r\n        targetingOrdnance.remainingTicksBeforeStriking = GameRules.getMissileArrivalTicks();\r\n        console.log(`GameLogic: handleMissileTargeted: A missile will land in [${targetingOrdnance.remainingTicksBeforeStriking}] ticks.`);\r\n\r\n        args.attackingPlayer.allTargetedOrdnanceItems = args.attackingPlayer.allTargetedOrdnanceItems.concat(args.targetingOrdnance);\r\n                \r\n        this.notifyGamestateChange({ details: { changeLabel: \"Map Location Targeted\", relatedLocation: args.atMapLocation } })\r\n    }\r\n\r\n    public static activateMissileBase(args: { forBase: MissileBase }) {\r\n\r\n        const {forBase} = args;\r\n\r\n        forBase.isReceivingOrders = true;\r\n\r\n        this.notifyGamestateChange({ details: { relatedBase: args.forBase, changeLabel: \"Base Activated\" } });\r\n\r\n        const totalICBMs = Rng.throwDice({ hiNumberMinus1: Constants.MAX_ICBMS - 1 }) + Constants.MIN_ICBMS;\r\n\r\n        forBase.ordnance = [];\r\n\r\n        for (let i = 0; i < totalICBMs; i++) {\r\n            forBase.ordnance = forBase.ordnance.concat(new Ordnance({ parentBase: forBase }));\r\n        }\r\n\r\n    }\r\n\r\n    public static activateAirBase(args: { forBase: AirBase }) {\r\n\r\n        console.log(`GameLogic: activateAirBase: Entering:`, args);\r\n\r\n        args.forBase.isReceivingOrders = true;\r\n\r\n        this.notifyGamestateChange({ details: { relatedBase: args.forBase, changeLabel: \"Base Activated\" } });\r\n\r\n        const totalFighters = Constants.MAX_INITIAL_FIGHTERS + Rng.throwDice({ hiNumberMinus1: Constants.MAX_INITIAL_FIGHTERS - 1 });\r\n        args.forBase.totalFighters = totalFighters;\r\n\r\n        const totalBombers = Rng.throwDice({ hiNumberMinus1: Constants.MAX_ICBMS - 1 }) + Constants.MIN_ICBMS;\r\n\r\n        for (let i = 0; i < totalBombers; i++) {\r\n            args.forBase.ordnance = args.forBase.ordnance.concat(new Ordnance({ parentBase: args.forBase }));\r\n        }\r\n    }\r\n\r\n    public static activateNavyBase(args: { forBase: NavyBase }) {\r\n\r\n        args.forBase.isReceivingOrders = true;\r\n\r\n        this.notifyGamestateChange({ details: { relatedBase: args.forBase, changeLabel: \"Base Activated\" } });\r\n\r\n        const totalMissiles = Rng.throwDice({ hiNumberMinus1: Constants.MIN_SUB_MISSILES - 1 }) + Constants.MAX_SUB_MISSILES;\r\n\r\n        for (let i = 0; i < totalMissiles; i++) {\r\n            args.forBase.ordnance = args.forBase.ordnance.concat(new Ordnance({ parentBase: args.forBase }));\r\n        }\r\n    }\r\n\r\n    public static activateArmyBase(args: { forBase: ArmyBase }) {\r\n\r\n        this.notifyGamestateChange({ details: { relatedBase: args.forBase, changeLabel: \"Base Activated\" } });\r\n\r\n        args.forBase.isDecamped = true;\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    public static activateRadarBase(args: { forBase: RadarBase }) {\r\n\r\n        this.notifyGamestateChange({ details: { relatedBase: args.forBase, changeLabel: \"Base Activated\" } });\r\n\r\n    }\r\n\r\n    public static startClock() {\r\n\r\n        let isSleeping: boolean = false;\r\n        const oneSecond = 1000;\r\n\r\n        setInterval(() => {\r\n\r\n            if (isSleeping) {\r\n                // do nothing\r\n            }\r\n            else {\r\n\r\n                const timeout = 3000; // 3 seconds\r\n\r\n                isSleeping = true;\r\n\r\n                setTimeout(() => {\r\n                    // console.log(`GameLogic.ts: startClock: broadcasting a game tick.`);\r\n                    GameLogic.pulseClock();\r\n                    isSleeping = false;\r\n                }, timeout);\r\n            }\r\n\r\n        }, oneSecond);\r\n\r\n    }\r\n\r\n    private static pulseClock() {\r\n\r\n        this.notifyGamestateChange({ details: { changeLabel: \"Tick\" } });\r\n\r\n        if (Game.getInstance().isWartime) {\r\n            this.resolveWartimeAttacks();\r\n            Game.getInstance().computerPlayer.playTurn();\r\n        }\r\n\r\n    }\r\n\r\n    private static resolveWartimeAttacks() {\r\n\r\n        const tryAbmDefense = (args: { nuclearOrdnance: Ordnance, defendingPlayer: AbstractPlayer }): \"succeeded\" | \"failed\" => {\r\n\r\n            console.log(`GameLogic.ts: tryAbmDefense: Entering.`);\r\n\r\n            const tryIntercept = (args: { nuclearOrdnance: Ordnance, defender: AbmBase }): \"succeeded\" | \"failed\" => {\r\n\r\n                console.log(`GameLogic.ts: tryAbmDefense: tryIntercept: Entering, ABM Base:`, {base: args.defender});\r\n\r\n                if (! args.defender) { return \"failed\" }; // there is no ABM base on line to defend this attack against.\r\n                if (args.defender.totalMissiles < 1) { return \"failed\" }\r\n\r\n                const didShootDownOrdnance = Rng.throwDice({ hiNumberMinus1: 100 }) < 50;\r\n\r\n                console.log(`GameLogic.ts: tryAbmDefense: tryIntercept: did shoot down?`, didShootDownOrdnance);\r\n\r\n                // consume an abm missile.\r\n                args.defender.totalMissiles--;\r\n\r\n                if (didShootDownOrdnance) {\r\n\r\n                    console.log(`GameLogic.ts: tryAbmDefense: tryIntercept: Successfully intercepted.`);\r\n\r\n                    args.nuclearOrdnance.wasConsumed = true;\r\n                    args.nuclearOrdnance.wasIntercepted = true;\r\n                    return \"succeeded\";\r\n                }\r\n                else {\r\n                    return \"failed\";\r\n                }\r\n            }\r\n\r\n            let abmBaseIndex = 0;\r\n\r\n            const availableABMBases = args.defendingPlayer.map.getAllABMBases();\r\n\r\n            // If no ABM bases, then the user can't defend.\r\n            if (availableABMBases.length < 1) {\r\n                console.log(`GameLogic.ts: tryAbmDefense: player has no ABMs, no defense possible.`);\r\n                return \"failed\" \r\n            };\r\n\r\n            // We get one try against ICBMs and Submarine missiles. We get two tries against bombers.\r\n            const firstTry = tryIntercept({ nuclearOrdnance: args.nuclearOrdnance, defender: availableABMBases[abmBaseIndex] });\r\n            if (firstTry === \"succeeded\") { return \"succeeded\"};\r\n            \r\n            if (args.nuclearOrdnance.myWorldLabel === \"ICBM\" || args.nuclearOrdnance.myWorldLabel === \"Submarine Missile\") {\r\n                return \"failed\";\r\n            }\r\n\r\n            // If we get here, it's a bomber. We get a second chance to shoot it down if there are any more ABMs available.\r\n            abmBaseIndex = -1;\r\n            if (availableABMBases[0].totalMissiles > 0) { abmBaseIndex = 0 }\r\n            if (availableABMBases[0].totalMissiles < 1 && availableABMBases.length > 1) { abmBaseIndex = 1 }\r\n\r\n            const secondTry = tryIntercept({ nuclearOrdnance: args.nuclearOrdnance, defender: availableABMBases[abmBaseIndex] });\r\n\r\n            if (secondTry === \"succeeded\")  {\r\n                return \"succeeded\";\r\n            }\r\n\r\n            console.log(`GameLogic.ts: tryAbmDefense: tryIntercept: Failed to intercept.`);\r\n\r\n            return \"failed\";\r\n\r\n        }\r\n\r\n        const tryICBMAttack = (args: {attackingOrdnance: Ordnance, defendingPlayer: AbstractPlayer,locationUnderAttack: MapLocation}): \"succeeded\" | \"failed\" => {\r\n\r\n            const abmDefenseAttempt = tryAbmDefense({defendingPlayer: args.defendingPlayer, nuclearOrdnance: args.attackingOrdnance })\r\n\r\n            if (abmDefenseAttempt === \"succeeded\") {\r\n                console.log(`resolveWartimeAttacks: tryICBMAttack: attacking player's ICBM was shot down by an ABM.`,\r\n                    {\r\n                        defendingPlayer: args.defendingPlayer,\r\n                        locationAttacked: args.locationUnderAttack\r\n                    });\r\n\r\n                this.notifyGamestateChange({ details: { changeLabel: \"ICBM Intercepted\", relatedLocation: args.locationUnderAttack } });\r\n\r\n                return \"failed\";\r\n            }\r\n\r\n            console.log(`resolveWartimeAttacks: tryAttack: Missile successfully hit target.`);\r\n            return \"succeeded\";\r\n        }\r\n\r\n        const tryBomberAttack = (args: {attackingOrdnance: Ordnance, defendingPlayer: AbstractPlayer,locationUnderAttack: MapLocation}): \"succeeded\" | \"failed\" => {\r\n\r\n            const abmDefenseAttempt = tryAbmDefense({defendingPlayer: args.defendingPlayer, nuclearOrdnance: args.attackingOrdnance })\r\n\r\n            if (abmDefenseAttempt === \"succeeded\") {\r\n                console.log(`resolveWartimeAttacks: tryBomberAttack: attacking player's bomber was shot down by an ABM.`,\r\n                    {\r\n                        defendingPlayer: args.defendingPlayer,\r\n                        locationAttacked: args.locationUnderAttack\r\n                    });\r\n\r\n                this.notifyGamestateChange({ details: { changeLabel: \"Bomber was shot down by ABM\", relatedLocation: args.locationUnderAttack } });\r\n\r\n                return \"failed\";\r\n            }\r\n\r\n            console.log(`resolveWartimeAttacks: tryBomberAttack: Bomber successfully hit target.`);\r\n            return \"succeeded\";\r\n        }\r\n\r\n        const trySubmarineAttack = (args: {attackingOrdnance: Ordnance, defendingPlayer: AbstractPlayer,locationUnderAttack: MapLocation}): \"succeeded\" | \"failed\" => {\r\n\r\n            const abmDefenseAttempt = tryAbmDefense({defendingPlayer: args.defendingPlayer, nuclearOrdnance: args.attackingOrdnance })\r\n\r\n            if (abmDefenseAttempt === \"succeeded\") {\r\n                console.log(`resolveWartimeAttacks: trySubmarineAttack: attacking player's submarine missile was shot down by an ABM.`,\r\n                    {\r\n                        defendingPlayer: args.defendingPlayer,\r\n                        locationAttacked: args.locationUnderAttack\r\n                    });\r\n\r\n                this.notifyGamestateChange({ details: { changeLabel: \"Submarine Missile Shot Down By ABM\", relatedLocation: args.locationUnderAttack } });\r\n\r\n                return \"failed\";\r\n            }\r\n\r\n            console.log(`resolveWartimeAttacks: tryBomberAttack: Bomber successfully hit target.`);\r\n            return \"succeeded\";\r\n        }\r\n\r\n        const getNextReadyOrdnance = (args: {attackingPlayer: AbstractPlayer, locationUnderAttack: MapLocation}) => {\r\n            const attackingOrdnance = args.attackingPlayer.ordnanceItemsArrivingThisTick.filter((ao) => {\r\n                if (ao.myTarget === null) return false;\r\n                if (ao.wasConsumed) return false;\r\n                if (ao.remainingTicksBeforeStriking > 0) return false;\r\n                return (ao.myTarget.uniqueID === args.locationUnderAttack.uniqueID);\r\n            })[0];\r\n\r\n            return attackingOrdnance;\r\n        }\r\n\r\n        const tryAttack = (args: { attackingPlayer: AbstractPlayer, defendingPlayer: AbstractPlayer, locationUnderAttack: MapLocation }): nuclearStrikeDamage | \"failed\" => {\r\n\r\n            console.log(`resolveWartimeAttacks: tryAttack: entering, args:`, { args: args });\r\n\r\n            // return nothing if there is no ordnance ready this turn.\r\n            const attackingOrdnance = getNextReadyOrdnance({attackingPlayer: args.attackingPlayer, locationUnderAttack: args.locationUnderAttack});\r\n\r\n            console.log(`resolveWartimeAttacks: tryAttack: found ordnance:`, { \r\n                foundAttackingOrdnance: attackingOrdnance, ticks: attackingOrdnance ? attackingOrdnance.remainingTicksBeforeStriking : \"na\" });\r\n\r\n            if (attackingOrdnance) {\r\n\r\n                attackingOrdnance.wasConsumed = true;\r\n\r\n                const defendingPlayerMapSummary = MapUtil.getMapSummary({ forMap: args.defendingPlayer.map });\r\n\r\n                console.log(`resolveWartimeAttacks: tryAttack: player is defending attack:`, {\r\n                    attackingOrdnance: attackingOrdnance,\r\n                    defendingPlayerMapSummary: defendingPlayerMapSummary\r\n                });\r\n\r\n                if (attackingOrdnance.myWorldLabel === \"ICBM\") {\r\n                    const icbmAttackResult = tryICBMAttack({attackingOrdnance: attackingOrdnance, defendingPlayer: args.defendingPlayer, locationUnderAttack: args.locationUnderAttack});\r\n                    if (icbmAttackResult === \"failed\") return \"failed\";\r\n                }\r\n                else if (attackingOrdnance.myWorldLabel === \"Bomber\") {\r\n                    const bomberAttackResult = tryBomberAttack({attackingOrdnance: attackingOrdnance, defendingPlayer: args.defendingPlayer, locationUnderAttack: args.locationUnderAttack});\r\n                    if (bomberAttackResult === \"failed\") return \"failed\";\r\n                }\r\n                else if (attackingOrdnance.myWorldLabel === \"Submarine Missile\") {\r\n                    const subMissileAttackResult = trySubmarineAttack({attackingOrdnance: attackingOrdnance, defendingPlayer: args.defendingPlayer, locationUnderAttack: args.locationUnderAttack});\r\n                    if (subMissileAttackResult === \"failed\") return \"failed\";\r\n                }\r\n                else {\r\n                    console.error(`GameLogic.ts: tryAttack: Error: tried to attack with unknown ordnance type:`, attackingOrdnance);\r\n                    return \"failed\";\r\n                }\r\n\r\n                const nukeDamage = GameRules.getLocationDamage(\r\n                    {\r\n                        attackedBy: attackingOrdnance,\r\n                        locationAttacked: args.locationUnderAttack,\r\n                    });\r\n\r\n                return nukeDamage;\r\n            }\r\n            else {\r\n                console.error(`resolveWartimeAttack: resolveAttack: there was no ordnance to attack with.`);\r\n                return \"failed\";\r\n            }\r\n        }\r\n\r\n        const getUpdatedOrdnanceArrivalTicksForPlayer = (args: {p: AbstractPlayer}) => {\r\n            return args.p.allTargetedOrdnanceItems = args.p.allTargetedOrdnanceItems\r\n                .map (ao => ao.remainingTicksBeforeStriking < 1 ? ao : {...ao, remainingTicksBeforeStriking: ao.remainingTicksBeforeStriking -1})\r\n        }\r\n\r\n        const hasOrdnanceStrikingThisTick = (args: {forPlayer: AbstractPlayer}) => {\r\n            return (\r\n                args.forPlayer.ordnanceItemsArrivingThisTick.some(\r\n                    o => \r\n                        o.remainingTicksBeforeStriking < 1 && \r\n                        o.wasConsumed === false && \r\n                        o.wasIntercepted === false\r\n                )\r\n            );\r\n        }\r\n\r\n        const resolveAttacksOnPlayer = (args: { attackingPlayer: AbstractPlayer, defendingPlayer: AbstractPlayer }) => {\r\n\r\n            const defendersMap = args.defendingPlayer.map;\r\n\r\n            const allTargetedLocations = MapUtil.getMapSummary({ forMap: defendersMap }).targetedMapLocations;\r\n\r\n            const locationsUnderAttackThisTick =\r\n                allTargetedLocations.filter(\r\n                    aTargetedLocation => args.attackingPlayer.ordnanceItemsArrivingThisTick.filter(\r\n                        oiatt => (\r\n                            oiatt.wasConsumed === false &&\r\n                            oiatt.wasIntercepted === false &&\r\n                            oiatt.myTarget && \r\n                            oiatt.myTarget.uniqueID === aTargetedLocation.uniqueID)\r\n                    ).length > 0\r\n                )\r\n\r\n            console.log(`GameLogic: resolveAttacksOnPlayer: player locations under attack this tick:`, {allTargetedLocations: allTargetedLocations, locationsUnderAttackThisTick});\r\n\r\n            for (let i = 0; i < locationsUnderAttackThisTick.length; i++) {\r\n\r\n                const { Contents } = locationsUnderAttackThisTick[i];\r\n\r\n                const attackedLocation = locationsUnderAttackThisTick[i];\r\n\r\n                if (!Contents) continue;\r\n\r\n                const result = tryAttack({ attackingPlayer: args.attackingPlayer, defendingPlayer: args.defendingPlayer, locationUnderAttack: attackedLocation });\r\n\r\n                if (result === \"failed\") {\r\n                    this.notifyGamestateChange({ details: { changeLabel: \"ICBM Intercepted\", relatedLocation: attackedLocation } });\r\n                }\r\n                else {\r\n                    damageLocation({location: locationsUnderAttackThisTick[i], damage: result});\r\n                }\r\n\r\n            }\r\n        };\r\n\r\n        const damageLocation = (args: {location: MapLocation, damage: nuclearStrikeDamage}) => {\r\n\r\n            args.location.nuclearStrikes = args.damage.strikeCount;\r\n            if (args.location.Contents) {args.location.Contents.Population -= args.damage.populationKilled};\r\n            args.location.myMap.owningPlayer.totalCausualties += args.damage.populationKilled;\r\n\r\n            if (args.location.isMilitaryBase()) {\r\n                const militaryBase = args.location.Contents as Exclude<MilitaryBaseTypes,null>;\r\n                militaryBase.wasDestroyed = militaryBase.wasDestroyed || Rng.throwDice({hiNumberMinus1: 100}) < 97;\r\n                militaryBase.isReceivingOrders = militaryBase.isReceivingOrders || (militaryBase.isReceivingOrders && ! militaryBase.wasDestroyed);\r\n            }\r\n\r\n            this.notifyGamestateChange({ details: { changeLabel: \"Location Nuked\", relatedLocation: args.location } });\r\n\r\n        }\r\n        \r\n        const isLiveOrdnance = (forOrdnance: Ordnance) => ! forOrdnance.wasIntercepted && ! forOrdnance.wasConsumed;\r\n\r\n        console.log(`GameLogic: resolveWartimeAttacks: Entering.`);\r\n\r\n        const game = Game.getInstance();\r\n\r\n        const playerA = game.currentPlayer;\r\n        const playerB = game.currentPlayer.isHuman ? game.computerPlayer : game.humanPlayer;\r\n\r\n        playerA.allTargetedOrdnanceItems = getUpdatedOrdnanceArrivalTicksForPlayer({p: playerA});\r\n        playerB.allTargetedOrdnanceItems = getUpdatedOrdnanceArrivalTicksForPlayer({p: playerB});\r\n        playerA.ordnanceItemsArrivingThisTick = playerA.allTargetedOrdnanceItems.filter(ato => isLiveOrdnance(ato) && ato.remainingTicksBeforeStriking < 1);\r\n        playerB.ordnanceItemsArrivingThisTick = playerB.allTargetedOrdnanceItems.filter(ato => isLiveOrdnance(ato) && ato.remainingTicksBeforeStriking < 1);\r\n\r\n        if (hasOrdnanceStrikingThisTick({forPlayer: playerA})) {\r\n            console.log(`GameLogic: resolveWartimeAttacks Player A (${playerA.Name}) has ordnance ready this tick:`, playerA.ordnanceItemsArrivingThisTick);\r\n            resolveAttacksOnPlayer({ attackingPlayer: playerA, defendingPlayer: playerB });\r\n        }\r\n        else {\r\n            console.log(`GameLogic: resolveWartimeAttacks Player A (${playerA.Name}) does not have ordnance ready this tick.`);\r\n        }\r\n\r\n        if (hasOrdnanceStrikingThisTick({forPlayer: playerB})) {\r\n            console.log(`GameLogic: resolveWartimeAttacks Player B (${playerB.Name}) has ordnance ready this tick:`, playerB.ordnanceItemsArrivingThisTick);\r\n            resolveAttacksOnPlayer({ attackingPlayer: playerB, defendingPlayer: playerA });\r\n        }\r\n        else {\r\n            console.log(`GameLogic: resolveWartimeAttacks Player B (${playerB.Name}) does not have ordnance ready this tick.`);\r\n        }\r\n\r\n\r\n        // debugger;\r\n    }\r\n\r\n    public static declareWar(args: { declaringPlayer: AbstractPlayer }) {\r\n\r\n        console.log(`GameLogic.ts: declareWar: A player declared war:`, { declaringPlayer: args.declaringPlayer });\r\n\r\n        args.declaringPlayer.declaredWar = true; // Gives a first-strike bonus but world opinion takes a  hit\r\n\r\n        Game.getInstance().isPeacetime = false;\r\n        Game.getInstance().isWartime = true;\r\n\r\n        this.notifyGamestateChange({ details: { changeLabel: \"War Declared\" } });\r\n\r\n    }\r\n\r\n    public static finishHumanTurn(): void {\r\n        Game.getInstance().currentPlayer = Game.getInstance().computerPlayer;\r\n        this.playComputerTurn();\r\n        Game.getInstance().currentPlayer = Game.getInstance().humanPlayer;\r\n    }\r\n\r\n    public static finishComputerTurn(): void {\r\n        Game.getInstance().currentPlayer = Game.getInstance().humanPlayer;\r\n        this.notifyGamestateChange({ details: { changeLabel: \"Advance Turn\" } });\r\n    }\r\n\r\n    public static advanceTurn(): void {\r\n\r\n        const game = Game.getInstance();\r\n\r\n        game.turn++;\r\n\r\n        console.log(`GameLogic.ts: advanceTurn: new game turn / year:`, { turn: game.turn, year: game.gameYear });\r\n\r\n        this.notifyGamestateChange({ details: { changeLabel: \"Advance Turn\" } });\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    public static spyOnPlayer(args: {targetPlayer: AbstractPlayer, spyLevel: 1 | 2}) {\r\n\r\n        console.log(`Gamelogic: spyOnPlayer: entering, target:`, args.targetPlayer);\r\n\r\n        /*\r\n            Principles:\r\n            - Tech (concealment and discovery) improves all the time\r\n            - Older bases are less easy to conceal\r\n            - Newer bases are easier to conceal\r\n            - When spying in 1990, it's easier to find opponent's bases then it is in 1945\r\n            - Towns and cities are never hidden\r\n\r\n            On any given turn, you can discover up to two bases depending on spy level.\r\n        */\r\n\r\n        const allMilitaryBases = MapUtil.allMilitaryBases({forMap: args.targetPlayer.map});\r\n\r\n        const game = Game.getInstance();\r\n\r\n        for (let i = 0; i < allMilitaryBases.length; i++) {\r\n            \r\n            const base = allMilitaryBases[i];\r\n\r\n            console.log(`GameLogic: spyOnPlayer: spying on a base:`, {base: base});\r\n\r\n            // New bases are harder to find.\r\n            const baseConcealmentFactor = base.yearBuilt - GameRules.GameStartYear; // gives a value like: 1950 - 1945 = 5\r\n            \r\n            // If this turn is a spying turn, you get a bonus..\r\n            const baseSpyFactor = args.spyLevel === 1 ? 1.1 : 1.25; \r\n\r\n            // As time goes on, you get better at spying at baseline.\r\n            const spyTechnologyFactor = (game.gameYear - GameRules.GameStartYear) * baseSpyFactor; // ex: (1950 - 1945) * 1.1 = 5.5\r\n            \r\n            const spyAmount = spyTechnologyFactor - baseConcealmentFactor; // 5.5 - 5 = 0.5\r\n\r\n            allMilitaryBases[i].myMapLocation.enemyVisibility += Math.ceil(spyAmount);\r\n\r\n        }\r\n\r\n        const tryFindBase = (forBase: NonNullMilitaryBaseTypes) => {\r\n            const didFind = Rng.throwDice({hiNumberMinus1: 100}) < forBase.myMapLocation.enemyVisibility;\r\n            if (didFind) { forBase.myMapLocation.enemyVisibility =100 }\r\n        }\r\n\r\n        tryFindBase(Rng.pickRandomFromArray({sourceArray: allMilitaryBases}));\r\n\r\n        if (args.spyLevel > 1) {\r\n            tryFindBase(Rng.pickRandomFromArray({sourceArray: allMilitaryBases}));\r\n        }\r\n        \r\n    }\r\n\r\n    public static getNameForNameableItem(args: {fromNamesArr: string[]}): getNameProcessResult {\r\n\r\n        const selectedNameIdx = Rng.throwDice({hiNumberMinus1: args.fromNamesArr.length});\r\n        \r\n        const emptyProcessResult: getNameProcessResult = \r\n        {\r\n            allOtherNames: [], \r\n            baseName: \"\"\r\n        };\r\n        \r\n        const processedResult = args.fromNamesArr.reduce ((prev: getNameProcessResult, curr, idx) => {\r\n            \r\n            if (idx === selectedNameIdx) return {allOtherNames: prev.allOtherNames, baseName: curr} as getNameProcessResult;\r\n\r\n            return {\r\n                allOtherNames: prev.allOtherNames.concat(curr),\r\n                baseName: prev.baseName\r\n            } as getNameProcessResult;\r\n        }, emptyProcessResult);\r\n\r\n        return processedResult;\r\n    }\r\n}","import { PopulationAreaTypeLabels } from \"./PopulationAreaTypes\";\r\n\r\nexport interface PopulationAreaProperties {\r\n    Name: string;\r\n    Population: number;\r\n    WorldObjectLabel: PopulationAreaTypeLabels;\r\n}\r\n\r\nexport abstract class AbstractPopulationArea implements PopulationAreaProperties {\r\n\r\n    public Name: string;\r\n    public Population: number;\r\n    abstract WorldObjectLabel: PopulationAreaTypeLabels;\r\n\r\n    constructor() {\r\n        this.Name = \"\";\r\n        this.Population = 0;\r\n    }\r\n\r\n}","import { AbstractPopulationArea } from \"./AbstractPopulationArea\";\r\nimport { PopulationAreaTypeLabels } from \"./PopulationAreaTypes\";\r\n\r\nexport class City extends AbstractPopulationArea {\r\n\r\n    public readonly WorldObjectLabel: PopulationAreaTypeLabels = \"City\";\r\n\r\n    constructor(args: {name: string, population: number}) {\r\n        super();\r\n\r\n        this.Name = args.name;\r\n        this.Population = args.population;\r\n    }\r\n}\r\n","import { AbstractPopulationArea } from \"./AbstractPopulationArea\";\r\nimport { PopulationAreaTypeLabels } from \"./PopulationAreaTypes\";\r\n\r\nexport class RuralArea extends AbstractPopulationArea {\r\n\r\n    public readonly WorldObjectLabel: PopulationAreaTypeLabels = \"Rural\";\r\n\r\n    constructor(args: {name: string, population: number}) {\r\n        super();\r\n\r\n        this.Name = args.name;\r\n        this.Population = args.population;\r\n    }\r\n}\r\n","import { AbstractPopulationArea } from \"./AbstractPopulationArea\";\r\nimport { PopulationAreaTypeLabels } from \"./PopulationAreaTypes\";\r\n\r\nexport class MajorTown extends AbstractPopulationArea {\r\n\r\n    public readonly WorldObjectLabel: PopulationAreaTypeLabels = \"Town\";\r\n\r\n    constructor(args: {name: string, population: number}) {\r\n        super();\r\n\r\n        this.Name = args.name;\r\n        this.Population = args.population;\r\n    }\r\n}\r\n","import { AbstractPopulationArea } from \"../Entities/WorldObjects/PopulationCenters/AbstractPopulationArea\";\r\nimport { PopulationAreaTypeLabels } from \"../Entities/WorldObjects/PopulationCenters/PopulationAreaTypes\";\r\nimport { City } from \"../Entities/WorldObjects/PopulationCenters/City\";\r\nimport { RuralArea } from \"../Entities/WorldObjects/PopulationCenters/Rural\";\r\nimport { MajorTown } from \"../Entities/WorldObjects/PopulationCenters/MajorTown\";\r\nimport { Rng } from \"../Utils/Rng\";\r\n\r\nexport class PopulationAreaFactory {\r\n\r\n    private static instance: PopulationAreaFactory;\r\n\r\n    private readonly msh = \"PopulationAreaFactory: \";\r\n\r\n    private nextPopulationAreaID: number = 0;\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    public static getInstance() : PopulationAreaFactory {\r\n\r\n        if (!this.instance) {\r\n            this.instance = new PopulationAreaFactory();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    private newName(args: {forPopulationArea: AbstractPopulationArea}) {\r\n        console.log(`${this.msh}: newName: typeof base:`, args.forPopulationArea.WorldObjectLabel);\r\n        return 'xyzzy';\r\n    }\r\n\r\n    public createNewPopulationArea(args: {popAreaType: PopulationAreaTypeLabels}) {\r\n\r\n        // console.log(`PopulationAreaFactory: Entering, creating a pop area:`, args.popAreaType);\r\n        \r\n        switch(args.popAreaType) {\r\n\r\n            case \"City\": {\r\n                const newPopulationArea = new City({\r\n                    name: \"xyzzy\",\r\n                    population: Rng.throwDice({hiNumberMinus1: 6500000}) + 6000000\r\n                });\r\n                return newPopulationArea;\r\n            }\r\n            \r\n            case \"Rural\": {\r\n                const newPopulationArea = new RuralArea({\r\n                    name: \"xyzzy\",\r\n                    population: Rng.throwDice({hiNumberMinus1: 1000}) + 1000\r\n                });\r\n                return newPopulationArea;\r\n            }\r\n            \r\n            case \"Town\": {\r\n                const newPopulationArea = new MajorTown({\r\n                    name: \"xyzzy\",\r\n                    population: Rng.throwDice({hiNumberMinus1: 50000}) + 10000\r\n                });\r\n                return newPopulationArea;\r\n            }\r\n            \r\n        }\r\n\r\n        return new RuralArea({name: \"Error\", population: -1})\r\n    }\r\n\r\n}","import { AbstractMapLocation } from \"./AbstractMapLocation\";\r\nimport { PlaceableObject } from \"./PlaceableObjects\";\r\nimport { RuralArea } from \"../WorldObjects/PopulationCenters/Rural\";\r\nimport { MilitaryBaseTypeLabels, MilitaryBaseTypes } from \"../WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { PopulationAreaTypes } from \"../WorldObjects/PopulationCenters/PopulationAreaTypes\";\r\nimport { CountryMap } from \"../WorldObjects/CountryMap\";\r\n\r\nexport class MapLocation extends AbstractMapLocation {\r\n \r\n    public Contents!: MilitaryBaseTypes | PopulationAreaTypes;\r\n    public uniqueID: number = 0;\r\n    \r\n    public nuclearStrikes: number;\r\n    public myMap: CountryMap;\r\n    private static nextID: number = 1;\r\n    public population: number;\r\n\r\n    constructor(args: {onMap: CountryMap}) {\r\n        super();\r\n        this.Contents = new RuralArea({name: \"Empty\", population: 0});\r\n        this.uniqueID = MapLocation.nextID++;\r\n        this.isTargeted = false;\r\n        this.nuclearStrikes = 0;\r\n        this.myMap = args.onMap;\r\n        this.population = 0;\r\n    }\r\n\r\n    public placeItem(args: {itemToPlace: PlaceableObject}): void {\r\n        this.Contents = args.itemToPlace;\r\n        \r\n        const {itemToPlace} = args;\r\n\r\n        if (itemToPlace && \r\n                (itemToPlace.WorldObjectLabel === \"City\" || \r\n                 itemToPlace.WorldObjectLabel === \"Town\"))\r\n        {\r\n            this.enemyVisibility = 100;\r\n        }\r\n\r\n    }\r\n    \r\n    public isMilitaryBase() {\r\n\r\n        const militaryLabels: MilitaryBaseTypeLabels[] = [\r\n            \"ABM\", \"Air\", \"Army\", \"Missile\", \"Navy\", \"Radar\"\r\n        ];\r\n\r\n        return militaryLabels.filter(ml => this.Contents !== null &&  ml === this.Contents.WorldObjectLabel).length > 0;\r\n    }\r\n}","import { MilitaryBaseTypes } from \"../WorldObjects/Bases/MilitaryBaseTypes\";\r\nimport { PopulationAreaTypes } from \"../WorldObjects/PopulationCenters/PopulationAreaTypes\";\r\nimport { CountryMap } from \"../WorldObjects/CountryMap\";\r\n\r\nexport abstract class AbstractMapLocation {\r\n    \r\n    abstract Contents: MilitaryBaseTypes | PopulationAreaTypes;\r\n    \r\n    public isTargeted: boolean = false;\r\n    abstract myMap: CountryMap;\r\n    abstract population: number;\r\n\r\n    public enemyVisibility: number;\r\n\r\n    constructor() {\r\n        // this.Contents = null;\r\n        this.enemyVisibility = 0;\r\n    }\r\n}\r\n","import { PopulationAreaFactory } from \"../../Factories/PopulationAreaFactory\";\r\nimport { MapLocation } from \"../MapObjects/MapLocation\";\r\nimport { MilitaryBaseTypes } from \"./Bases/MilitaryBaseTypes\";\r\nimport { AbstractPlayer } from \"../../Game/AbstractPlayer\";\r\nimport { AbmBase } from \"./Bases/AbmBase\";\r\nimport { Rng } from \"../../Utils/Rng\";\r\n\r\nexport class CountryMap {\r\n\r\n    private sizeX: number;\r\n    private sizeY: number;\r\n    public owner: \"Computer\" | \"Human\";\r\n    public map: MapLocation[][]\r\n    public owningPlayer: AbstractPlayer;\r\n\r\n    private readonly newRuralArea = () => PopulationAreaFactory.getInstance().createNewPopulationArea({popAreaType: \"Rural\"});\r\n\r\n    constructor(args: {sizeX: number, sizeY: number, ownerLabel: \"Computer\" | \"Human\", owningPlayer: AbstractPlayer}) {\r\n\r\n        this.sizeX = args.sizeX;\r\n        this.sizeY = args.sizeY;\r\n        this.map = [[]];\r\n        this.owner = args.ownerLabel;\r\n        this.owningPlayer = args.owningPlayer;\r\n\r\n        this.initializeMap();\r\n\r\n    }\r\n\r\n    public logDetailedMapToConsole() {\r\n\r\n        console.log(`WorldMap.ts: logSelfToConsole: logging map:`, {map: this.map});\r\n        \r\n        for (let i = 0; i < this.map.length; i++) {\r\n            console.table(this.map[i]);\r\n        }\r\n    }\r\n\r\n    private initializeMap() {\r\n\r\n        console.log(`CountryMap: initializeMap: Entering, my sizex/sizey:`, this.sizeX, this.sizeY, this.owner);\r\n\r\n        // First, create sizeX by sizeY  collection of negligble population centers\r\n        for (let x = 0; x < this.sizeX; x++) {\r\n\r\n            this.map.push([]);\r\n\r\n            for (let y = 0; y < this.sizeY; y++) {\r\n\r\n                const mi = new MapLocation({onMap: this});\r\n                mi.Contents = this.newRuralArea();\r\n\r\n                this.map[x].push(mi);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getAllMilitaryBases(): Exclude<MilitaryBaseTypes, null>[] {\r\n        \r\n        const baseLocationsInRow = (mapRow: MapLocation[]) => mapRow.filter(mapCell => mapCell.isMilitaryBase());\r\n\r\n        const bases = this.map.map(mapRow => baseLocationsInRow(mapRow).map(mapRow => mapRow.Contents) as MilitaryBaseTypes[]);\r\n\r\n        var flattendedBases = [].concat.apply([], bases) as Exclude<MilitaryBaseTypes, null>[];\r\n\r\n        return flattendedBases;\r\n\r\n    }\r\n\r\n    public getAllABMBases(): AbmBase[] {\r\n        return this.getAllMilitaryBases().filter(b => b.WorldObjectLabel === \"ABM\") as AbmBase[];\r\n    }\r\n\r\n    public getRandomLocation() {\r\n        const x = Rng.throwDice({hiNumberMinus1: this.map.length - 1});\r\n        const y = Rng.throwDice({hiNumberMinus1: this.map.length - 1});\r\n\r\n        return (\r\n            this.map[x][y]\r\n         );\r\n    }\r\n}","import { AbstractPlayer } from \"./AbstractPlayer\";\r\nimport { GameRules, strategicMoveOptions, tacticalMoveOptions } from \"./GameRules\";\r\nimport { GamestateWatcher, gameStateChangeDetails, GameLogic } from \"./GameLogic\";\r\nimport { CountryMap } from \"../Entities/WorldObjects/CountryMap\";\r\nimport { Rng } from \"../Utils/Rng\";\r\nimport { MilitaryBaseFactory } from \"../Factories/MilitaryBaseFactory\";\r\nimport { Game } from \"../Entities/gameEntity\";\r\nimport { MapUtil } from \"../Utils/MapUtils\";\r\nimport { Constants } from \"./constants\";\r\n\r\ninterface peaceTimeSentimentMapping {\r\n    percentBuildStart: number,\r\n    percentDeclareWarStart: number,\r\n    percentSpyStart: number;\r\n}\r\n\r\n/*\r\n    Underinformed: doesn't know enough about enemy map\r\n    Falling Behind: doesn't think it has enough bases\r\n    Confident: feels good about the mix of things.\r\n*/\r\ntype sentiments = \"Underinformed\" | \"Falling Behind\" | \"Confident\";\r\n\r\nexport class ComputerPlayer extends AbstractPlayer implements GamestateWatcher {\r\n\r\n    public totalFunctionalPassiveRadarStations: number;\r\n    public totalFunctionalActiveRadarStations: number;\r\n\r\n    public declaredWar: boolean;\r\n    public Name: string;\r\n    public map: CountryMap;\r\n    public totalCausualties: number = 0;\r\n\r\n    private sentimentMap: Map<sentiments,peaceTimeSentimentMapping>;\r\n\r\n    constructor() {\r\n\r\n        super({ isHuman: false });\r\n\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n        this.map = new CountryMap({ sizeX: 10, sizeY: 10, ownerLabel: \"Computer\", owningPlayer: this});\r\n        this.Name = \"Computer\";\r\n        this.declaredWar = false;\r\n        this.totalFunctionalActiveRadarStations = 0;\r\n        this.totalFunctionalPassiveRadarStations = 0;\r\n        this.totalCausualties = 0;\r\n\r\n        MapUtil.createTestBases({ onMap: this.map });\r\n\r\n        this.sentimentMap = new Map<sentiments, peaceTimeSentimentMapping>();\r\n        this.sentimentMap.set(\"Underinformed\", {percentBuildStart: 25, percentSpyStart: 26, percentDeclareWarStart: 99});\r\n        this.sentimentMap.set(\"Falling Behind\", {percentBuildStart: 75, percentSpyStart: 76, percentDeclareWarStart: 99});\r\n        this.sentimentMap.set(\"Confident\", {percentBuildStart: 49, percentSpyStart: 50, percentDeclareWarStart: 98});\r\n        \r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        // console.log(`ComputerPlayer.ts: handleGamestateChange: Got a game state change:`, {details: args.details});\r\n\r\n    }\r\n\r\n    public playTurn() {\r\n\r\n        const game = Game.getInstance();\r\n\r\n        if (game.isPeacetime) {\r\n            this.playPeacefulTurn();\r\n            setTimeout(() => {\r\n                GameLogic.advanceTurn();\r\n            }, 500);\r\n        }\r\n\r\n        if (game.isWartime) {\r\n            this.playWarTurn();\r\n        }\r\n\r\n    }\r\n\r\n    private static testGuard: boolean = false;\r\n\r\n    private playWarTurn() {\r\n\r\n        if (ComputerPlayer.testGuard) { return; }\r\n\r\n        console.log(`ComputerPlayer: playWarTurn: Entering.`);\r\n\r\n        ComputerPlayer.testGuard = true;\r\n\r\n        // tests\r\n        this.radarTest();\r\n\r\n        this.missileTest();\r\n\r\n        this.airBaseTest();\r\n\r\n        this.navyBaseTest();\r\n\r\n        this.armyBaseTest();\r\n\r\n        this.abmBaseTest();\r\n    }\r\n\r\n    private abmBaseTest() {\r\n\r\n        console.log(`ComputerPlayer.ts: abmBaseTest: entering.`);\r\n\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allAbmBases.length < 1) { return; }\r\n\r\n        console.log(`ComputerPlayer.ts: abmBaseTest: testing abm base:`, myMapSummary.allAbmBases[0]);\r\n\r\n        const abmbase1 = myMapSummary.allAbmBases[0];\r\n        GameLogic.activateAbmBase({ forBase: abmbase1 });\r\n\r\n    }\r\n\r\n    private armyBaseTest() {\r\n\r\n        console.log(`ComputerPlayer.ts: armyBaseTest: entering.`);\r\n\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allArmyBases.length < 1) { return; }\r\n\r\n        console.log(`ComputerPlayer.ts: armyBaseTest: testing army base:`, myMapSummary.allArmyBases[0]);\r\n\r\n        const armybase1 = myMapSummary.allArmyBases[0];\r\n        GameLogic.activateArmyBase({ forBase: armybase1 });\r\n\r\n    }\r\n\r\n    private missileTest() {\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allMissileBases.length < 1) { return; }\r\n\r\n        const missile1 = myMapSummary.allMissileBases[0];\r\n\r\n        GameLogic.activateMissileBase({ forBase: missile1 });\r\n\r\n        console.log(`ComputerPlayer.ts: missileTest: Activated a missile:`, { missile: missile1 });\r\n\r\n        missile1.ordnance.forEach((o) => {\r\n            GameLogic.handleMissileTargeted(\r\n                {\r\n                    attackingPlayer: this,\r\n                    atMapLocation: this.getRandomLocation({ fromMap: Game.getInstance().humanPlayer.map }),\r\n                    targetingOrdnance: o\r\n                });\r\n\r\n            console.log(`ComputerPlayer.ts: missileTest: targeted missile ordnance:`, o);\r\n        })\r\n\r\n    }\r\n\r\n    private navyBaseTest() {\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allNavyBases.length < 1) { return; }\r\n\r\n        const navyBase = myMapSummary.allNavyBases[0];\r\n\r\n        GameLogic.activateNavyBase({ forBase: navyBase });\r\n\r\n        console.log(`ComputerPlayer.ts: navyBaseTest: Activated a Navy base:`, { base: navyBase });\r\n\r\n        navyBase.ordnance.forEach((o) => {\r\n            GameLogic.handleMissileTargeted(\r\n                {\r\n                    attackingPlayer: this,\r\n                    atMapLocation: this.getRandomLocation({ fromMap: Game.getInstance().humanPlayer.map }),\r\n                    targetingOrdnance: o\r\n                });\r\n        })\r\n    }\r\n\r\n    private airBaseTest() {\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allAirBases.length < 1) { return; }\r\n\r\n        const airBase = myMapSummary.allAirBases[0];\r\n\r\n        GameLogic.activateAirBase({ forBase: airBase });\r\n\r\n        console.log(`ComputerPlayer.ts: airBaseTest: Activated an air base:`, { base: airBase });\r\n\r\n        airBase.ordnance.forEach((o) => {\r\n            GameLogic.handleMissileTargeted(\r\n                {\r\n                    attackingPlayer: this,\r\n                    atMapLocation: this.getRandomLocation({ fromMap: Game.getInstance().humanPlayer.map }),\r\n                    targetingOrdnance: o\r\n                });\r\n        })\r\n    }\r\n\r\n    private radarTest() {\r\n\r\n        console.log(`ComputerPlayer.ts: radarTest: entering.`);\r\n\r\n        const myMapSummary = MapUtil.getMapSummary({ forMap: this.map });\r\n\r\n        if (myMapSummary.allRadarBases.length < 1) { return; }\r\n\r\n        console.log(`ComputerPlayer.ts: radarTest: testing radar1.`);\r\n\r\n        const radar1 = myMapSummary.allRadarBases[0];\r\n        radar1.setModeOfOperation({ mode: \"Active\" });\r\n        GameLogic.activateRadarBase({ forBase: radar1 });\r\n\r\n        if (myMapSummary.allRadarBases.length < 2) { return; }\r\n\r\n        console.log(`ComputerPlayer.ts: radarTest: testing radar2.`);\r\n\r\n        const radar2 = myMapSummary.allRadarBases[1];\r\n        radar2.setModeOfOperation({ mode: \"Passive\" });\r\n        GameLogic.activateRadarBase({ forBase: radar2 });\r\n\r\n    }\r\n\r\n    private calculateCurrentSentiment(): sentiments {\r\n\r\n        const game = Game.getInstance();\r\n\r\n        const opm = game.humanPlayer.map;\r\n\r\n        // Figure out how many known/suspected bases there are.\r\n        const suspectedBasesCount = opm.getAllMilitaryBases().filter(b => b.myMapLocation.enemyVisibility > Constants.PCT_VISIBLE_SENTIMENT_THRESHOLD).length;\r\n\r\n        const expectedBaseCount = Math.ceil( (game.gameYear - GameRules.GameStartYear) * Constants.EXPECTED_BASE_COUNT_FACTOR);\r\n\r\n        let result: sentiments;\r\n\r\n        // If we expect [x] bases but there are more than that many suspected then we're falling behind.\r\n        if (expectedBaseCount > (suspectedBasesCount * 2)) result = \"Falling Behind\";\r\n        else if (expectedBaseCount > (suspectedBasesCount * 3)) result = \"Underinformed\";\r\n        else result = \"Confident\";\r\n\r\n        console.log(`ComputerPlayer.ts: calculateCurrentSentiment: suspected bases, expected bases:`, {sentiment: result, expectedBaseCount: expectedBaseCount, suspected: suspectedBasesCount});\r\n\r\n        return result;\r\n     }\r\n\r\n    private playPeacefulTurn() {\r\n\r\n        /*\r\n            Principles:\r\n\r\n            At a high level, computer should:\r\n                - Declare war if it's feeling very confident or at a significant disadvantage\r\n                - It should spy if it feels like it doesn't have enough information about the other player\r\n                - It should build if it feels \"OK\"\r\n\r\n            So, it knows that at most, there are going to be 2x bases times game years.\r\n            It can assess where it stands on that number over time and aim to be at like 1.5 or 1.75 total bases per game year\r\n\r\n            It can look at what it \"knows\" about the opponent and if doesn't know enough, it gets nervous.\r\n                - Make a \"target knowns\" per year\r\n                - Later years, it expects to know about [x] amount of bases that the user has\r\n\r\n            Idea:\r\n            - determine current sentiment\r\n            - get a lookup table based on sentiment\r\n            - pick a random number and looku up a choice based on that.\r\n\r\n        */\r\n        const availableStrategicChoices = GameRules.getAllowedMoves().strategicOptions;\r\n\r\n        const sentiment = this.calculateCurrentSentiment();\r\n\r\n        const sentimentTable: Exclude<peaceTimeSentimentMapping,undefined> = <Exclude<peaceTimeSentimentMapping,undefined>>this.sentimentMap.get(sentiment);\r\n\r\n        const tablelookupVal = Rng.throwDice({hiNumberMinus1: 99});\r\n\r\n        const strategicChoice: strategicMoveOptions = \r\n           tablelookupVal >= sentimentTable.percentDeclareWarStart \r\n            ? \"Declare War\" \r\n            : tablelookupVal >= sentimentTable.percentSpyStart\r\n                ? \"Spy\"\r\n                : \"Build\";\r\n\r\n        // Need to pick a strategic choice\r\n        // const choice = <strategicMoveOptions>Rng.pickRandomFromArray({ sourceArray: availableStrategicChoices });\r\n\r\n        console.log(`ComputerPlayer: playTurn: my strategic choice is:`, strategicChoice);\r\n\r\n        if (strategicChoice === \"Build\") {\r\n            GameLogic.spyOnPlayer({targetPlayer: Game.getInstance().humanPlayer, spyLevel: 1})\r\n            this.buildBases({ numberToBuild: 2, allowedBases: GameRules.getAllowedMoves().tacticalOptions });\r\n        }\r\n\r\n        else if (strategicChoice === \"Spy\") {\r\n            GameLogic.spyOnPlayer({targetPlayer: Game.getInstance().humanPlayer, spyLevel: 2})\r\n            this.buildBases({ numberToBuild: 1, allowedBases: GameRules.getAllowedMoves().tacticalOptions });\r\n        }\r\n\r\n        else if (strategicChoice === \"Declare War\") {\r\n            console.log(`ComputerPlayer.ts: playTurn: Declaring war!`);\r\n        }\r\n        else {\r\n            console.log(`ComputerPlayer.ts: playTurn: skipping my turn.`);\r\n        }\r\n\r\n    }\r\n\r\n    private buildBases(args: { numberToBuild: number, allowedBases: tacticalMoveOptions[] }) {\r\n\r\n        console.log(`ComputerPlayer.ts: buildBases: Entering, will build ${args.numberToBuild} bases.`);\r\n\r\n        for (let i = 0; i < args.numberToBuild; i++) {\r\n\r\n            const toBuild = Rng.pickRandomFromArray({ sourceArray: args.allowedBases });\r\n            console.log(`ComputerPlayer.ts: buildBases: Entering, will build base:`, toBuild);\r\n\r\n            const mapLoc = this.getRandomLocation({ fromMap: this.map });\r\n\r\n            // const randX = Rng.throwDice({ hiNumberMinus1: 9 });\r\n            // const randY = Rng.throwDice({ hiNumberMinus1: 9 });\r\n\r\n            // const mapLoc = this.map.map[randX][randY];\r\n\r\n            const base = MilitaryBaseFactory.getInstance().createNewBase({ baseType: toBuild, atLocation: mapLoc });\r\n\r\n            if (base) { mapLoc.placeItem({ itemToPlace: base }); }\r\n        }\r\n\r\n        this.map.logDetailedMapToConsole();\r\n\r\n    }\r\n\r\n    private getRandomLocation(args: { fromMap: CountryMap }) {\r\n        const randX = Rng.throwDice({ hiNumberMinus1: 9 });\r\n        const randY = Rng.throwDice({ hiNumberMinus1: 9 });\r\n\r\n        return args.fromMap.map[randX][randY];\r\n    }\r\n}","import { AbstractPlayer } from \"./AbstractPlayer\";\r\nimport { CountryMap } from \"../Entities/WorldObjects/CountryMap\";\r\nimport { MapUtil } from \"../Utils/MapUtils\";\r\n\r\nexport class HumanPlayer extends AbstractPlayer  {\r\n    \r\n    public totalFunctionalPassiveRadarStations: number;\r\n    public totalFunctionalActiveRadarStations: number;\r\n    \r\n    public declaredWar: boolean;\r\n    public Name: string;\r\n    public map: CountryMap;\r\n    public totalCausualties: number = 0;\r\n\r\n    constructor() {\r\n        super({isHuman: true});\r\n\r\n        this.map = new CountryMap({sizeX: 10, sizeY: 10, ownerLabel: \"Human\", owningPlayer: this});\r\n        this.Name = \"Human\";\r\n        this.declaredWar = false;\r\n        this.totalFunctionalActiveRadarStations = 0;\r\n        this.totalFunctionalPassiveRadarStations = 0;\r\n        this.totalCausualties = 0;\r\n\r\n        MapUtil.createTestBases({onMap: this.map});\r\n    }\r\n\r\n}","import { Rng } from \"../Utils/Rng\";\r\n\r\nexport class GameData {\r\n\r\n\r\n    private static readonly allComputerNames = [\r\n        \"The Engine\",\r\n        \"Games Machine\",\r\n        \"Joe\",\r\n        \"MARAX\",\r\n        \"EPICAC\",\r\n        \"EMSIAC\",\r\n        \"The Prime Radiant\",\r\n        \"Mark V\",\r\n        \"Karl\",\r\n        \"Mimi\",\r\n        \"Gold\",\r\n        \"Bossy\",\r\n        \"The City Fathers\",\r\n        \"Multivac\",\r\n        \"The Central Computer\",\r\n        \"Vulcan 2\",\r\n        \"Vulcan 3\",\r\n        \"Great Coordinator\",\r\n        \"Merlin\",\r\n        \"GENiE\",\r\n        \"Colossus\",\r\n        \"Guardian\",\r\n        \"Frost\",\r\n        \"The Ox\",\r\n        \"Supreme\",\r\n        \"ZORAC\",\r\n        \"Deep Thought\",\r\n        \"Ghostwheel\",\r\n        \"Com Pewter\",\r\n        \"Mother\",\r\n        \"C Cube\",\r\n        \"Glooper\",\r\n        \"Lobsang\",\r\n        \"Hal\"\r\n    ];\r\n\r\n    \r\n    public static getRandomComputerName(): string {\r\n        return Rng.pickRandomFromArray({ sourceArray: this.allComputerNames });\r\n    }\r\n\r\n}","import { ComputerPlayer } from \"../Game/ComputerPlayer\";\r\nimport { HumanPlayer } from \"../Game/HumanPlayer\";\r\nimport { GameLogic } from \"../Game/GameLogic\";\r\nimport { AbstractPlayer } from \"../Game/AbstractPlayer\";\r\nimport { GameData } from \"../Data/ComputerNames\";\r\nimport { GameRules } from \"../Game/GameRules\";\r\n\r\nexport interface GameEntity {\r\n    gameYear: number;\r\n}\r\n\r\nexport abstract class AbstractGameEntity implements GameEntity {\r\n    abstract gameYear: number;\r\n}\r\n\r\nexport class Game extends AbstractGameEntity {\r\n\r\n    private static instance: Game;\r\n\r\n    public isPeacetime: boolean = true;\r\n    public isWartime: boolean = false;\r\n    \r\n    public turn: number = 0;\r\n    public get gameYear() { return this.turn + GameRules.GameStartYear;}\r\n    \r\n    public computerPlayer!: ComputerPlayer;\r\n    public humanPlayer!: HumanPlayer;\r\n    public currentPlayer!: AbstractPlayer;\r\n\r\n    private constructor() {\r\n        super();\r\n\r\n    }\r\n\r\n    private initializeGame() {\r\n        this.computerPlayer = new ComputerPlayer();\r\n        this.computerPlayer.Name = GameData.getRandomComputerName();\r\n        this.humanPlayer = new HumanPlayer();\r\n        this.currentPlayer = this.humanPlayer;\r\n    }\r\n\r\n    public static getInstance() {\r\n        \r\n        if (! this.instance) {\r\n            this.instance = new Game();\r\n            this.instance.initializeGame();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    public startGame() {\r\n        \r\n        GameLogic.startClock();\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\ninterface props {\r\n    tickerMessage: string;\r\n    tickerInterval: number;\r\n    onRenderCompleteCallback?: () => void;\r\n}\r\n\r\ninterface state {\r\n}\r\n\r\nexport class TickerComponent extends Component<props, state> {\r\n\r\n    private idx: number = 0;\r\n    private static nextHtmlID: number = 0;\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n    }\r\n\r\n    showMessage(forHtmLID: string) {\r\n\r\n        const msgTextElem = document.getElementById(forHtmLID);\r\n        if (msgTextElem) {\r\n            msgTextElem.innerHTML = \"&nbsp;\";\r\n        }\r\n\r\n        this.idx = 0;\r\n\r\n        const intervalHandler = setInterval(() => {\r\n            if (msgTextElem) {\r\n                msgTextElem.innerHTML = this.props.tickerMessage.substring(0, this.idx++) + \"█\";\r\n            }\r\n        }, this.props.tickerInterval);\r\n\r\n        setTimeout(() => {\r\n            // console.log(\"clearing\");\r\n            clearInterval(intervalHandler);\r\n            if (msgTextElem) {\r\n                msgTextElem.innerHTML = this.props.tickerMessage;\r\n            }\r\n            if (this.props.onRenderCompleteCallback) {this.props.onRenderCompleteCallback()};\r\n\r\n        }, this.props.tickerInterval * this.props.tickerMessage.length + this.props.tickerInterval * 3);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const htmlID = `ticker_${TickerComponent.nextHtmlID++}`;\r\n        // console.log(`TickerComponent: render: Entering.`);\r\n\r\n        // Give the ticker a moment to get started.\r\n        setTimeout(() => {\r\n            this.showMessage(htmlID);\r\n        }, 50);\r\n\r\n        return (\r\n            <span id={htmlID}></span>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Game } from '../Entities/gameEntity';\r\nimport { GamestateWatcher, GameLogic, gameStateChangeDetails } from '../Game/GameLogic';\r\nimport { TickerComponent } from './TickerComponent';\r\n\r\ninterface state {\r\n    yearMessage: string,\r\n}\r\n\r\ninterface props { }\r\n\r\nexport class GameHeaderComponent extends Component<props, state> implements GamestateWatcher {\r\n\r\n    private readonly yearMessageTemplate: string = \"The year was blah, a time of blah.\";\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            yearMessage: \"\",\r\n        }\r\n\r\n        // Tell the game logic guy that I want to know when impotant things change to game state.\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        // console.log(`GameHeaderComponent: handleGamestateChange: Got a game state change.`);\r\n\r\n        if (args.details.changeLabel === \"Advance Turn\" || args.details.changeLabel === \"War Declared\") {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(`GameHeaderComponent: render: Entering.`);\r\n        const game: Game = Game.getInstance();\r\n\r\n        return (\r\n            <div className=\"gameYearContainer\">\r\n                {\r\n                    game.isPeacetime \r\n                        ? <TickerComponent tickerInterval={25} tickerMessage={`The year was ${game.gameYear}, a time of ${game.isPeacetime ? \"peace\" : \"war!\"}`} />\r\n                        : <TickerComponent tickerInterval={25} tickerMessage={`The year was ${game.gameYear}, where a state of WAR existed in the world.`} />\r\n\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import { withStyles, Button } from \"@material-ui/core\";\r\n\r\nexport class UIComponent {\r\n\r\npublic static GameButton = withStyles({\r\n    root: {\r\n    //   background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n      borderRadius: 3,\r\n      border: 0,\r\n      color: '#FFB000',\r\n      height: 48,\r\n      padding: '0 30px',\r\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    },\r\n    label: {\r\n      textTransform: 'capitalize',\r\n    },\r\n  })(Button);\r\n  \r\n}\r\n","import React, { Component, SyntheticEvent } from 'react';\r\nimport { tacticalMoveOptions } from '../Game/GameRules';\r\nimport { MilitaryBaseTypes } from '../Entities/WorldObjects/Bases/MilitaryBaseTypes';\r\nimport { MapLocation } from '../Entities/MapObjects/MapLocation';\r\nimport { TickerComponent } from './TickerComponent';\r\nimport { GamestateWatcher, gameStateChangeDetails, GameLogic } from '../Game/GameLogic';\r\nimport { Constants } from '../Game/constants';\r\nimport { Button } from '@material-ui/core';\r\nimport { buildBaseResult } from './MapComponents/MapComponent';\r\nimport { UIComponent } from './GameButton';\r\nimport { constants } from 'os';\r\n\r\ninterface props {\r\n    allowedBasesToBuild: tacticalMoveOptions[],\r\n    totalAllowedToBuild: number;\r\n}\r\n\r\ninterface buildSelection {\r\n    buildWhat: MilitaryBaseTypes | null;\r\n    buildWhere: MapLocation | null;\r\n    didBuild: boolean;\r\n    buildResultText: string | null;\r\n}\r\n\r\ninterface state {\r\n    buildManifest: buildSelection[];\r\n}\r\n\r\nexport class BuildManifestComponent extends Component<props, state> implements GamestateWatcher {\r\n\r\n    private uiIdx: number = 0;\r\n    private readonly uiKey = () => this.uiIdx++;\r\n    private readonly emptyManifestSelection: buildSelection = { buildWhat: null, buildWhere: null, didBuild: false, buildResultText: null };\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            buildManifest: []\r\n        }\r\n\r\n        // Tell the game logic guy that I want to know when impotant things change to game state.\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n        // console.log(`BuildManifestComponent.ts: handleGamestateChange: Got a game state change:`, {details: args.details});\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // console.log(`BuildManifestComponent: componentDidMount: state and props:`, { state: this.state, props: this.props});\r\n\r\n        this.setState({\r\n            buildManifest: new Array(this.props.totalAllowedToBuild).fill(this.emptyManifestSelection)\r\n        });\r\n\r\n    }\r\n\r\n    private handleDropResult(args: {result: buildBaseResult}) {\r\n        console.log(`BuidManifestComponent: handleDropResult: drop finished, result:`, args.result);\r\n\r\n        this.setState({\r\n            buildManifest: this.state.buildManifest.reduce( (prev, curr, idx) => {\r\n\r\n                if (idx === args.result.manifestIndex) {\r\n                    const newBuildManfest: buildSelection = {\r\n                        buildWhat: null,\r\n                        buildWhere: null,\r\n                        didBuild: args.result.didSucceed,\r\n                        buildResultText: args.result.message\r\n                    }\r\n\r\n                    console.log(`BuidManifestComponent: handleDropResult: updated manifest:`, {updatedManifest: newBuildManfest});\r\n\r\n                    return prev.concat(newBuildManfest);\r\n                }\r\n                else {\r\n                    return prev.concat(curr);\r\n                }\r\n\r\n            }, [] as buildSelection[])\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(`BuildManifestComponent: render: Entering with props and state:`, {props: this.props, state: this.state});\r\n\r\n        const buildManifestCompleteMarkup = () => {\r\n            return (\r\n                <div>\r\n                    All base assignments complete.\r\n                    <UIComponent.GameButton onClick={\r\n                        () => {\r\n                            console.log(`BuildManifestComponent: render: manifestCompleteMarkup: finish turn.`)\r\n                            GameLogic.finishHumanTurn();\r\n                        }}>\r\n                        Finish Turn</UIComponent.GameButton>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const dragStartMarkup = (args: {dragEvent: React.DragEvent, baseType: tacticalMoveOptions, manifiestIndex: number}) => {\r\n            console.log(`BuildManifestComponent: tacticalOptionsMarkup: onDragStart: e, ab:`, \r\n            { \r\n                e: args.dragEvent, \r\n                ab: args.baseType,\r\n                manifestIndex: args.manifiestIndex\r\n            });\r\n\r\n            args.dragEvent.dataTransfer.setData(Constants.DROPTYPE, Constants.BUILD_DROP);\r\n            args.dragEvent.dataTransfer.setData(Constants.BASETYPE, args.baseType as string);\r\n            args.dragEvent.dataTransfer.setData(Constants.MANIFESTINDEX, args.manifiestIndex.toString());\r\n            \r\n            (window as any)[Constants.NOTIFY_BUILD_RESULT_CALLBACK_NAME] = this.handleDropResult.bind(this);\r\n        }\r\n\r\n        const allowedBaseMarkup = (args: {forManifestIndex: number}) => {\r\n            return (\r\n                this.props.allowedBasesToBuild.map((allowedBase, idx) => (\r\n                    <span key={this.uiKey()}\r\n                        draggable\r\n                        onDragStart={(e) => dragStartMarkup({baseType:allowedBase, dragEvent: e, manifiestIndex: args.forManifestIndex})}\r\n                        onDragEnd={\r\n                            (e) => {\r\n                                console.log(`BuildManifestComponent: tacticalOptionsMarkup: onDragEnd: e, ab:`,\r\n                                    { e, ab: allowedBase }\r\n                                )\r\n                            }\r\n                        }\r\n                    >\r\n                        {individualAllowedBaseMarkup({forBaseType: allowedBase as string})}\r\n                        {/* <img src=\"images/airbase1.png\"/> {allowedBase} |&nbsp; */}\r\n                </span>\r\n                )))\r\n        };\r\n\r\n        const individualAllowedBaseMarkup = (args: {forBaseType: string}) => {\r\n\r\n            const title = `${args.forBaseType} base`;\r\n            const baseTokenSrc = `images/baseTokens/${args.forBaseType}base.png`\r\n            return (<span><img src={baseTokenSrc} width=\"20\" height=\"20\" title={title}/> {args.forBaseType}</span>);\r\n        }   \r\n\r\n        const qtyMessage = () => {\r\n            return (\r\n                this.props.totalAllowedToBuild > 1\r\n                    ? <div>\r\n                        <TickerComponent tickerInterval={20} tickerMessage={`You are allowed to build ${this.props.totalAllowedToBuild} bases.`} /></div>\r\n                    : <div>{`You are allowed to build 1 base.`}</div>\r\n            );\r\n        };\r\n\r\n        const manifestMarkup = () => {\r\n\r\n            console.log(`BuildManifestComponent: manifestMarkup: building up a selection:`, this.state.buildManifest);\r\n\r\n            return this.state.buildManifest.map((selection, idx) => {\r\n                return (\r\n                    <div key={this.uiKey()}>\r\n                        Option: {idx}: &nbsp;\r\n                        Build what: {selection.didBuild ? selection.buildResultText : allowedBaseMarkup({forManifestIndex: idx})}\r\n                        &nbsp;\r\n                        Did Build? {selection.didBuild ? \"Yes\" : \"No\"}\r\n                        {\r\n                            (selection.buildResultText && ! selection.didBuild) ? selection.buildResultText : null\r\n                        }\r\n                    </div>\r\n                )\r\n            });\r\n        }\r\n\r\n        const toRender = (\r\n            <React.Fragment>\r\n\r\n                {qtyMessage()}\r\n\r\n                {\r\n                    <div>\r\n                        <h5><TickerComponent tickerInterval={25} tickerMessage=\"Build manifest:\"/></h5>\r\n                        {manifestMarkup()}\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    this.state.buildManifest.filter(m => m.didBuild).length === this.state.buildManifest.length\r\n                        ? buildManifestCompleteMarkup()\r\n                        : null\r\n                }\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n        return toRender;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { AbmBase } from '../../Entities/WorldObjects/Bases/AbmBase';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: AbmBase;\r\n}\r\n\r\ninterface state {\r\n}\r\n\r\nexport class AbmBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(`AbmBaseComponent: componentDidMount: state and props:`, { state: this.state, props: this.props });\r\n\r\n    }\r\n\r\n    private activateAbmBase() {\r\n        GameLogic.activateAbmBase({ forBase: this.props.base });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {base} = this.props;\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => this.activateAbmBase()}>\r\n                    Enable Active Tracking\r\n                </UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const isTrackingMarkup =\r\n            <React.Fragment>\r\n                <span>\r\n                    {\r\n                        `Actively tracking incoming missiles and bombers, ${base.totalMissiles} missiles remain in arsenal.`\r\n                    }\r\n                </span>\r\n            </React.Fragment>;\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Spinning up...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <div>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup = \r\n            <React.Fragment>\r\n                <span>ABM base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n\r\n        return (\r\n\r\n            this.props.base.isReceivingOrders\r\n                ? (\r\n                    this.props.base.isTracking ? wrapper(isTrackingMarkup) : wrapper(readyToActivateMarkup)\r\n                )\r\n                : wrapper(isNotReceivingOrdersMarkup)\r\n        );\r\n\r\n    };\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { RadarBase } from '../../Entities/WorldObjects/Bases/RadarBase';\r\nimport { Button } from '@material-ui/core';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { MapLocation } from '../../Entities/MapObjects/MapLocation';\r\nimport { MapUtil } from '../../Utils/MapUtils';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: RadarBase\r\n}\r\n\r\ninterface state {\r\n    didActivate: boolean;\r\n}\r\n\r\nexport class RadarBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            didActivate: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(`RadarBaseComponent: componentDidMount: state and props:`, { state: this.state, props: this.props });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { base } = this.props;\r\n\r\n        const setMode = (args: { mode: \"Active\" | \"Passive\" }) => {\r\n            base.setModeOfOperation(args);\r\n            this.setState({ didActivate: true });\r\n            this.handleRaderPulser({ forBase: base });\r\n            GameLogic.activateRadarBase({ forBase: base });\r\n        }\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => setMode({ mode: \"Active\" })}>Go Active</UIComponent.GameButton>\r\n                <UIComponent.GameButton onClick={() => setMode({ mode: \"Passive\" })}>Go Passive</UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const isActivatedMarkup =\r\n            <React.Fragment>\r\n                <span>Mode: {base.modeOfOperation} Tracking</span>\r\n            </React.Fragment>\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Warming up...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <div>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup =\r\n            <React.Fragment>\r\n                <span>Radar base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n\r\n        return (\r\n            this.props.base.isReceivingOrders\r\n                ? (\r\n                    this.props.base.modeOfOperation === \"Inactive\" ? wrapper(readyToActivateMarkup) : wrapper(isActivatedMarkup)\r\n                )\r\n                : wrapper(isNotReceivingOrdersMarkup)\r\n        );\r\n    };\r\n\r\n    private handleRaderPulser(args: { forBase: RadarBase }) {\r\n\r\n        const mapLocElement = document.getElementById(MapUtil.getMapLocationHtmlID(args.forBase.myMapLocation));\r\n\r\n        const { modeOfOperation } = args.forBase;\r\n\r\n        const pulseUp = `${modeOfOperation === \"Active\" ? \"active\" : \"passive\"}RadarPulseUp`;\r\n        const pulseDown = `${modeOfOperation === \"Active\" ? \"active\" : \"passive\"}RadarPulseDown`;\r\n\r\n        setInterval(() => {\r\n            if (mapLocElement) {\r\n\r\n                mapLocElement.classList.remove(pulseUp);\r\n                mapLocElement.classList.remove(pulseDown);\r\n\r\n                mapLocElement.classList.add(pulseUp);\r\n\r\n                setTimeout(() => {\r\n                    mapLocElement.classList.add(pulseDown);\r\n                }, 3000);\r\n\r\n            }\r\n        }, 6000);\r\n\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport { Constants } from '../Game/constants';\r\nimport { MissileBase } from '../Entities/WorldObjects/Bases/MissileBase';\r\nimport { GameLogic, GamestateWatcher, gameStateChangeDetails } from '../Game/GameLogic';\r\nimport { targetMissileResult } from './MapComponents/MapComponent';\r\nimport { NavyBase } from '../Entities/WorldObjects/Bases/NavyBase';\r\nimport { AirBase } from '../Entities/WorldObjects/Bases/AirBase';\r\nimport { Game } from '../Entities/gameEntity';\r\n\r\nexport interface props { \r\n    parentBase: MissileBase | NavyBase | AirBase;\r\n    ordnanceLabel: string;\r\n    targetingCompleteCallback: () => void;\r\n}\r\n\r\nexport interface state { }\r\n\r\nexport class OrdnanceTargetingComponent extends React.Component<props, state> implements GamestateWatcher{\r\n\r\n    private nextUIKey: number = 0;\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n    }\r\n\r\n    private uiKey() { return `OrdnanceTargetingComponent_${this.nextUIKey++}` }\r\n\r\n    componentDidMount() {\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        // console.log(`MapComponent: handleGamestateChange: Got a game state change:`, args);\r\n    \r\n        if (args.details.changeLabel === \"Location Nuked\") {\r\n          this.forceUpdate();\r\n        }\r\n      }\r\n    \r\n    render() {\r\n\r\n        const {ordnanceLabel } = this.props;\r\n\r\n        const dragStartMarkup = (args: { dragEvent: React.DragEvent, missileIndex: number }) => {\r\n            console.log(`OrdnanceTargetingComponent: tacticalOptionsMarkup: onDragStart: e, index:`,\r\n                {\r\n                    e: args.dragEvent,\r\n                    manifestIndex: args.missileIndex\r\n                });\r\n\r\n            args.dragEvent.dataTransfer.setData(\"dropType\", Constants.TARGET_MISSILE_DROP);\r\n            args.dragEvent.dataTransfer.setData(\"missileIndex\", args.missileIndex.toString());\r\n\r\n            (window as any)[Constants.NOTIFY_TARGET_RESULT_CALLBACK_NAME] = this.handleDropResult.bind(this);\r\n\r\n\r\n        }\r\n\r\n        const targetedMarkup = (args: { forMissileIndex: number}) => {\r\n            return (\r\n                <div key={this.uiKey()}>\r\n                    {`${ordnanceLabel} ${args.forMissileIndex} is targeted.`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const wasInterceptedMarkup = (args: {forMissileIndex: number}) => {\r\n            return (\r\n                <div key={this.uiKey()}>\r\n                    {`${ordnanceLabel} ${args.forMissileIndex} was shot down.`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const consumedMarkup = (args: { forMissileIndex: number}) => {\r\n            return (\r\n                <div key={this.uiKey()}>\r\n                    {`${ordnanceLabel} ${args.forMissileIndex} hit its target.`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const toTargetMarkup = (args: { forMissileIndex: number }) => {\r\n            return (\r\n                    <div key={this.uiKey()}\r\n                        draggable\r\n                        onDragStart={(e) => dragStartMarkup({ dragEvent: e, missileIndex: args.forMissileIndex })}\r\n                    >\r\n                        {`${ordnanceLabel} ${args.forMissileIndex}.`}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        return (\r\n            this.props.parentBase.ordnance.map( (m, idx) => {\r\n\r\n                // console.log(`OrdnanceTargetComponent: mapping ordnance for render:`, {currentMissile: m});\r\n\r\n                if (m.wasIntercepted) { return wasInterceptedMarkup({forMissileIndex: idx})}\r\n                \r\n                if (m.wasConsumed) { return consumedMarkup({forMissileIndex: idx}) }\r\n\r\n                if (m.myTarget !== null) {\r\n                    return targetedMarkup({forMissileIndex: idx});\r\n                }\r\n\r\n                return toTargetMarkup({forMissileIndex: idx});\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    private handleDropResult(args: { result: targetMissileResult }) {\r\n        console.log(`OrdnanceTargetingComponent: handleDropResult: drop finished, result:`, args.result);\r\n\r\n        const currentPlayerType = this.props.parentBase.myMapLocation.myMap.owner;\r\n\r\n        GameLogic.handleMissileTargeted(\r\n            {\r\n                attackingPlayer: currentPlayerType === \"Computer\" ? Game.getInstance().computerPlayer : Game.getInstance().humanPlayer,\r\n                atMapLocation: args.result.targetedLocation, \r\n                targetingOrdnance: this.props.parentBase.ordnance[args.result.missileIndex]\r\n            });\r\n        \r\n        if (this.props.parentBase.isAllOrdnanceTargeted()) {\r\n            this.props.targetingCompleteCallback();\r\n        }\r\n        else {\r\n        this.forceUpdate();\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { NavyBase } from '../../Entities/WorldObjects/Bases/NavyBase';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { OrdnanceTargetingComponent } from '../OrdnanceTargetingComponent';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: NavyBase;\r\n}\r\n\r\ninterface state {\r\n    isTargetingMissiles: boolean;\r\n}\r\n\r\nexport class NavyBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            isTargetingMissiles: false\r\n        }\r\n\r\n    }\r\n\r\n    private activateNavyBase() {\r\n        console.log(`NavyBaseComponent: activateNavyBase: entering.`);\r\n        // GameLogic.activateNavyBase({ forBase: this.props.base });\r\n        this.setState({ isTargetingMissiles: true });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { ordnance } = this.props.base;\r\n        const { base } = this.props;\r\n\r\n        const isTargetingMarkup =\r\n            <React.Fragment>\r\n                <span>{`Targeting ${ordnance.length} missiles.`}<br /></span>\r\n                <OrdnanceTargetingComponent\r\n                    ordnanceLabel={\"Submarine missile\"}\r\n                    parentBase={this.props.base}\r\n                    targetingCompleteCallback={() => this.setState({ isTargetingMissiles: false })}\r\n                />\r\n            </React.Fragment>;\r\n\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => this.activateNavyBase()}>\r\n                    {`Target ${ordnance.length} Missiles`}\r\n                </UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const allTargetedMarkup =\r\n            <React.Fragment>\r\n                <span>\r\n                    {\r\n                        `${ordnance.length} en route.`\r\n                    }\r\n                </span>\r\n            </React.Fragment>;\r\n\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Setting sail...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <React.Fragment>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </React.Fragment>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup =\r\n            <React.Fragment>\r\n                <span>Nave Base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n        if (this.state.isTargetingMissiles) { return wrapper(isTargetingMarkup); }\r\n        if (!base.isReceivingOrders) { return wrapper(isNotReceivingOrdersMarkup); }\r\n        if (base.isAllOrdnanceTargeted()) { return wrapper(allTargetedMarkup); }\r\n\r\n        return wrapper(readyToActivateMarkup);\r\n\r\n    };\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { MissileBase } from '../../Entities/WorldObjects/Bases/MissileBase';\r\nimport { Button } from '@material-ui/core';\r\nimport { OrdnanceTargetingComponent } from '../OrdnanceTargetingComponent';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: MissileBase;\r\n}\r\n\r\ninterface state {\r\n    isTargetingMissiles: boolean;\r\n}\r\n\r\nexport class MissileBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            isTargetingMissiles: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(`MissileBaseComponent: componentDidMount: state and props:`, { state: this.state, props: this.props });\r\n\r\n    }\r\n\r\n    private activateMissileBase() {\r\n        console.log(`MissileBaseComponent: activateMissileBase: entering.`);\r\n        GameLogic.activateMissileBase({ forBase: this.props.base });\r\n        this.setState({ isTargetingMissiles: true });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {base} = this.props;\r\n\r\n        const isTargetingMarkup =\r\n            <React.Fragment>\r\n                <span>{`Targeting ${base.ordnance.length} missiles.`}<br /></span>\r\n                <OrdnanceTargetingComponent\r\n                    ordnanceLabel={\"ICBM\"}\r\n                    parentBase={base}\r\n                    targetingCompleteCallback={() => this.setState({ isTargetingMissiles: false })}\r\n                />\r\n            </React.Fragment>;\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => this.activateMissileBase()}>\r\n                    {`Target ${base.ordnance.length} Missiles`}\r\n                </UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const allTargetedMarkup =\r\n            <React.Fragment>\r\n                <span>\r\n                    {\r\n                        `${base.ordnance.length} en route.`\r\n                    }\r\n                </span>\r\n            </React.Fragment>;\r\n\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Fueling missiles...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <div>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup = \r\n            <React.Fragment>\r\n                <span>Missile base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n        if (this.state.isTargetingMissiles) { return wrapper(isTargetingMarkup); }\r\n        if (!base.isReceivingOrders) { return wrapper(isNotReceivingOrdersMarkup); }\r\n        if (base.isAllOrdnanceTargeted()) { return wrapper(allTargetedMarkup); }\r\n\r\n        return wrapper(readyToActivateMarkup);\r\n\r\n    };\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { AirBase } from '../../Entities/WorldObjects/Bases/AirBase';\r\nimport { Button } from '@material-ui/core';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { OrdnanceTargetingComponent } from '../OrdnanceTargetingComponent';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: AirBase;\r\n}\r\n\r\ninterface state {\r\n    isTargetingBombers: boolean;\r\n}\r\n\r\nexport class AirBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            isTargetingBombers: false\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(`AirBaseComponent: componentDidMount: state and props:`, { state: this.state, props: this.props });\r\n\r\n    }\r\n\r\n    private activateAirBase() {\r\n        console.log(`AirbaseComponent: activateAirBase: entering.`);\r\n        // GameLogic.activateAirBase({ forBase: this.props.base });\r\n        this.setState({ isTargetingBombers: true });\r\n    }\r\n\r\n    private handleAllOrdnanceTargeted() {\r\n        this.setState({\r\n            isTargetingBombers: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(`AirBaseComponent: render: entering with state and props:`, { state: this.state, props: this.props });\r\n\r\n        const {base} = this.props;\r\n\r\n        const isTargetingMarkup =\r\n            <React.Fragment>\r\n                <span>{`Targeting ${base.ordnance.length} bombers.`}<br /></span>\r\n                <OrdnanceTargetingComponent\r\n                    ordnanceLabel={\"Bomber\"}\r\n                    parentBase={base}\r\n                    targetingCompleteCallback={() => this.setState({ isTargetingBombers: false })}\r\n                />\r\n            </React.Fragment>;\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => this.activateAirBase()}>\r\n                    {`Scramble ${base.totalFighters} fighters and ${base.ordnance.length} bombers.`}\r\n                </UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const isFlyingMarkup =\r\n            <React.Fragment>\r\n                <span>\r\n                    {\r\n                        `${base.totalFighters} on patrol. ${base.ordnance.length} bombers en route to their target.`\r\n                    }\r\n                </span>\r\n            </React.Fragment>;\r\n\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Flight crews prepping...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <div>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup = \r\n            <React.Fragment>\r\n                <span>Air base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n        if (this.state.isTargetingBombers) { return wrapper(isTargetingMarkup); }\r\n        if (!base.isReceivingOrders) { return wrapper(isNotReceivingOrdersMarkup); }\r\n        if (base.isAllOrdnanceTargeted()) { return wrapper(isFlyingMarkup); }\r\n\r\n        return wrapper(readyToActivateMarkup);\r\n\r\n    };\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { ArmyBase } from '../../Entities/WorldObjects/Bases/ArmyBase';\r\nimport { GameLogic } from '../../Game/GameLogic';\r\nimport { UIComponent } from '../GameButton';\r\n\r\ninterface props {\r\n    base: ArmyBase;\r\n}\r\n\r\ninterface state {\r\n}\r\n\r\nexport class ArmyBaseComponent extends Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(`ArmyBaseComponent: componentDidMount: state and props:`, { state: this.state, props: this.props });\r\n\r\n    }\r\n\r\n    private decampArmy() {\r\n        GameLogic.activateArmyBase({ forBase: this.props.base });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {base} = this.props;\r\n\r\n        const readyToActivateMarkup =\r\n            <React.Fragment>\r\n                <UIComponent.GameButton onClick={() => this.decampArmy()}>\r\n                    Decamp\r\n                </UIComponent.GameButton>\r\n            </React.Fragment>;\r\n\r\n        const isDecampedMarkup =\r\n            <React.Fragment>\r\n                <span>\r\n                    {\r\n                        `Operating...`\r\n                    }\r\n                </span>\r\n            </React.Fragment>;\r\n\r\n        const isNotReceivingOrdersMarkup =\r\n            <React.Fragment>\r\n                <span>Organizing...</span>\r\n            </React.Fragment>;\r\n\r\n        const wrapper = (toWrap: JSX.Element) => {\r\n            return (\r\n                <div>\r\n                    <span>{`${base.WorldObjectLabel}: ${base.Name}`}</span>\r\n                    {toWrap}\r\n                </div>\r\n            )\r\n        };\r\n\r\n        const wasDestroyedMarkup = \r\n            <React.Fragment>\r\n                <span>Army base ${base.Name} was destroyed.</span>\r\n            </React.Fragment>\r\n\r\n\r\n        if (base.wasDestroyed) { return wasDestroyedMarkup }\r\n\r\n        return (\r\n            base.isReceivingOrders\r\n                ? (\r\n                    base.isDecamped ? wrapper(isDecampedMarkup) : wrapper(readyToActivateMarkup)\r\n                )\r\n                : wrapper(isNotReceivingOrdersMarkup)\r\n        );\r\n\r\n    };\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HumanPlayer } from '../Game/HumanPlayer';\r\nimport { MapLocation } from '../Entities/MapObjects/MapLocation';\r\nimport { MilitaryBaseTypes } from '../Entities/WorldObjects/Bases/MilitaryBaseTypes';\r\nimport { GamestateWatcher, GameLogic, gameStateChangeDetails } from '../Game/GameLogic';\r\nimport { AbmBaseComponent } from './MilitaryBaseComponents/AbmBaseComponent';\r\nimport { RadarBaseComponent } from './MilitaryBaseComponents/RadarBaseComponent';\r\nimport { NavyBaseComponent } from './MilitaryBaseComponents/NavyBaseComponent';\r\nimport { MissileBaseComponent } from './MilitaryBaseComponents/MissileBaseComponent';\r\nimport { AirBaseComponent } from './MilitaryBaseComponents/AirBaseComponent';\r\nimport { ArmyBaseComponent } from './MilitaryBaseComponents/ArmyBaseComponent';\r\nimport { RadarBase } from '../Entities/WorldObjects/Bases/RadarBase';\r\nimport { AirBase } from '../Entities/WorldObjects/Bases/AirBase';\r\nimport { AbmBase } from '../Entities/WorldObjects/Bases/AbmBase';\r\nimport { ArmyBase } from '../Entities/WorldObjects/Bases/ArmyBase';\r\nimport { MissileBase } from '../Entities/WorldObjects/Bases/MissileBase';\r\nimport { NavyBase } from '../Entities/WorldObjects/Bases/NavyBase';\r\nimport { AbstractMilitaryBase } from '../Entities/WorldObjects/Bases/AbstractMilitaryBase';\r\nimport { MapUtil } from '../Utils/MapUtils';\r\n\r\ninterface props {\r\n    player: HumanPlayer;\r\n    registerForHumanPlayerMapClicks: (args: { ui: BaseActivatorComponent }) => void;\r\n}\r\n\r\ntype baseComponent = AbmBaseComponent |\r\n    AirBaseComponent |\r\n    MissileBaseComponent |\r\n    ArmyBaseComponent |\r\n    NavyBaseComponent |\r\n    RadarBaseComponent;\r\n\r\ninterface initializedBase {\r\n    baseEntity: Exclude<MilitaryBaseTypes, null>;\r\n    ui: baseComponent;\r\n}\r\n\r\ninterface state {\r\n    isWaitingForSelection: boolean;\r\n    activeBases: initializedBase[];\r\n    inactiveBases: initializedBase[];\r\n    destroyedBases: initializedBase[];\r\n}\r\n\r\nexport class BaseActivatorComponent extends Component<props, state> implements GamestateWatcher {\r\n\r\n    private uiKeyNbr: number = 0;\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            isWaitingForSelection: false,\r\n            activeBases: [],\r\n            inactiveBases: [],\r\n            destroyedBases: []\r\n        }\r\n\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        if (args.details.changeLabel === \"Location Nuked\") {\r\n\r\n            const destroyedBases1 = this.state.activeBases.filter(ab => ab.baseEntity.wasDestroyed);\r\n            const destroyedBases2 = this.state.inactiveBases.filter(ib => ib.baseEntity.wasDestroyed);\r\n\r\n            this.setState({\r\n                destroyedBases: this.state.destroyedBases.concat(destroyedBases1).concat(destroyedBases2),\r\n                activeBases: this.state.activeBases.filter(ab => ! ab.baseEntity.wasDestroyed),\r\n                inactiveBases: this.state.inactiveBases.filter(ib => ! ib.baseEntity.wasDestroyed)\r\n            })\r\n        }\r\n\r\n        if (args.details.changeLabel === \"Tick\") {\r\n\r\n            if (this.state.inactiveBases.length > 0) {\r\n\r\n                this.state.inactiveBases[0].baseEntity.activate();\r\n                this.handleBaseActivatedAnimation({forBase: this.state.inactiveBases[0]});\r\n\r\n                this.setState({\r\n                    activeBases: this.state.activeBases.concat(this.state.inactiveBases[0]),\r\n                    inactiveBases: this.state.inactiveBases.slice(1)\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private handleBaseActivatedAnimation(args: {forBase: initializedBase}) {\r\n        const mapLocElement = document.getElementById(MapUtil.getMapLocationHtmlID(args.forBase.baseEntity.myMapLocation));\r\n        if (mapLocElement) {\r\n            mapLocElement.classList.remove(\"activatedBase\");\r\n            mapLocElement.classList.add(\"activatedBase\");\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.registerForHumanPlayerMapClicks({ ui: this });\r\n\r\n        const getInitializeBased = (base: Exclude<MilitaryBaseTypes,null>) => { \r\n            return ( \r\n                {\r\n                    baseEntity: base as any,\r\n                    ui: this.getBaseUI({forBase: base}) as any\r\n                } as initializedBase\r\n            )\r\n         }\r\n\r\n         const allPlayerMilitaryBases = this.props.player.map.getAllMilitaryBases();\r\n\r\n         const initializedBases = allPlayerMilitaryBases.map(b => getInitializeBased(b));\r\n\r\n         this.setState({\r\n             inactiveBases: initializedBases\r\n         });\r\n\r\n    }\r\n\r\n    private uiKey() { return `BaseActivatorComponent_${this.uiKeyNbr++}` }\r\n\r\n    public handlePlayerMapClick(args: { location: MapLocation }) {\r\n        console.log(`BaseActivatorComponent: handlePlayerMapClick: Got a click! args:`, { args: args });\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(`BaseActivatorComponent: render: Entering with props and state:`, { props: this.props, state: this.state });\r\n\r\n        const baseActivationOptions = (args: { forBase: Exclude<MilitaryBaseTypes, null> }) => {\r\n\r\n            if (args.forBase.WorldObjectLabel === \"ABM\") return <AbmBaseComponent key={this.uiKey()} base={args.forBase as AbmBase} />;\r\n            if (args.forBase.WorldObjectLabel === \"Army\") return <ArmyBaseComponent key={this.uiKey()} base={args.forBase as ArmyBase} />;\r\n            if (args.forBase.WorldObjectLabel === \"Air\") return <AirBaseComponent key={this.uiKey()} base={args.forBase as AirBase} />;\r\n            if (args.forBase.WorldObjectLabel === \"Missile\") return <MissileBaseComponent key={this.uiKey()} base={args.forBase as MissileBase} />;\r\n            if (args.forBase.WorldObjectLabel === \"Navy\") return <NavyBaseComponent key={this.uiKey()} base={args.forBase as NavyBase} />;\r\n            if (args.forBase.WorldObjectLabel === \"Radar\") return <RadarBaseComponent key={this.uiKey()} base={args.forBase as RadarBase} />;\r\n\r\n        };\r\n\r\n        const toRender = (\r\n            <div className=\"baseActivatorContainer\">\r\n\r\n                <div>\r\n                    There exists a state of war.\r\n                </div>\r\n                \r\n                <div><h5>Active bases ({this.state.activeBases.length})</h5></div>\r\n                {\r\n                    this.state.activeBases.map(activeBase => activeBase.ui)\r\n                }\r\n\r\n                <div><h5>Inactive bases ({this.state.inactiveBases.length})</h5></div>\r\n                {\r\n                    this.state.inactiveBases.map(inactiveBase => inactiveBase.ui)\r\n                }\r\n\r\n                <div><h5>Destroyed bases ({this.state.destroyedBases.length})</h5></div>\r\n                {\r\n                    this.state.destroyedBases.map(destroyedBase => destroyedBase.ui)\r\n                }\r\n\r\n            </div>\r\n        )\r\n\r\n        return toRender;\r\n    }\r\n\r\n    private getBaseUI = (args: { forBase: Exclude<MilitaryBaseTypes, null> }) => {\r\n\r\n        const { WorldObjectLabel } = args.forBase;\r\n\r\n        if (WorldObjectLabel === \"ABM\") return <AbmBaseComponent key={this.uiKey()} base={args.forBase as AbmBase} />;\r\n        else if (WorldObjectLabel === \"Army\") return <ArmyBaseComponent key={this.uiKey()} base={args.forBase as ArmyBase} />;\r\n        else if (WorldObjectLabel === \"Air\") return <AirBaseComponent key={this.uiKey()} base={args.forBase as AirBase} />;\r\n        else if (WorldObjectLabel === \"Missile\") return <MissileBaseComponent key={this.uiKey()} base={args.forBase as MissileBase} />;\r\n        else if (WorldObjectLabel === \"Navy\") return <NavyBaseComponent key={this.uiKey()} base={args.forBase as NavyBase} />;\r\n        else return <RadarBaseComponent key={this.uiKey()} base={args.forBase as RadarBase} />;\r\n\r\n    };\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { GameRules, strategicMoveOptions, tacticalMoveOptions } from \"../Game/GameRules\";\r\nimport { GameLogic, GamestateWatcher, gameStateChangeDetails } from '../Game/GameLogic';\r\nimport { Button, withStyles } from '@material-ui/core';\r\nimport { TickerComponent } from './TickerComponent';\r\nimport { BuildManifestComponent } from './BuildManifestComponent';\r\nimport { HumanPlayer } from '../Game/HumanPlayer';\r\nimport { BaseActivatorComponent } from './BaseActivatorComponent';\r\nimport { playerMapClickListener } from './Game';\r\nimport { MapLocation } from '../Entities/MapObjects/MapLocation';\r\nimport { Game } from '../Entities/gameEntity';\r\nimport { UIComponent } from './GameButton';\r\n\r\n\r\nexport interface state {\r\n    isMakingStrategicChoice: boolean;\r\n    isMakingTacticalChoice: boolean;\r\n    isSelectingLocation: boolean;\r\n    isBuilding: boolean;\r\n    tacticalChoice: tacticalMoveOptions;\r\n    strategicChoice: strategicMoveOptions | null;\r\n    isWaitingForMyTurn: boolean;\r\n    isActivating: boolean;\r\n}\r\n\r\nexport interface props {\r\n    player: HumanPlayer;\r\n    mapClickListener: playerMapClickListener;\r\n    registerMapListener: (args: {forUserComponent: UserActionsComponent}) => void;\r\n}\r\n\r\ninterface actionHandlerMappings {\r\n    playerChoice: strategicMoveOptions | tacticalMoveOptions;\r\n    actionHandler: () => void;\r\n}\r\n\r\nexport class UserActionsComponent extends Component<props, state> implements GamestateWatcher, playerMapClickListener {\r\n\r\n    private uiIdx: number = 0;\r\n    private readonly uiKey = () => `useractions${this.uiIdx++}`;\r\n\r\n    private baseActivatorComponent: BaseActivatorComponent | null = null;\r\n\r\n    private readonly actionHandlers: actionHandlerMappings[] = [\r\n        {\r\n            actionHandler: this.handleFinishTurn,\r\n            playerChoice: \"Skip\"\r\n        },\r\n        {\r\n            actionHandler: this.handleBuild,\r\n            playerChoice: \"Build\"\r\n        },\r\n        {\r\n            actionHandler: this.handleDeclareWar,\r\n            playerChoice: \"Declare War\"\r\n        },\r\n        {\r\n            actionHandler: this.handleActivate,\r\n            playerChoice: \"Activate\"\r\n        },\r\n        {\r\n            actionHandler: this.handleActivate,\r\n            playerChoice: \"Activate Base\"\r\n        },\r\n        {\r\n            actionHandler: this.handleSpy,\r\n            playerChoice: \"Spy\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Sue for Peace\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Surrender\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"ABM\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Air\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Army\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Missile\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Navy\"\r\n        },\r\n        {\r\n            actionHandler: this.notYetImplemented,\r\n            playerChoice: \"Radar\"\r\n        }\r\n    ];\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            isSelectingLocation: false,\r\n            isMakingStrategicChoice: true,\r\n            isMakingTacticalChoice: false,\r\n            isBuilding: false,\r\n            tacticalChoice: null,\r\n            strategicChoice: null,\r\n            isWaitingForMyTurn: false,\r\n            isActivating: false\r\n        };\r\n\r\n        GameLogic.registerGamestateWatcher({watcher: this});\r\n\r\n    }\r\n\r\n    public handlePlayerMapClick(args: {location: MapLocation}) {\r\n        console.log(`UserActionsComponent: handlePlayerMapClick: Got a click! args:`, {args: args});\r\n\r\n        if (this.baseActivatorComponent) this.baseActivatorComponent.handlePlayerMapClick(args);\r\n    }\r\n\r\n    private getMoveChoiceLabels() {\r\n        return GameRules.getAllowedMoves();\r\n    }\r\n\r\n    private setInitialState() {\r\n        this.setState({\r\n            isBuilding: false,\r\n            isMakingStrategicChoice: true,\r\n            isMakingTacticalChoice: false,\r\n            isSelectingLocation: false,\r\n            tacticalChoice: null,\r\n            strategicChoice: null,\r\n            isWaitingForMyTurn: false\r\n        });\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.props.registerMapListener({forUserComponent: this});\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        if (args.details.changeLabel === \"Advance Turn\") {\r\n            this.setInitialState();\r\n        }\r\n\r\n        if (args.details.changeLabel === \"Computer Playing Its Turn\") {\r\n            this.setState({isWaitingForMyTurn: true});\r\n        }\r\n\r\n        if (args.details.changeLabel === \"War Declared\") {\r\n            this.setState(\r\n                {\r\n                    isActivating: true,\r\n                    isMakingStrategicChoice: false,\r\n                    isMakingTacticalChoice: true\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const strategicOptions = this.getMoveChoiceLabels().strategicOptions.map(c => this.getChoiceButtonMarkup({forChoice: c}));\r\n        const tacticalOptions = this.getMoveChoiceLabels().tacticalOptions.map(c => this.getChoiceButtonMarkup({forChoice: c}));\r\n\r\n        const waitingMarkup = () => (\r\n            <TickerComponent tickerInterval={10} tickerMessage=\"Waiting for the computer to finish its move...\"/>\r\n        )\r\n\r\n        if (this.state.isWaitingForMyTurn) { return waitingMarkup()}\r\n\r\n        if (this.state.isMakingStrategicChoice) {\r\n            return strategicOptions;\r\n        }\r\n\r\n        if (this.state.isBuilding) {\r\n            return (\r\n                <BuildManifestComponent \r\n                    allowedBasesToBuild={this.getMoveChoiceLabels().tacticalOptions} \r\n                    totalAllowedToBuild={GameRules.getTotalBasesAllowedToBuild({basedOnStrategicChoice: this.state.strategicChoice})}\r\n                />\r\n            )\r\n        }\r\n\r\n        if (this.state.isActivating) {\r\n            return (\r\n                <BaseActivatorComponent \r\n                    player={this.props.player} \r\n                    registerForHumanPlayerMapClicks={(\r\n                        args: {ui: BaseActivatorComponent}) => this.baseActivatorComponent = args.ui}/>\r\n            );\r\n        }\r\n\r\n        else {\r\n            return tacticalOptions;\r\n        }\r\n\r\n    }\r\n\r\n    private getChoiceButtonMarkup(args: {forChoice: strategicMoveOptions | tacticalMoveOptions}) {\r\n\r\n        const actionHandler = this.actionHandlers.filter(ah => ah.playerChoice === args.forChoice)[0];\r\n\r\n        if (! actionHandler) {\r\n            const err = {\r\n                msg: \"UserActionsComponent: getChoiceButtonMarkup: Error: failed to get an action handler for the provided choice.\",\r\n                args: args\r\n            };\r\n\r\n            console.error(err);\r\n            throw err;\r\n        }\r\n\r\n        return (\r\n            <UIComponent.GameButton key={this.uiKey()} onClick={actionHandler.actionHandler.bind(this)}>\r\n                {/* <TickerComponent tickerInterval={50} tickerMessage={args.forChoice as string}/> */}\r\n                {args.forChoice}\r\n            </UIComponent.GameButton>\r\n        )\r\n    }\r\n\r\n    private handleDeclareWar() {\r\n        \r\n        console.log(`UserActionsComponent: handleDeclareWar: Entering.`);\r\n\r\n        GameLogic.declareWar({declaringPlayer: this.props.player});\r\n\r\n        this.setState(\r\n            {\r\n                isActivating: true,\r\n                isMakingStrategicChoice: false,\r\n                isMakingTacticalChoice: true\r\n            });\r\n\r\n    }\r\n\r\n    private handleBuild() {\r\n\r\n        console.log(`UserActionsComponent: handleBuild: Entering.`);\r\n\r\n        GameLogic.spyOnPlayer({targetPlayer: Game.getInstance().computerPlayer, spyLevel: 2});\r\n\r\n        this.setState({\r\n            isMakingTacticalChoice: true,\r\n            isMakingStrategicChoice: false,\r\n            isBuilding: true,\r\n            strategicChoice: \"Build\",\r\n            tacticalChoice: null\r\n        });\r\n\r\n    }\r\n\r\n    private handleActivate() {\r\n        this.setState(\r\n            {\r\n                isActivating: true,\r\n                isMakingStrategicChoice: false,\r\n                isMakingTacticalChoice: true\r\n            });\r\n    }\r\n\r\n    private handleSpy() {\r\n\r\n        GameLogic.spyOnPlayer({targetPlayer: Game.getInstance().computerPlayer, spyLevel: 2});\r\n\r\n        this.setState({\r\n            isMakingTacticalChoice: true,\r\n            isMakingStrategicChoice: false,\r\n            isBuilding: true,\r\n            strategicChoice: \"Spy\",\r\n            tacticalChoice: null\r\n        });\r\n\r\n    }\r\n\r\n    private handleFinishTurn() {\r\n\r\n        this.setState({\r\n            isSelectingLocation: false,\r\n            isMakingStrategicChoice: true,\r\n            isMakingTacticalChoice: false,\r\n            isBuilding: false\r\n        })\r\n\r\n        GameLogic.finishHumanTurn();\r\n\r\n    }\r\n\r\n    private notYetImplemented() {\r\n\r\n        console.log(`UserActionComponent: notYetImplemented: entering, advancing turn.`);\r\n\r\n        GameLogic.advanceTurn();\r\n\r\n        this.setState({\r\n            isSelectingLocation: false,\r\n            isMakingStrategicChoice: true,\r\n            isMakingTacticalChoice: false,\r\n            isBuilding: false\r\n        })\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { GamestateWatcher, gameStateChangeDetails, GameLogic, gameStateChangeType } from '../Game/GameLogic';\r\nimport { TickerComponent } from './TickerComponent';\r\n\r\ninterface gameMessage {\r\n    msg: string;\r\n}\r\n\r\ninterface props { }\r\n\r\ninterface state {\r\n    oldMessages: string[];\r\n    currentMessage: string;\r\n}\r\n\r\nexport class GameLogComponent extends Component<props, state> implements GamestateWatcher {\r\n\r\n    private nextUIKeyVal: number = 0;\r\n    private uiKey = () => `GLC_${this.nextUIKeyVal++}`;\r\n\r\n    private ignoreChangeLabels: gameStateChangeType[];\r\n\r\n    private queuedMessages: string[] = [];\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            oldMessages: [],\r\n            currentMessage: \"\"\r\n        }\r\n\r\n        this.ignoreChangeLabels = [\"Tick\"];\r\n    }\r\n\r\n    componentDidMount() {\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n        this.setState({\r\n            currentMessage: \"Initialzing...\"\r\n        })\r\n    }\r\n\r\n    private onTickerCompleted() {\r\n        // console.log(`GameLogComponent: onTickerCompleted: Entering.`);\r\n\r\n        // Move the current message to history\r\n        this.setState({\r\n            oldMessages: [this.state.currentMessage].concat(this.state.oldMessages)\r\n        })\r\n\r\n        // if there are any queued messages, then process them\r\n        if (this.queuedMessages.length > 0) {\r\n            this.setState({\r\n                currentMessage: this.queuedMessages.shift() as string\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        // If there's no queued message, then we're done.\r\n        this.setState({\r\n            currentMessage: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        const doIgnore = this.ignoreChangeLabels.filter(igcl => igcl === args.details.changeLabel).length > 0;\r\n        if (doIgnore) { return; }\r\n\r\n        // add the message we just got to the queue\r\n        this.queuedMessages = this.queuedMessages.concat(args.details.changeLabel);\r\n\r\n        // if we're already processing a message, do nothing\r\n        if (this.state.currentMessage.length > 0) {\r\n            return;\r\n        }\r\n\r\n        // Otherwise, the queue was empty, so process this one.\r\n        // Take the first item from the queue and make it current.\r\n        this.setState({\r\n            currentMessage: this.queuedMessages ? this.queuedMessages.shift() as string : \"\"\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"gameLogContainer\">\r\n                <div>\r\n                    -- Activities Log --\r\n                </div>\r\n                <div>\r\n                    {this.state.currentMessage && this.state.currentMessage.length > 0\r\n                        ?\r\n                        <TickerComponent\r\n                            tickerInterval={25}\r\n                            tickerMessage={this.state.currentMessage}\r\n                            onRenderCompleteCallback={this.onTickerCompleted.bind(this)} />\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                </div>\r\n                <div key={this.uiKey()}>\r\n                    {\r\n                        this.state.oldMessages.map(m => <div key={this.uiKey()}>{m}</div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport { MapLocation } from '../../Entities/MapObjects/MapLocation';\r\nimport { MapUtil } from '../../Utils/MapUtils';\r\n\r\nexport interface state {\r\n\r\n}\r\n\r\nexport interface props {\r\n    mapItem: MapLocation\r\n}\r\n\r\nexport class MapItemComponent extends React.Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n        // console.log(`MapItemComponent: Entering with props and state:`, { props: props, state: state });\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        const { mapItem } = this.props;\r\n\r\n        const nuclearDamageIndicator = () => {\r\n            const {nuclearStrikes} = this.props.mapItem;\r\n\r\n            if (nuclearStrikes === 1) return \"*\";\r\n            if (nuclearStrikes === 2) return \"**\";\r\n            if (nuclearStrikes === 3) return \"***\";\r\n\r\n            return \"\";\r\n\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {MapUtil.GetMapLocationSingleCharacterCode({forMapLocation: mapItem})}\r\n                {/* <span className=\"visibilityCount\">{mapItem.enemyVisibility}</span> */}\r\n                {nuclearDamageIndicator()}\r\n                \r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport { CountryMap } from '../../Entities/WorldObjects/CountryMap';\r\nimport { countrySummary, MapUtil } from '../../Utils/MapUtils';\r\nimport { GamestateWatcher, gameStateChangeDetails, GameLogic } from '../../Game/GameLogic';\r\nimport Odometer from 'react-odometerjs'\r\n// import 'odometer/themes/odometer-theme-default.css';\r\nimport 'odometer/themes/odometer-theme-train-station.css';\r\n\r\n\r\nexport interface state {\r\n    summarizedMap: countrySummary;\r\n}\r\n\r\nexport interface props {\r\n    mapToSummarize: CountryMap;\r\n}\r\n\r\nexport class MapSummaryComponent extends React.Component<props, state> implements GamestateWatcher {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            summarizedMap: MapUtil.initialSummary\r\n        }\r\n\r\n        // console.log(`MapSummaryComponent: Entering with props and state:`, { props: props, state: state });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n        this.setState(\r\n            {\r\n                summarizedMap: MapUtil.getMapSummary({ forMap: this.props.mapToSummarize })\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // const summarizedMap = MapUtil.getMapSummary({ forMap: this.props.mapToSummarize });\r\n        const { summarizedMap } = this.state;\r\n\r\n        return (\r\n            <div className=\"mapSummaryContainer\">\r\n                <div className=\"playerName\">\r\n                    {this.props.mapToSummarize.owningPlayer.Name}\r\n                </div>\r\n                <div>\r\n                    Population: <Odometer format=\"(,ddd)\" duration={5000} value={summarizedMap.totalPopulation}/>\r\n                    &nbsp;\r\n                    Casualties: <Odometer format=\"(,ddd)\" duration={5000} value={this.props.mapToSummarize.owningPlayer.totalCausualties}/>\r\n                </div>\r\n                <div>\r\n                    Bases:\r\n                    A: <Odometer format=\"d\" duration={5000} value={summarizedMap.allAbmBases.length}/>\r\n                    | R: <Odometer format=\"d\" duration={5000} value={summarizedMap.allRadarBases.length}/>\r\n                    | B: <Odometer format=\"d\" duration={5000} value={summarizedMap.allAirBases.length}/>\r\n                    | T: <Odometer format=\"d\" duration={5000} value={summarizedMap.allArmyBases.length}/>\r\n                    | M: <Odometer format=\"d\" duration={5000} value={summarizedMap.allMissileBases.length}/>\r\n                    | N: <Odometer format=\"d\" duration={5000} value={summarizedMap.allNavyBases.length}/>\r\n\r\n                </div>\r\n                <div>\r\n                    Ordnance:\r\n                    A: <Odometer format=\"d\" duration={5000} value={summarizedMap.totalAbmMissilesOnLine}/> \r\n                    | B: <Odometer format=\"d\" duration={5000} value={summarizedMap.totalBombersInFlight}/>\r\n                    | S: <Odometer format=\"d\" duration={5000} value={summarizedMap.totalSubMissilesOnLine}/>\r\n                    | F: <Odometer format=\"d\" duration={5000} value={summarizedMap.totalFightersOnPatrol}/>\r\n                    | M: <Odometer format=\"d\" duration={5000} value={summarizedMap.totalICBMsOnLine}/>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n        if (args.details.changeLabel === \"Base Activated\" \r\n        || args.details.changeLabel === \"Advance Turn\"\r\n        || args.details.changeLabel === \"Location Nuked\"\r\n            ) {\r\n            console.log(`MapSummaryComponent: handleGameStateChange: got a game state change, Base Activated.`);\r\n\r\n            this.setState({\r\n                summarizedMap: MapUtil.getMapSummary({ forMap: this.props.mapToSummarize })\r\n            })\r\n            // this.forceUpdate();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport { MapLocation } from '../../Entities/MapObjects/MapLocation';\r\n\r\nexport type hoverListenerFunc = ((args: {onMapLocation: MapLocation}) => void);\r\nexport type hoverListenerRegistrationFunction = (args: {hoverListener: hoverListenerFunc}) => void;\r\n\r\nexport interface state {\r\n    hoverMapLocation: MapLocation | null\r\n}\r\n\r\nexport interface props {\r\n    registerHoverListener: hoverListenerRegistrationFunction;\r\n}\r\n\r\nexport class MapItemHoverComponent extends React.Component<props, state> {\r\n\r\n    constructor(props: props, state: state) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            hoverMapLocation: null\r\n        };\r\n\r\n        console.log(`MapItemHoverComponent: Entering with props and state:`, { props: props, state: state });\r\n    }\r\n\r\n    private handleMapLocationHover: hoverListenerFunc = (args: {onMapLocation: MapLocation}) => {\r\n        console.log(`MapItemHoverComponent: handleMapLocationHover: Entering with args:`, args);\r\n        this.setState({hoverMapLocation: args.onMapLocation})\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        console.log(`MapItemHoverComponent: componentDidMount: my props and state:`, {props: this.props, state: this.state});\r\n        console.log(`MapItemHoverComponent: componentDidMount: registering my map location hover handler.`);\r\n\r\n        this.props.registerHoverListener({hoverListener: this.handleMapLocationHover.bind(this)});        \r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(`MapItemHoverLocation: render: entering.`);\r\n        \r\n        if (! this.state.hoverMapLocation) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <p>map location: {this.state.hoverMapLocation.uniqueID}</p>\r\n            <p>map location: {this.state.hoverMapLocation.Contents.Name}</p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n","\r\nimport React, { Component, SyntheticEvent } from 'react';\r\nimport { CountryMap } from '../../Entities/WorldObjects/CountryMap';\r\nimport { MapLocation } from '../../Entities/MapObjects/MapLocation';\r\nimport { GameRules } from '../../Game/GameRules';\r\nimport { Constants } from '../../Game/constants';\r\nimport { MilitaryBaseFactory } from '../../Factories/MilitaryBaseFactory';\r\nimport { MilitaryBaseTypeLabels } from '../../Entities/WorldObjects/Bases/MilitaryBaseTypes';\r\nimport { GamestateWatcher, gameStateChangeDetails, GameLogic } from '../../Game/GameLogic';\r\nimport { MapItemComponent } from './MapItemComponent';\r\nimport { MapSummaryComponent } from './MapSummaryComponent';\r\nimport { MapUtil } from '../../Utils/MapUtils';\r\nimport { Table, TableBody, TableCell } from '@material-ui/core';\r\nimport { MapItemHoverComponent, hoverListenerFunc } from './MapItemHoverComponent';\r\n\r\nexport interface buildBaseResult {\r\n  manifestIndex: number;\r\n  didSucceed: boolean;\r\n  message: string;\r\n}\r\n\r\nexport interface targetMissileResult {\r\n  missileIndex: number;\r\n  didSucceed: boolean;\r\n  message: string;\r\n  targetedLocation: MapLocation;\r\n}\r\n\r\nexport type notifyBuildDragResult = (args: { result: buildBaseResult }) => void;\r\nexport type notifyTargetDragResult = (args: { result: targetMissileResult }) => void;\r\n\r\nexport interface state {\r\n}\r\n\r\nexport interface props {\r\n  countryMap: CountryMap;\r\n  playerMapClickListener?: (args: { location: MapLocation }) => void\r\n}\r\n\r\nexport class MapComponent extends React.Component<props, state> implements GamestateWatcher {\r\n\r\n  private uiIdx: number = 0;\r\n\r\n  private notifyMapLocationHoveredOver!: hoverListenerFunc;\r\n\r\n  constructor(props: props, state: state) {\r\n    super(props, state);\r\n\r\n    this.state = {};\r\n\r\n    console.log(`MapComponent: Entering with props and state:`, { props: props, state: state });\r\n\r\n    GameLogic.registerGamestateWatcher({ watcher: this });\r\n\r\n  }\r\n\r\n  // This is passed as an argument down to the map item hover component.\r\n  // When it mounts, it invokes this and passes in the hover listener function to invoke when the user hovers their mouse over a map location.\r\n  private registerHoverListener(args: {hoverListener: hoverListenerFunc}) {\r\n    console.log(`MapComponent: hoverListenerRegistrationFunc: Entering with args:`, args);\r\n    this.notifyMapLocationHoveredOver = args.hoverListener;\r\n  }\r\n  \r\n  render() {\r\n\r\n    // console.log(`MapComponent.tsx: rendering a map:`, this.props.countryMap);\r\n\r\n    const mapRow = (mapRow: MapLocation[]) => {\r\n\r\n      const result =\r\n        <tr key={this.uiIdx++}>\r\n          {\r\n\r\n            mapRow.map(cell => (\r\n\r\n              <td key={this.uiIdx++}\r\n                className=\"mapCell\"\r\n                id={`${this.getMapLocationHtmlID(cell)}`}\r\n\r\n                onMouseOver={\r\n                  (e: any) => {\r\n                    console.log(`MapComponent: onMousOver: entering, hover listener:`, this.notifyMapLocationHoveredOver);\r\n                    if (this.notifyMapLocationHoveredOver) {\r\n                      console.log(`MapComponent: onMousOver: notifying listener.`);\r\n                      this.notifyMapLocationHoveredOver({onMapLocation: cell});\r\n                    }\r\n                  }\r\n                }\r\n\r\n                onClick={() => {if (this.props.playerMapClickListener) this.props.playerMapClickListener({ location: cell });}}\r\n\r\n                onDrop={\r\n                  (e: SyntheticEvent<HTMLTableDataCellElement>) => {\r\n                    e.preventDefault();\r\n                    this.handleDrop({ dropEvent: e, cell: cell });\r\n                  }\r\n                }\r\n\r\n                onDragLeave={\r\n                  (e: any) => {\r\n                    this.handleLocationDragEvent({ doLoc: cell, eventType: \"leave\" });\r\n                    e.preventDefault();\r\n                  }\r\n                }\r\n\r\n                onDragOver={\r\n                  (e: any) => {\r\n                    this.handleLocationDragEvent({ doLoc: cell, eventType: \"over\" });\r\n                    e.preventDefault();\r\n                    // console.log(`MapComponent: render: onDragOver: e:`, { e: e, cell: cell });\r\n                  }\r\n                }\r\n\r\n\r\n              >\r\n\r\n                <MapItemComponent mapItem={cell} key={this.uiIdx++} />\r\n                {cell.isTargeted ? <span>[T]</span> : null}\r\n              </td>\r\n            ))\r\n          }\r\n\r\n        </tr>\r\n        ;\r\n\r\n      return result;\r\n\r\n    }\r\n\r\n    const mapAsHtmlTable = () => {\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <table className=\"mapContainer\">\r\n            <tbody>\r\n              {this.props.countryMap.map.map(row => mapRow(row))}\r\n            </tbody>\r\n          </table>\r\n\r\n          <MapItemHoverComponent registerHoverListener={this.registerHoverListener.bind(this)}/>\r\n\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"playerMapContainer\">\r\n        <MapSummaryComponent mapToSummarize={this.props.countryMap} />\r\n        {mapAsHtmlTable()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public handleGamestateChange(args: { details: gameStateChangeDetails }) {\r\n\r\n    // console.log(`MapComponent: handleGamestateChange: Got a game state change:`, args);\r\n\r\n    const { changeLabel } = args.details;\r\n\r\n    if (changeLabel === \"Advance Turn\") {\r\n      this.forceUpdate();\r\n    }\r\n\r\n    else if (changeLabel === \"Map Location Targeted\") {\r\n      this.handleLocationTargeted({ targetedLocation: args.details.relatedLocation });\r\n    }\r\n\r\n    else if (changeLabel === \"Base Activated\") {\r\n\r\n      console.log(`MapComponent.tsx: handleGameStateChange: got a Base Activate updated, details:`, args);\r\n\r\n      const { relatedBase } = args.details;\r\n\r\n      if (relatedBase) {\r\n        this.handleBaseActivated({ nukedLocation: relatedBase.myMapLocation })\r\n      }\r\n    }\r\n    else if (args.details.changeLabel === \"Location Nuked\") {\r\n      this.handleLocationNuked({ nukedLocation: args.details.relatedLocation });\r\n    }\r\n    else if (args.details.changeLabel === \"ICBM Intercepted\" ||\r\n      args.details.changeLabel === \"Submarine Missile Shot Down By ABM\" ||\r\n      args.details.changeLabel === \"Bomber was shot down by ABM\" ||\r\n      args.details.changeLabel === \"Bomber was shot down by Figher\") {\r\n      this.handleLocationDetargeted({ detargetedLocation: args.details.relatedLocation });\r\n    }\r\n\r\n  }\r\n\r\n  private handleBaseActivated(args: { nukedLocation: MapLocation | undefined }) {\r\n    if (args.nukedLocation) {\r\n      const mapLocElement = document.getElementById(this.getMapLocationHtmlID(args.nukedLocation));\r\n\r\n      if (mapLocElement) {\r\n        mapLocElement.classList.add(\"activatedBase\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleLocationTargeted(args: { targetedLocation: MapLocation | undefined }) {\r\n    if (args.targetedLocation) {\r\n      const mapLocElement = document.getElementById(this.getMapLocationHtmlID(args.targetedLocation));\r\n\r\n      if (mapLocElement) {\r\n        mapLocElement.classList.add(\"targetedMapLocation\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleLocationDetargeted(args: { detargetedLocation: MapLocation | undefined }) {\r\n    if (args.detargetedLocation) {\r\n      const mapLocElement = document.getElementById(this.getMapLocationHtmlID(args.detargetedLocation));\r\n\r\n      if (mapLocElement) {\r\n        mapLocElement.classList.remove(\"targetedMapLocation\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleLocationNuked(args: { nukedLocation: MapLocation | undefined }) {\r\n\r\n    // console.log(`MapComponent.ts: handleLocationNuked: Entering, args:`, args);\r\n\r\n    if (args.nukedLocation) {\r\n\r\n      // console.log(`MapComponent.ts: handleLocationNuked: Got a nuked location OK.`);\r\n\r\n      const mapLocElement = document.getElementById(this.getMapLocationHtmlID(args.nukedLocation));\r\n\r\n      if (mapLocElement) {\r\n        // console.log(`MapComponent.ts: handleLocationNuked: fiddling with nuke classes.`);\r\n\r\n        const nukeClasses = [\"nukedOnce\", \"nukedTwice\", \"nukedThrice\"];\r\n        const { nukedLocation } = args;\r\n\r\n        mapLocElement.classList.add(nukeClasses[nukedLocation.nuclearStrikes >= 3 ? 2 : nukedLocation.nuclearStrikes - 1]);\r\n\r\n        this.handleLocationDetargeted({ detargetedLocation: args.nukedLocation });\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleLocationDragEvent(args: { doLoc: MapLocation, eventType: \"over\" | \"leave\" }) {\r\n\r\n    console.log(`MapComponent.ts: handleLocationDraggedOver: Entering, args:`, args);\r\n\r\n    if (args.doLoc) {\r\n\r\n      console.log(`MapComponent.ts: handleLocationDraggedOver: Got a nuked location OK.`);\r\n\r\n      const mapLocElement = document.getElementById(this.getMapLocationHtmlID(args.doLoc));\r\n\r\n      if (mapLocElement) {\r\n        console.log(`MapComponent.ts: handleLocationDraggedOver: fiddling with nuke classes.`);\r\n\r\n        if (args.eventType === \"over\") {\r\n          mapLocElement.classList.add(\"mapLocationDraggedOver\");\r\n        }\r\n        else {\r\n          mapLocElement.classList.remove(\"mapLocationDraggedOver\");\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDrop(args: { dropEvent: any /* SyntheticEvent<HTMLTableCellElement>*/, cell: MapLocation }) {\r\n\r\n    console.log(`MapComponent.tsx: handleDrop: Got a drop event on a cell:`, {\r\n      event: args.dropEvent,\r\n      cell: args.cell,\r\n      baseType: args.dropEvent.dataTransfer.getData(\"baseType\"),\r\n      manifestIndex: args.dropEvent.dataTransfer.getData(\"manifestIndex\"),\r\n      dropType: args.dropEvent.dataTransfer.getData(\"dropType\")\r\n    }\r\n    );\r\n\r\n    if (args.dropEvent.dataTransfer.getData(\"dropType\") === Constants.BUILD_DROP) {\r\n      this.handleBuildDrop(args);\r\n      this.forceUpdate();\r\n    }\r\n    else if (args.dropEvent.dataTransfer.getData(\"dropType\") === Constants.TARGET_MISSILE_DROP) {\r\n      this.handleTargetDrop(args);\r\n    }\r\n    else {\r\n      console.log(`MapComponent: handleDrop: got an unknown drop type:`, args.dropEvent.dataTransfer.getData(\"dropType\"));\r\n    }\r\n\r\n  }\r\n\r\n  private handleTargetDrop(args: { dropEvent: any, cell: MapLocation }) {\r\n\r\n    const notifyDragResultCallack: notifyTargetDragResult = (window as any)[Constants.NOTIFY_TARGET_RESULT_CALLBACK_NAME];\r\n\r\n    console.log(`MapComponent.tsx: handleTargetDrop: Got a drop event on a cell:`, {\r\n      event: args.dropEvent,\r\n      cell: args.cell,\r\n      baseType: args.dropEvent.dataTransfer.getData(\"baseType\"),\r\n      manifestIndex: args.dropEvent.dataTransfer.getData(\"manifestIndex\")\r\n    }\r\n    );\r\n\r\n    this.handleLocationDragEvent({ doLoc: args.cell, eventType: \"leave\" }); // clears any class artifact.\r\n\r\n    notifyDragResultCallack(\r\n      {\r\n        result: {\r\n          didSucceed: true,\r\n          missileIndex: parseInt(args.dropEvent.dataTransfer.getData(\"missileIndex\")),\r\n          message: `Successfully targeted enemy sector ${args.cell.uniqueID}.`,\r\n          targetedLocation: args.cell\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  private handleBuildDrop(args: { dropEvent: any, cell: MapLocation }) {\r\n\r\n    const notifyDragResultCallack: notifyBuildDragResult = (window as any)[Constants.NOTIFY_BUILD_RESULT_CALLBACK_NAME];\r\n\r\n    console.log(`MapComponent.tsx: handleBuildDrop: Got a drop event on a cell:`, {\r\n      event: args.dropEvent,\r\n      cell: args.cell,\r\n      baseType: args.dropEvent.dataTransfer.getData(\"baseType\"),\r\n      manifestIndex: args.dropEvent.dataTransfer.getData(\"manifestIndex\")\r\n    }\r\n    );\r\n\r\n    const isOK = args.cell.Contents !== null && GameRules.canPlaceItemAtMapLocation(\r\n      {\r\n        atLocation: args.cell,\r\n        itemToCheck: args.cell.Contents.WorldObjectLabel,\r\n        map: this.props.countryMap\r\n      });\r\n\r\n    if (isOK) {\r\n\r\n      const newBase = MilitaryBaseFactory.getInstance().createNewBase(\r\n        {\r\n          baseType: (args.dropEvent.dataTransfer.getData(\"baseType\") as MilitaryBaseTypeLabels),\r\n          atLocation: args.cell\r\n        });\r\n\r\n      if (newBase) {\r\n        args.cell.placeItem({ itemToPlace: newBase });\r\n\r\n        notifyDragResultCallack(\r\n          {\r\n            result: {\r\n              didSucceed: true,\r\n              manifestIndex: parseInt(args.dropEvent.dataTransfer.getData(\"manifestIndex\")),\r\n              message: `Successfully built a base, type=${newBase.WorldObjectLabel} named ${newBase.Name}.`\r\n            }\r\n          });\r\n      }\r\n      else {\r\n        notifyDragResultCallack(\r\n          {\r\n            result: {\r\n              didSucceed: true,\r\n              manifestIndex: parseInt(args.dropEvent.dataTransfer.getData(\"manifestIndex\")),\r\n              message: `unknown base type!.`\r\n            }\r\n          });\r\n      }\r\n    }\r\n    else {\r\n      console.log(`MapComponent: handleBuildDrop: You can't place an object there because of rules or it's not an empty location.`);\r\n      notifyDragResultCallack(\r\n        {\r\n          result: {\r\n            didSucceed: false,\r\n            manifestIndex: parseInt(args.dropEvent.dataTransfer.getData(\"manifestIndex\")),\r\n            message: \"You cannot build a base there because it is already occupied by another base or large population area.\"\r\n          }\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  private getMapLocationHtmlID(forMapLocation: MapLocation) {\r\n    return MapUtil.getMapLocationHtmlID(forMapLocation);\r\n  }\r\n\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { GameHeaderComponent } from \"./GameHeaderComponent\";\r\nimport { UserActionsComponent } from \"./UserActionsComponent\";\r\nimport { GameLogComponent } from \"./GameLogComponent\";\r\nimport { Grid, Paper, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\r\nimport { Game } from '../Entities/gameEntity';\r\nimport { MapLocation } from '../Entities/MapObjects/MapLocation';\r\nimport { MapComponent } from './MapComponents/MapComponent';\r\n\r\nexport interface playerMapClickListener {\r\n    handlePlayerMapClick: (args: { location: MapLocation }) => void;\r\n}\r\n\r\nexport class GameComponent extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const gameEntity = Game.getInstance();\r\n\r\n        gameEntity.startGame();\r\n    }\r\n\r\n    private userActionsComponent: UserActionsComponent | null = null;\r\n\r\n    private registerMapListener(args: { forUserComponent: UserActionsComponent }) {\r\n        this.userActionsComponent = args.forUserComponent;\r\n    }\r\n\r\n    private playerMapClickListener(args: { location: MapLocation }) {\r\n        console.log(`Game.tsx: playerMapClickListener: player clicked on a map location:`, args.location);\r\n\r\n        if (this.userActionsComponent) { this.userActionsComponent.handlePlayerMapClick(args) }\r\n    }\r\n\r\n    render() {\r\n\r\n        const gameEntity = Game.getInstance();\r\n\r\n        const format1 = () => (\r\n            <React.Fragment>\r\n                <Grid item xs={12}>\r\n                    <GameHeaderComponent />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <UserActionsComponent\r\n                        player={gameEntity.humanPlayer}\r\n                        mapClickListener={this.playerMapClickListener.bind(this)}\r\n                        registerMapListener={this.registerMapListener.bind(this)}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <MapComponent countryMap={gameEntity.humanPlayer.map} playerMapClickListener={this.playerMapClickListener.bind(this)} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <div className=\"xcomputerMapContainer\">\r\n                        <MapComponent countryMap={gameEntity.computerPlayer.map} />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <GameLogComponent />\r\n                </Grid>\r\n            </React.Fragment>\r\n\r\n        );\r\n\r\n        const format2 = () => (\r\n            <React.Fragment>\r\n                <Grid item xs={12}>\r\n                    <GameHeaderComponent />\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <Paper>\r\n                        Human<br />\r\n                        <MapComponent countryMap={gameEntity.humanPlayer.map} playerMapClickListener={this.playerMapClickListener.bind(this)} />\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <UserActionsComponent\r\n                        player={gameEntity.humanPlayer}\r\n                        mapClickListener={this.playerMapClickListener.bind(this)}\r\n                        registerMapListener={this.registerMapListener.bind(this)}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <Paper>\r\n                        {gameEntity.computerPlayer.Name}<br />\r\n                        <MapComponent countryMap={gameEntity.computerPlayer.map} />\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <GameLogComponent />\r\n                </Grid>\r\n            </React.Fragment>\r\n\r\n        );\r\n\r\n        const format3 = () => (\r\n            <Grid container className=\"gameDefaults gameContainer\" alignContent=\"center\">\r\n\r\n                <Grid item xs={12}>\r\n                    <GameHeaderComponent />\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"gameUILeftZone\">\r\n                    <Grid container alignContent=\"center\">\r\n                        <MapComponent countryMap={gameEntity.humanPlayer.map} playerMapClickListener={this.playerMapClickListener.bind(this)} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={4} className=\"gameUIMiddleZone\">\r\n                    <UserActionsComponent\r\n                        player={gameEntity.humanPlayer}\r\n                        mapClickListener={this.playerMapClickListener.bind(this)}\r\n                        registerMapListener={this.registerMapListener.bind(this)}\r\n                    />\r\n                    <GameLogComponent />\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"gameUIRightZone\">\r\n                    <MapComponent countryMap={gameEntity.computerPlayer.map} />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        );\r\n\r\n\r\n        return format3();\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { GameComponent } from './Components/Game';\r\nimport { Grid, Paper } from '@material-ui/core';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Paper>\r\n        <Grid container justify=\"center\"><GameComponent/></Grid>\r\n      </Paper>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}